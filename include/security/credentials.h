// NOTE: this file is autogenerated, DO NOT MODIFY
#include "../bootstrap.h"
//--------------------------------------------------------------------------------
// Section: Constants (112)
//--------------------------------------------------------------------------------
#define GUID_DEVINTERFACE_SMARTCARD_READER GUID { "50dd5230-ba8a-11d1-bf5d-0000f805f530" }
#define SCARD_ATR_LENGTH (UINT)33
#define SCARD_PROTOCOL_UNDEFINED (UINT)0
#define SCARD_PROTOCOL_T0 (UINT)1
#define SCARD_PROTOCOL_T1 (UINT)2
#define SCARD_PROTOCOL_RAW (UINT)65536
#define SCARD_PROTOCOL_DEFAULT (UINT)2147483648
#define SCARD_PROTOCOL_OPTIMAL (UINT)0
#define SCARD_POWER_DOWN (UINT)0
#define SCARD_COLD_RESET (UINT)1
#define SCARD_WARM_RESET (UINT)2
#define MAXIMUM_ATTR_STRING_LENGTH (UINT)32
#define MAXIMUM_SMARTCARD_READERS (UINT)10
#define SCARD_CLASS_VENDOR_INFO (UINT)1
#define SCARD_CLASS_COMMUNICATIONS (UINT)2
#define SCARD_CLASS_PROTOCOL (UINT)3
#define SCARD_CLASS_POWER_MGMT (UINT)4
#define SCARD_CLASS_SECURITY (UINT)5
#define SCARD_CLASS_MECHANICAL (UINT)6
#define SCARD_CLASS_VENDOR_DEFINED (UINT)7
#define SCARD_CLASS_IFD_PROTOCOL (UINT)8
#define SCARD_CLASS_ICC_STATE (UINT)9
#define SCARD_CLASS_PERF (UINT)32766
#define SCARD_CLASS_SYSTEM (UINT)32767
#define SCARD_T0_HEADER_LENGTH (UINT)7
#define SCARD_T0_CMD_LENGTH (UINT)5
#define SCARD_T1_PROLOGUE_LENGTH (UINT)3
#define SCARD_T1_EPILOGUE_LENGTH (UINT)2
#define SCARD_T1_EPILOGUE_LENGTH_LRC (UINT)1
#define SCARD_T1_MAX_IFS (UINT)254
#define SCARD_UNKNOWN (UINT)0
#define SCARD_ABSENT (UINT)1
#define SCARD_PRESENT (UINT)2
#define SCARD_SWALLOWED (UINT)3
#define SCARD_POWERED (UINT)4
#define SCARD_NEGOTIABLE (UINT)5
#define SCARD_SPECIFIC (UINT)6
#define SCARD_READER_SWALLOWS (UINT)1
#define SCARD_READER_EJECTS (UINT)2
#define SCARD_READER_CONFISCATES (UINT)4
#define SCARD_READER_CONTACTLESS (UINT)8
#define SCARD_READER_TYPE_SERIAL (UINT)1
#define SCARD_READER_TYPE_PARALELL (UINT)2
#define SCARD_READER_TYPE_KEYBOARD (UINT)4
#define SCARD_READER_TYPE_SCSI (UINT)8
#define SCARD_READER_TYPE_IDE (UINT)16
#define SCARD_READER_TYPE_USB (UINT)32
#define SCARD_READER_TYPE_PCMCIA (UINT)64
#define SCARD_READER_TYPE_TPM (UINT)128
#define SCARD_READER_TYPE_NFC (UINT)256
#define SCARD_READER_TYPE_UICC (UINT)512
#define SCARD_READER_TYPE_NGC (UINT)1024
#define SCARD_READER_TYPE_EMBEDDEDSE (UINT)2048
#define SCARD_READER_TYPE_VENDOR (UINT)240
#define STATUS_LOGON_FAILURE (NTSTATUS)(INT)-1073741715
#define STATUS_WRONG_PASSWORD (NTSTATUS)(INT)-1073741718
#define STATUS_PASSWORD_EXPIRED (NTSTATUS)(INT)-1073741711
#define STATUS_PASSWORD_MUST_CHANGE (NTSTATUS)(INT)-1073741276
#define STATUS_ACCESS_DENIED (NTSTATUS)(INT)-1073741790
#define STATUS_DOWNGRADE_DETECTED (NTSTATUS)(INT)-1073740920
#define STATUS_AUTHENTICATION_FIREWALL_FAILED (NTSTATUS)(INT)-1073740781
#define STATUS_ACCOUNT_DISABLED (NTSTATUS)(INT)-1073741710
#define STATUS_ACCOUNT_RESTRICTION (NTSTATUS)(INT)-1073741714
#define STATUS_ACCOUNT_LOCKED_OUT (NTSTATUS)(INT)-1073741260
#define STATUS_ACCOUNT_EXPIRED (NTSTATUS)(INT)-1073741421
#define STATUS_LOGON_TYPE_NOT_GRANTED (NTSTATUS)(INT)-1073741477
#define STATUS_NO_SUCH_LOGON_SESSION (NTSTATUS)(INT)-1073741729
#define STATUS_NO_SUCH_USER (NTSTATUS)(INT)-1073741724
#define CRED_MAX_STRING_LENGTH (UINT)256
#define CRED_MAX_GENERIC_TARGET_NAME_LENGTH (UINT)32767
#define CRED_MAX_TARGETNAME_NAMESPACE_LENGTH (UINT)256
#define CRED_MAX_TARGETNAME_ATTRIBUTE_LENGTH (UINT)256
#define CRED_MAX_VALUE_SIZE (UINT)256
#define CRED_MAX_ATTRIBUTES (UINT)64
#define CRED_LOGON_TYPES_MASK (UINT)61440
#define CRED_TI_SERVER_FORMAT_UNKNOWN (UINT)1
#define CRED_TI_DOMAIN_FORMAT_UNKNOWN (UINT)2
#define CRED_TI_ONLY_PASSWORD_REQUIRED (UINT)4
#define CRED_TI_USERNAME_TARGET (UINT)8
#define CRED_TI_CREATE_EXPLICIT_CRED (UINT)16
#define CRED_TI_WORKGROUP_MEMBER (UINT)32
#define CRED_TI_DNSTREE_IS_DFS_SERVER (UINT)64
#define CRED_TI_VALID_FLAGS (UINT)61567
#define CERT_HASH_LENGTH (UINT)20
#define CREDUI_MAX_MESSAGE_LENGTH (UINT)1024
#define CREDUI_MAX_CAPTION_LENGTH (UINT)128
#define CRED_PRESERVE_CREDENTIAL_BLOB (UINT)1
#define CRED_CACHE_TARGET_INFORMATION (UINT)1
#define CRED_ALLOW_NAME_RESOLUTION (UINT)1
#define CRED_PROTECT_AS_SELF (UINT)1
#define CRED_PROTECT_TO_SYSTEM (UINT)2
#define CRED_UNPROTECT_AS_SELF (UINT)1
#define CRED_UNPROTECT_ALLOW_TO_SYSTEM (UINT)2
#define SCARD_SCOPE_TERMINAL (UINT)1
#define SCARD_PROVIDER_PRIMARY (UINT)1
#define SCARD_PROVIDER_CSP (UINT)2
#define SCARD_PROVIDER_KSP (UINT)3
#define SCARD_STATE_UNPOWERED (UINT)1024
#define SCARD_SHARE_EXCLUSIVE (UINT)1
#define SCARD_SHARE_SHARED (UINT)2
#define SCARD_SHARE_DIRECT (UINT)3
#define SCARD_LEAVE_CARD (UINT)0
#define SCARD_RESET_CARD (UINT)1
#define SCARD_UNPOWER_CARD (UINT)2
#define SCARD_EJECT_CARD (UINT)3
#define SC_DLG_MINIMAL_UI (UINT)1
#define SC_DLG_NO_UI (UINT)2
#define SC_DLG_FORCE_UI (UINT)4
#define SCERR_NOCARDNAME (UINT)16384
#define SCERR_NOGUIDS (UINT)32768
#define SCARD_AUDIT_CHV_FAILURE (UINT)0
#define SCARD_AUDIT_CHV_SUCCESS (UINT)1

//--------------------------------------------------------------------------------
// Section: Types (46)
//--------------------------------------------------------------------------------
typedef enum {
    CRED_FLAGS_PASSWORD_FOR_CERT = 1,
    CRED_FLAGS_PROMPT_NOW = 2,
    CRED_FLAGS_USERNAME_TARGET = 4,
    CRED_FLAGS_OWF_CRED_BLOB = 8,
    CRED_FLAGS_REQUIRE_CONFIRMATION = 16,
    CRED_FLAGS_WILDCARD_MATCH = 32,
    CRED_FLAGS_VSM_PROTECTED = 64,
    CRED_FLAGS_NGC_CERT = 128,
    CRED_FLAGS_VALID_FLAGS = 61695,
    CRED_FLAGS_VALID_INPUT_FLAGS = 61599,
} CRED_FLAGS;

typedef enum {
    CRED_TYPE_GENERIC = 1,
    CRED_TYPE_DOMAIN_PASSWORD = 2,
    CRED_TYPE_DOMAIN_CERTIFICATE = 3,
    CRED_TYPE_DOMAIN_VISIBLE_PASSWORD = 4,
    CRED_TYPE_GENERIC_CERTIFICATE = 5,
    CRED_TYPE_DOMAIN_EXTENDED = 6,
    CRED_TYPE_MAXIMUM = 7,
    CRED_TYPE_MAXIMUM_EX = 1007,
} CRED_TYPE;

typedef enum {
    CRED_PERSIST_NONE = 0,
    CRED_PERSIST_SESSION = 1,
    CRED_PERSIST_LOCAL_MACHINE = 2,
    CRED_PERSIST_ENTERPRISE = 3,
} CRED_PERSIST;

typedef enum {
    CREDUI_FLAGS_ALWAYS_SHOW_UI = 128,
    CREDUI_FLAGS_COMPLETE_USERNAME = 2048,
    CREDUI_FLAGS_DO_NOT_PERSIST = 2,
    CREDUI_FLAGS_EXCLUDE_CERTIFICATES = 8,
    CREDUI_FLAGS_EXPECT_CONFIRMATION = 131072,
    CREDUI_FLAGS_GENERIC_CREDENTIALS = 262144,
    CREDUI_FLAGS_INCORRECT_PASSWORD = 1,
    CREDUI_FLAGS_KEEP_USERNAME = 1048576,
    CREDUI_FLAGS_PASSWORD_ONLY_OK = 512,
    CREDUI_FLAGS_PERSIST = 4096,
    CREDUI_FLAGS_REQUEST_ADMINISTRATOR = 4,
    CREDUI_FLAGS_REQUIRE_CERTIFICATE = 16,
    CREDUI_FLAGS_REQUIRE_SMARTCARD = 256,
    CREDUI_FLAGS_SERVER_CREDENTIAL = 16384,
    CREDUI_FLAGS_SHOW_SAVE_CHECK_BOX = 64,
    CREDUI_FLAGS_USERNAME_TARGET_CREDENTIALS = 524288,
    CREDUI_FLAGS_VALIDATE_USERNAME = 1024,
} CREDUI_FLAGS;

typedef enum {
    SCARD_SCOPE_USER = 0,
    SCARD_SCOPE_SYSTEM = 2,
} SCARD_SCOPE;

typedef enum {
    CRED_ENUMERATE_ALL_CREDENTIALS = 1,
} CRED_ENUMERATE_FLAGS;

typedef enum {
    CREDUIWIN_GENERIC = 1,
    CREDUIWIN_CHECKBOX = 2,
    CREDUIWIN_AUTHPACKAGE_ONLY = 16,
    CREDUIWIN_IN_CRED_ONLY = 32,
    CREDUIWIN_ENUMERATE_ADMINS = 256,
    CREDUIWIN_ENUMERATE_CURRENT_USER = 512,
    CREDUIWIN_SECURE_PROMPT = 4096,
    CREDUIWIN_PREPROMPTING = 8192,
    CREDUIWIN_PACK_32_WOW = 268435456,
} CREDUIWIN_FLAGS;

typedef enum {
    SCARD_STATE_UNAWARE = 0,
    SCARD_STATE_IGNORE = 1,
    SCARD_STATE_UNAVAILABLE = 8,
    SCARD_STATE_EMPTY = 16,
    SCARD_STATE_PRESENT = 32,
    SCARD_STATE_ATRMATCH = 64,
    SCARD_STATE_EXCLUSIVE = 128,
    SCARD_STATE_INUSE = 256,
    SCARD_STATE_MUTE = 512,
    SCARD_STATE_CHANGED = 2,
    SCARD_STATE_UNKNOWN = 4,
} SCARD_STATE;

typedef enum {
    CRED_PACK_PROTECTED_CREDENTIALS = 1,
    CRED_PACK_WOW_BUFFER = 2,
    CRED_PACK_GENERIC_CREDENTIALS = 4,
    CRED_PACK_ID_PROVIDER_CREDENTIALS = 8,
} CRED_PACK_FLAGS;

typedef enum {
    KeyCredentialManagerOperationErrorStateNone = 0,
    KeyCredentialManagerOperationErrorStateDeviceJoinFailure = 1,
    KeyCredentialManagerOperationErrorStateTokenFailure = 2,
    KeyCredentialManagerOperationErrorStateCertificateFailure = 4,
    KeyCredentialManagerOperationErrorStateRemoteSessionFailure = 8,
    KeyCredentialManagerOperationErrorStatePolicyFailure = 16,
    KeyCredentialManagerOperationErrorStateHardwareFailure = 32,
    KeyCredentialManagerOperationErrorStatePinExistsFailure = 64,
} KeyCredentialManagerOperationErrorStates;

typedef enum {
    KeyCredentialManagerProvisioning = 0,
    KeyCredentialManagerPinChange = 1,
    KeyCredentialManagerPinReset = 2,
} KeyCredentialManagerOperationType;

typedef int KeyCredentialManagerInfo;

typedef int SecHandle;

typedef int CREDENTIAL_ATTRIBUTEA;

typedef int CREDENTIAL_ATTRIBUTEW;

typedef int CREDENTIALA;

typedef int CREDENTIALW;

typedef int CREDENTIAL_TARGET_INFORMATIONA;

typedef int CREDENTIAL_TARGET_INFORMATIONW;

typedef int CERT_CREDENTIAL_INFO;

typedef int USERNAME_TARGET_CREDENTIAL_INFO;

typedef int BINARY_BLOB_CREDENTIAL_INFO;

typedef enum {
    CertCredential = 1,
    UsernameTargetCredential = 2,
    BinaryBlobCredential = 3,
    UsernameForPackedCredentials = 4,
    BinaryBlobForSystem = 5,
} CRED_MARSHAL_TYPE;

typedef enum {
    CredUnprotected = 0,
    CredUserProtection = 1,
    CredTrustedProtection = 2,
    CredForSystemProtection = 3,
} CRED_PROTECTION_TYPE;

typedef int CREDUI_INFOA;

typedef int CREDUI_INFOW;

typedef int SCARD_IO_REQUEST;

typedef int SCARD_T0_COMMAND;

typedef int SCARD_T0_REQUEST;

typedef int SCARD_T1_REQUEST;

typedef int SCARD_READERSTATEA;

typedef int SCARD_READERSTATEW;

typedef int SCARD_ATRMASK;

typedef int LPOCNCONNPROCA;

typedef int LPOCNCONNPROCW;

typedef int LPOCNCHKPROC;

typedef int LPOCNDSCPROC;

typedef int OPENCARD_SEARCH_CRITERIAA;

typedef int OPENCARD_SEARCH_CRITERIAW;

typedef int OPENCARDNAME_EXA;

typedef int OPENCARDNAME_EXW;

typedef enum {
    RSR_MATCH_TYPE_READER_AND_CONTAINER = 1,
    RSR_MATCH_TYPE_SERIAL_NUMBER = 2,
    RSR_MATCH_TYPE_ALL_CARDS = 3,
} READER_SEL_REQUEST_MATCH_TYPE;

typedef int READER_SEL_REQUEST;

typedef int READER_SEL_RESPONSE;

typedef int OPENCARDNAMEA;

typedef int OPENCARDNAMEW;


//--------------------------------------------------------------------------------
// Section: Functions (127)
//--------------------------------------------------------------------------------
/*HRESULT*/void KeyCredentialManagerGetOperationErrorStates();

/*HRESULT*/void KeyCredentialManagerShowUIOperation();

/*HRESULT*/void KeyCredentialManagerGetInformation();

/*void*/void KeyCredentialManagerFreeInformation();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CredWriteW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CredWriteA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CredReadW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CredReadA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CredEnumerateW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CredEnumerateA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CredWriteDomainCredentialsW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CredWriteDomainCredentialsA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CredReadDomainCredentialsW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CredReadDomainCredentialsA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CredDeleteW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CredDeleteA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CredRenameW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CredRenameA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CredGetTargetInfoW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CredGetTargetInfoA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CredMarshalCredentialW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CredMarshalCredentialA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CredUnmarshalCredentialW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CredUnmarshalCredentialA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CredIsMarshaledCredentialW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CredIsMarshaledCredentialA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void CredUnPackAuthenticationBufferW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void CredUnPackAuthenticationBufferA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void CredPackAuthenticationBufferW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void CredPackAuthenticationBufferA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void CredProtectW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void CredProtectA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void CredUnprotectW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void CredUnprotectA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void CredIsProtectedW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void CredIsProtectedA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void CredFindBestCredentialW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void CredFindBestCredentialA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CredGetSessionTypes();

// TODO: this type is limited to platform 'windows5.1.2600'
/*void*/void CredFree();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void CredUIPromptForCredentialsW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void CredUIPromptForCredentialsA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void CredUIPromptForWindowsCredentialsW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void CredUIPromptForWindowsCredentialsA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void CredUIParseUserNameW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void CredUIParseUserNameA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void CredUICmdLinePromptForCredentialsW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void CredUICmdLinePromptForCredentialsA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void CredUIConfirmCredentialsW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void CredUIConfirmCredentialsA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void CredUIStoreSSOCredW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void CredUIReadSSOCredW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardEstablishContext();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardReleaseContext();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardIsValidContext();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardListReaderGroupsA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardListReaderGroupsW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardListReadersA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardListReadersW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardListCardsA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardListCardsW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardListInterfacesA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardListInterfacesW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardGetProviderIdA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardGetProviderIdW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardGetCardTypeProviderNameA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardGetCardTypeProviderNameW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardIntroduceReaderGroupA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardIntroduceReaderGroupW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardForgetReaderGroupA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardForgetReaderGroupW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardIntroduceReaderA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardIntroduceReaderW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardForgetReaderA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardForgetReaderW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardAddReaderToGroupA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardAddReaderToGroupW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardRemoveReaderFromGroupA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardRemoveReaderFromGroupW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardIntroduceCardTypeA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardIntroduceCardTypeW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardSetCardTypeProviderNameA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardSetCardTypeProviderNameW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardForgetCardTypeA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardForgetCardTypeW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardFreeMemory();

// TODO: this type is limited to platform 'windows5.1.2600'
/*HANDLE*/void SCardAccessStartedEvent();

// TODO: this type is limited to platform 'windows5.1.2600'
/*void*/void SCardReleaseStartedEvent();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardLocateCardsA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardLocateCardsW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardLocateCardsByATRA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardLocateCardsByATRW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardGetStatusChangeA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardGetStatusChangeW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardCancel();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardConnectA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardConnectW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardReconnect();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardDisconnect();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardBeginTransaction();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardEndTransaction();

/*i32*/void SCardState();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardStatusA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardStatusW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardTransmit();

// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void SCardGetTransmitCount();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardControl();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardGetAttrib();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardSetAttrib();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardUIDlgSelectCardA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void SCardUIDlgSelectCardW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void GetOpenCardNameA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void GetOpenCardNameW();

/*i32*/void SCardDlgExtendedError();

// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void SCardReadCacheA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void SCardReadCacheW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void SCardWriteCacheA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void SCardWriteCacheW();

// TODO: this type is limited to platform 'windows8.0'
/*i32*/void SCardGetReaderIconA();

// TODO: this type is limited to platform 'windows8.0'
/*i32*/void SCardGetReaderIconW();

// TODO: this type is limited to platform 'windows8.0'
/*i32*/void SCardGetDeviceTypeIdA();

// TODO: this type is limited to platform 'windows8.0'
/*i32*/void SCardGetDeviceTypeIdW();

// TODO: this type is limited to platform 'windows8.0'
/*i32*/void SCardGetReaderDeviceInstanceIdA();

// TODO: this type is limited to platform 'windows8.0'
/*i32*/void SCardGetReaderDeviceInstanceIdW();

// TODO: this type is limited to platform 'windows8.0'
/*i32*/void SCardListReadersWithDeviceInstanceIdA();

// TODO: this type is limited to platform 'windows8.0'
/*i32*/void SCardListReadersWithDeviceInstanceIdW();

// TODO: this type is limited to platform 'windows8.0'
/*i32*/void SCardAudit();

