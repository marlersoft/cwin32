// NOTE: this file is autogenerated, DO NOT MODIFY
#include "../bootstrap.h"
//--------------------------------------------------------------------------------
// Section: Constants (811)
//--------------------------------------------------------------------------------
#define SOCKET_DEFAULT2_QM_POLICY GUID { "aec2ef9c-3a4d-4d3e-8842-239942e39a47" }
#define REAL_TIME_NOTIFICATION_CAPABILITY GUID { "6b59819a-5cae-492d-a901-2a3c2c50164f" }
#define REAL_TIME_NOTIFICATION_CAPABILITY_EX GUID { "6843da03-154a-4616-a508-44371295f96b" }
#define ASSOCIATE_NAMERES_CONTEXT GUID { "59a38b67-d4fe-46e1-ba3c-87ea74ca3049" }
#define TCP_INITIAL_RTO_DEFAULT_RTT (UINT)0
#define TCP_INITIAL_RTO_DEFAULT_MAX_SYN_RETRANSMISSIONS (UINT)0
#define SOCKET_SETTINGS_GUARANTEE_ENCRYPTION (UINT)1
#define SOCKET_SETTINGS_ALLOW_INSECURE (UINT)2
#define SOCKET_SETTINGS_IPSEC_SKIP_FILTER_INSTANTIATION (UINT)1
#define SOCKET_SETTINGS_IPSEC_OPTIONAL_PEER_NAME_VERIFICATION (UINT)2
#define SOCKET_SETTINGS_IPSEC_ALLOW_FIRST_INBOUND_PKT_UNENCRYPTED (UINT)4
#define SOCKET_SETTINGS_IPSEC_PEER_NAME_IS_RAW_FORMAT (UINT)8
#define SOCKET_QUERY_IPSEC2_ABORT_CONNECTION_ON_FIELD_CHANGE (UINT)1
#define SOCKET_QUERY_IPSEC2_FIELD_MASK_MM_SA_ID (UINT)1
#define SOCKET_QUERY_IPSEC2_FIELD_MASK_QM_SA_ID (UINT)2
#define SOCKET_INFO_CONNECTION_SECURED (UINT)1
#define SOCKET_INFO_CONNECTION_ENCRYPTED (UINT)2
#define SOCKET_INFO_CONNECTION_IMPERSONATED (UINT)4
#define IN4ADDR_LOOPBACK (UINT)16777343
#define IN4ADDR_LOOPBACKPREFIX_LENGTH (UINT)8
#define IN4ADDR_LINKLOCALPREFIX_LENGTH (UINT)16
#define IN4ADDR_MULTICASTPREFIX_LENGTH (UINT)4
#define RIO_MSG_DONT_NOTIFY (UINT)1
#define RIO_MSG_DEFER (UINT)2
#define RIO_MSG_WAITALL (UINT)4
#define RIO_MSG_COMMIT_ONLY (UINT)8
#define RIO_MAX_CQ_SIZE (UINT)134217728
#define RIO_CORRUPT_CQ (UINT)4294967295
#define AF_UNIX (SHORT)1
#define AF_IMPLINK (SHORT)3
#define AF_PUP (SHORT)4
#define AF_CHAOS (SHORT)5
#define AF_NS (SHORT)6
#define AF_ISO (SHORT)7
#define AF_ECMA (SHORT)8
#define AF_DATAKIT (SHORT)9
#define AF_CCITT (SHORT)10
#define AF_SNA (SHORT)11
#define AF_DECnet (SHORT)12
#define AF_DLI (SHORT)13
#define AF_LAT (SHORT)14
#define AF_HYLINK (SHORT)15
#define AF_APPLETALK (SHORT)16
#define AF_NETBIOS (SHORT)17
#define AF_VOICEVIEW (SHORT)18
#define AF_FIREFOX (SHORT)19
#define AF_UNKNOWN1 (SHORT)20
#define AF_BAN (SHORT)21
#define AF_ATM (SHORT)22
#define AF_CLUSTER (SHORT)24
#define AF_12844 (SHORT)25
#define AF_IRDA (SHORT)26
#define AF_NETDES (SHORT)28
#define AF_MAX (SHORT)29
#define AF_TCNPROCESS (SHORT)29
#define AF_TCNMESSAGE (SHORT)30
#define AF_ICLFXBM (SHORT)31
#define AF_LINK (SHORT)33
#define AF_HYPERV (SHORT)34
#define SOCK_STREAM (SHORT)1
#define SOCK_DGRAM (SHORT)2
#define SOCK_RAW (SHORT)3
#define SOCK_RDM (SHORT)4
#define SOCK_SEQPACKET (SHORT)5
#define SOL_SOCKET (UINT)65535
#define SO_DEBUG (UINT)1
#define SO_ACCEPTCONN (UINT)2
#define SO_REUSEADDR (UINT)4
#define SO_KEEPALIVE (UINT)8
#define SO_DONTROUTE (UINT)16
#define SO_BROADCAST (UINT)32
#define SO_USELOOPBACK (UINT)64
#define SO_LINGER (UINT)128
#define SO_OOBINLINE (UINT)256
#define SO_SNDBUF (UINT)4097
#define SO_RCVBUF (UINT)4098
#define SO_SNDLOWAT (UINT)4099
#define SO_RCVLOWAT (UINT)4100
#define SO_SNDTIMEO (UINT)4101
#define SO_RCVTIMEO (UINT)4102
#define SO_ERROR (UINT)4103
#define SO_TYPE (UINT)4104
#define SO_BSP_STATE (UINT)4105
#define SO_GROUP_ID (UINT)8193
#define SO_GROUP_PRIORITY (UINT)8194
#define SO_MAX_MSG_SIZE (UINT)8195
#define SO_CONDITIONAL_ACCEPT (UINT)12290
#define SO_PAUSE_ACCEPT (UINT)12291
#define SO_COMPARTMENT_ID (UINT)12292
#define SO_RANDOMIZE_PORT (UINT)12293
#define SO_PORT_SCALABILITY (UINT)12294
#define SO_REUSE_UNICASTPORT (UINT)12295
#define SO_REUSE_MULTICASTPORT (UINT)12296
#define SO_ORIGINAL_DST (UINT)12303
#define WSK_SO_BASE (UINT)16384
#define TCP_NODELAY (UINT)1
#define _SS_MAXSIZE (UINT)128
#define IOC_UNIX (UINT)0
#define IOC_WS2 (UINT)134217728
#define IOC_PROTOCOL (UINT)268435456
#define IOC_VENDOR (UINT)402653184
#define IPPROTO_IP (UINT)0
#define IPPORT_TCPMUX (UINT)1
#define IPPORT_ECHO (UINT)7
#define IPPORT_DISCARD (UINT)9
#define IPPORT_SYSTAT (UINT)11
#define IPPORT_DAYTIME (UINT)13
#define IPPORT_NETSTAT (UINT)15
#define IPPORT_QOTD (UINT)17
#define IPPORT_MSP (UINT)18
#define IPPORT_CHARGEN (UINT)19
#define IPPORT_FTP_DATA (UINT)20
#define IPPORT_FTP (UINT)21
#define IPPORT_TELNET (UINT)23
#define IPPORT_SMTP (UINT)25
#define IPPORT_TIMESERVER (UINT)37
#define IPPORT_NAMESERVER (UINT)42
#define IPPORT_WHOIS (UINT)43
#define IPPORT_MTP (UINT)57
#define IPPORT_TFTP (UINT)69
#define IPPORT_RJE (UINT)77
#define IPPORT_FINGER (UINT)79
#define IPPORT_TTYLINK (UINT)87
#define IPPORT_SUPDUP (UINT)95
#define IPPORT_POP3 (UINT)110
#define IPPORT_NTP (UINT)123
#define IPPORT_EPMAP (UINT)135
#define IPPORT_NETBIOS_NS (UINT)137
#define IPPORT_NETBIOS_DGM (UINT)138
#define IPPORT_NETBIOS_SSN (UINT)139
#define IPPORT_IMAP (UINT)143
#define IPPORT_SNMP (UINT)161
#define IPPORT_SNMP_TRAP (UINT)162
#define IPPORT_IMAP3 (UINT)220
#define IPPORT_LDAP (UINT)389
#define IPPORT_HTTPS (UINT)443
#define IPPORT_MICROSOFT_DS (UINT)445
#define IPPORT_EXECSERVER (UINT)512
#define IPPORT_LOGINSERVER (UINT)513
#define IPPORT_CMDSERVER (UINT)514
#define IPPORT_EFSSERVER (UINT)520
#define IPPORT_BIFFUDP (UINT)512
#define IPPORT_WHOSERVER (UINT)513
#define IPPORT_ROUTESERVER (UINT)520
#define IPPORT_RESERVED (UINT)1024
#define IPPORT_REGISTERED_MAX (UINT)49151
#define IPPORT_DYNAMIC_MIN (UINT)49152
#define IPPORT_DYNAMIC_MAX (UINT)65535
#define IN_CLASSA_NET (UINT)4278190080
#define IN_CLASSA_NSHIFT (UINT)24
#define IN_CLASSA_HOST (UINT)16777215
#define IN_CLASSA_MAX (UINT)128
#define IN_CLASSB_NET (UINT)4294901760
#define IN_CLASSB_NSHIFT (UINT)16
#define IN_CLASSB_HOST (UINT)65535
#define IN_CLASSB_MAX (UINT)65536
#define IN_CLASSC_NET (UINT)4294967040
#define IN_CLASSC_NSHIFT (UINT)8
#define IN_CLASSC_HOST (UINT)255
#define IN_CLASSD_NET (UINT)4026531840
#define IN_CLASSD_NSHIFT (UINT)28
#define IN_CLASSD_HOST (UINT)268435455
#define INADDR_LOOPBACK (UINT)2130706433
#define INADDR_NONE (UINT)4294967295
#define IOCPARM_MASK (UINT)127
#define IOC_VOID (UINT)536870912
#define IOC_OUT (UINT)1073741824
#define IOC_IN (UINT)2147483648
#define MSG_TRUNC (UINT)256
#define MSG_CTRUNC (UINT)512
#define MSG_BCAST (UINT)1024
#define MSG_MCAST (UINT)2048
#define MSG_ERRQUEUE (UINT)4096
#define AI_PASSIVE (UINT)1
#define AI_CANONNAME (UINT)2
#define AI_NUMERICHOST (UINT)4
#define AI_NUMERICSERV (UINT)8
#define AI_DNS_ONLY (UINT)16
#define AI_ALL (UINT)256
#define AI_ADDRCONFIG (UINT)1024
#define AI_V4MAPPED (UINT)2048
#define AI_NON_AUTHORITATIVE (UINT)16384
#define AI_SECURE (UINT)32768
#define AI_RETURN_PREFERRED_NAMES (UINT)65536
#define AI_FQDN (UINT)131072
#define AI_FILESERVER (UINT)262144
#define AI_DISABLE_IDN_ENCODING (UINT)524288
#define AI_EXTENDED (UINT)2147483648
#define AI_RESOLUTION_HANDLE (UINT)1073741824
#define ADDRINFOEX_VERSION_2 (UINT)2
#define ADDRINFOEX_VERSION_3 (UINT)3
#define ADDRINFOEX_VERSION_4 (UINT)4
#define NS_ALL (UINT)0
#define NS_SAP (UINT)1
#define NS_NDS (UINT)2
#define NS_PEER_BROWSE (UINT)3
#define NS_SLP (UINT)5
#define NS_DHCP (UINT)6
#define NS_TCPIP_LOCAL (UINT)10
#define NS_TCPIP_HOSTS (UINT)11
#define NS_DNS (UINT)12
#define NS_NETBT (UINT)13
#define NS_WINS (UINT)14
#define NS_NLA (UINT)15
#define NS_NBP (UINT)20
#define NS_MS (UINT)30
#define NS_STDA (UINT)31
#define NS_NTDS (UINT)32
#define NS_EMAIL (UINT)37
#define NS_X500 (UINT)40
#define NS_NIS (UINT)41
#define NS_NISPLUS (UINT)42
#define NS_WRQ (UINT)50
#define NS_NETDES (UINT)60
#define NI_NOFQDN (UINT)1
#define NI_NUMERICHOST (UINT)2
#define NI_NAMEREQD (UINT)4
#define NI_NUMERICSERV (UINT)8
#define NI_DGRAM (UINT)16
#define NI_MAXHOST (UINT)1025
#define NI_MAXSERV (UINT)32
#define IFF_UP (UINT)1
#define IFF_BROADCAST (UINT)2
#define IFF_LOOPBACK (UINT)4
#define IFF_POINTTOPOINT (UINT)8
#define IFF_MULTICAST (UINT)16
#define IP_OPTIONS (UINT)1
#define IP_HDRINCL (UINT)2
#define IP_TOS (UINT)3
#define IP_TTL (UINT)4
#define IP_MULTICAST_IF (UINT)9
#define IP_MULTICAST_TTL (UINT)10
#define IP_MULTICAST_LOOP (UINT)11
#define IP_ADD_MEMBERSHIP (UINT)12
#define IP_DROP_MEMBERSHIP (UINT)13
#define IP_DONTFRAGMENT (UINT)14
#define IP_ADD_SOURCE_MEMBERSHIP (UINT)15
#define IP_DROP_SOURCE_MEMBERSHIP (UINT)16
#define IP_BLOCK_SOURCE (UINT)17
#define IP_UNBLOCK_SOURCE (UINT)18
#define IP_PKTINFO (UINT)19
#define IP_HOPLIMIT (UINT)21
#define IP_RECVTTL (UINT)21
#define IP_RECEIVE_BROADCAST (UINT)22
#define IP_RECVIF (UINT)24
#define IP_RECVDSTADDR (UINT)25
#define IP_IFLIST (UINT)28
#define IP_ADD_IFLIST (UINT)29
#define IP_DEL_IFLIST (UINT)30
#define IP_UNICAST_IF (UINT)31
#define IP_RTHDR (UINT)32
#define IP_GET_IFLIST (UINT)33
#define IP_RECVRTHDR (UINT)38
#define IP_TCLASS (UINT)39
#define IP_RECVTCLASS (UINT)40
#define IP_RECVTOS (UINT)40
#define IP_ORIGINAL_ARRIVAL_IF (UINT)47
#define IP_ECN (UINT)50
#define IP_PKTINFO_EX (UINT)51
#define IP_WFP_REDIRECT_RECORDS (UINT)60
#define IP_WFP_REDIRECT_CONTEXT (UINT)70
#define IP_MTU_DISCOVER (UINT)71
#define IP_MTU (UINT)73
#define IP_NRT_INTERFACE (UINT)74
#define IP_RECVERR (UINT)75
#define IP_USER_MTU (UINT)76
#define IP_UNSPECIFIED_TYPE_OF_SERVICE (INT)-1
#define IN6ADDR_LINKLOCALPREFIX_LENGTH (UINT)64
#define IN6ADDR_MULTICASTPREFIX_LENGTH (UINT)8
#define IN6ADDR_SOLICITEDNODEMULTICASTPREFIX_LENGTH (UINT)104
#define IN6ADDR_V4MAPPEDPREFIX_LENGTH (UINT)96
#define IN6ADDR_6TO4PREFIX_LENGTH (UINT)16
#define IN6ADDR_TEREDOPREFIX_LENGTH (UINT)32
#define MCAST_JOIN_GROUP (UINT)41
#define MCAST_LEAVE_GROUP (UINT)42
#define MCAST_BLOCK_SOURCE (UINT)43
#define MCAST_UNBLOCK_SOURCE (UINT)44
#define MCAST_JOIN_SOURCE_GROUP (UINT)45
#define MCAST_LEAVE_SOURCE_GROUP (UINT)46
#define IPV6_HOPOPTS (UINT)1
#define IPV6_HDRINCL (UINT)2
#define IPV6_UNICAST_HOPS (UINT)4
#define IPV6_MULTICAST_IF (UINT)9
#define IPV6_MULTICAST_HOPS (UINT)10
#define IPV6_MULTICAST_LOOP (UINT)11
#define IPV6_ADD_MEMBERSHIP (UINT)12
#define IPV6_DROP_MEMBERSHIP (UINT)13
#define IPV6_DONTFRAG (UINT)14
#define IPV6_PKTINFO (UINT)19
#define IPV6_HOPLIMIT (UINT)21
#define IPV6_PROTECTION_LEVEL (UINT)23
#define IPV6_RECVIF (UINT)24
#define IPV6_RECVDSTADDR (UINT)25
#define IPV6_CHECKSUM (UINT)26
#define IPV6_V6ONLY (UINT)27
#define IPV6_IFLIST (UINT)28
#define IPV6_ADD_IFLIST (UINT)29
#define IPV6_DEL_IFLIST (UINT)30
#define IPV6_UNICAST_IF (UINT)31
#define IPV6_RTHDR (UINT)32
#define IPV6_GET_IFLIST (UINT)33
#define IPV6_RECVRTHDR (UINT)38
#define IPV6_TCLASS (UINT)39
#define IPV6_RECVTCLASS (UINT)40
#define IPV6_ECN (UINT)50
#define IPV6_PKTINFO_EX (UINT)51
#define IPV6_WFP_REDIRECT_RECORDS (UINT)60
#define IPV6_WFP_REDIRECT_CONTEXT (UINT)70
#define IPV6_MTU_DISCOVER (UINT)71
#define IPV6_MTU (UINT)72
#define IPV6_NRT_INTERFACE (UINT)74
#define IPV6_RECVERR (UINT)75
#define IPV6_USER_MTU (UINT)76
#define IP_UNSPECIFIED_HOP_LIMIT (INT)-1
#define PROTECTION_LEVEL_UNRESTRICTED (UINT)10
#define PROTECTION_LEVEL_EDGERESTRICTED (UINT)20
#define PROTECTION_LEVEL_RESTRICTED (UINT)30
#define INET_ADDRSTRLEN (UINT)22
#define INET6_ADDRSTRLEN (UINT)65
#define TCP_OFFLOAD_NO_PREFERENCE (UINT)0
#define TCP_OFFLOAD_NOT_PREFERRED (UINT)1
#define TCP_OFFLOAD_PREFERRED (UINT)2
#define TCP_EXPEDITED_1122 (UINT)2
#define TCP_KEEPALIVE (UINT)3
#define TCP_MAXSEG (UINT)4
#define TCP_MAXRT (UINT)5
#define TCP_STDURG (UINT)6
#define TCP_NOURG (UINT)7
#define TCP_ATMARK (UINT)8
#define TCP_NOSYNRETRIES (UINT)9
#define TCP_TIMESTAMPS (UINT)10
#define TCP_OFFLOAD_PREFERENCE (UINT)11
#define TCP_CONGESTION_ALGORITHM (UINT)12
#define TCP_DELAY_FIN_ACK (UINT)13
#define TCP_MAXRTMS (UINT)14
#define TCP_FASTOPEN (UINT)15
#define TCP_KEEPCNT (UINT)16
#define TCP_KEEPINTVL (UINT)17
#define TCP_FAIL_CONNECT_ON_ICMP_ERROR (UINT)18
#define TCP_ICMP_ERROR_INFO (UINT)19
#define UDP_SEND_MSG_SIZE (UINT)2
#define UDP_RECV_MAX_COALESCED_SIZE (UINT)3
#define UDP_COALESCED_INFO (UINT)3
#define WINDOWS_AF_IRDA (UINT)26
#define WCE_AF_IRDA (UINT)22
#define IRDA_PROTO_SOCK_STREAM (UINT)1
#define SOL_IRLMP (UINT)255
#define IRLMP_ENUMDEVICES (UINT)16
#define IRLMP_IAS_SET (UINT)17
#define IRLMP_IAS_QUERY (UINT)18
#define IRLMP_SEND_PDU_LEN (UINT)19
#define IRLMP_EXCLUSIVE_MODE (UINT)20
#define IRLMP_IRLPT_MODE (UINT)21
#define IRLMP_9WIRE_MODE (UINT)22
#define IRLMP_TINYTP_MODE (UINT)23
#define IRLMP_PARAMETERS (UINT)24
#define IRLMP_DISCOVERY_MODE (UINT)25
#define IRLMP_SHARP_MODE (UINT)32
#define IAS_ATTRIB_NO_CLASS (UINT)16
#define IAS_ATTRIB_NO_ATTRIB (UINT)0
#define IAS_ATTRIB_INT (UINT)1
#define IAS_ATTRIB_OCTETSEQ (UINT)2
#define IAS_ATTRIB_STR (UINT)3
#define IAS_MAX_USER_STRING (UINT)256
#define IAS_MAX_OCTET_STRING (UINT)1024
#define IAS_MAX_CLASSNAME (UINT)64
#define IAS_MAX_ATTRIBNAME (UINT)256
#define LmCharSetASCII (UINT)0
#define LmCharSetISO_8859_1 (UINT)1
#define LmCharSetISO_8859_2 (UINT)2
#define LmCharSetISO_8859_3 (UINT)3
#define LmCharSetISO_8859_4 (UINT)4
#define LmCharSetISO_8859_5 (UINT)5
#define LmCharSetISO_8859_6 (UINT)6
#define LmCharSetISO_8859_7 (UINT)7
#define LmCharSetISO_8859_8 (UINT)8
#define LmCharSetISO_8859_9 (UINT)9
#define LmCharSetUNICODE (UINT)255
#define LM_BAUD_1200 (UINT)1200
#define LM_BAUD_2400 (UINT)2400
#define LM_BAUD_9600 (UINT)9600
#define LM_BAUD_19200 (UINT)19200
#define LM_BAUD_38400 (UINT)38400
#define LM_BAUD_57600 (UINT)57600
#define LM_BAUD_115200 (UINT)115200
#define LM_BAUD_576K (UINT)576000
#define LM_BAUD_1152K (UINT)1152000
#define LM_BAUD_4M (UINT)4000000
#define LM_BAUD_16M (UINT)16000000
#define SO_CONNDATA (UINT)28672
#define SO_CONNOPT (UINT)28673
#define SO_DISCDATA (UINT)28674
#define SO_DISCOPT (UINT)28675
#define SO_CONNDATALEN (UINT)28676
#define SO_CONNOPTLEN (UINT)28677
#define SO_DISCDATALEN (UINT)28678
#define SO_DISCOPTLEN (UINT)28679
#define SO_OPENTYPE (UINT)28680
#define SO_SYNCHRONOUS_ALERT (UINT)16
#define SO_SYNCHRONOUS_NONALERT (UINT)32
#define SO_MAXDG (UINT)28681
#define SO_MAXPATHDG (UINT)28682
#define SO_UPDATE_ACCEPT_CONTEXT (UINT)28683
#define SO_CONNECT_TIME (UINT)28684
#define SO_UPDATE_CONNECT_CONTEXT (UINT)28688
#define TCP_BSDURGENT (UINT)28672
#define TF_DISCONNECT (UINT)1
#define TF_REUSE_SOCKET (UINT)2
#define TF_WRITE_BEHIND (UINT)4
#define TF_USE_DEFAULT_WORKER (UINT)0
#define TF_USE_SYSTEM_THREAD (UINT)16
#define TF_USE_KERNEL_APC (UINT)32
#define TP_ELEMENT_MEMORY (UINT)1
#define TP_ELEMENT_FILE (UINT)2
#define TP_ELEMENT_EOP (UINT)4
#define NLA_ALLUSERS_NETWORK (UINT)1
#define NLA_FRIENDLY_NAME (UINT)2
#define SERVICE_RESOURCE (UINT)1
#define SERVICE_SERVICE (UINT)2
#define SERVICE_LOCAL (UINT)4
#define SERVICE_FLAG_DEFER (UINT)1
#define SERVICE_FLAG_HARD (UINT)2
#define PROP_COMMENT (UINT)1
#define PROP_LOCALE (UINT)2
#define PROP_DISPLAY_HINT (UINT)4
#define PROP_VERSION (UINT)8
#define PROP_START_TIME (UINT)16
#define PROP_MACHINE (UINT)32
#define PROP_ADDRESSES (UINT)256
#define PROP_SD (UINT)512
#define PROP_ALL (UINT)2147483648
#define SERVICE_ADDRESS_FLAG_RPC_CN (UINT)1
#define SERVICE_ADDRESS_FLAG_RPC_DG (UINT)2
#define SERVICE_ADDRESS_FLAG_RPC_NB (UINT)4
#define NS_DEFAULT (UINT)0
#define NS_VNS (UINT)50
#define NSTYPE_HIERARCHICAL (UINT)1
#define NSTYPE_DYNAMIC (UINT)2
#define NSTYPE_ENUMERABLE (UINT)4
#define NSTYPE_WORKGROUP (UINT)8
#define XP_CONNECTIONLESS (UINT)1
#define XP_GUARANTEED_DELIVERY (UINT)2
#define XP_GUARANTEED_ORDER (UINT)4
#define XP_MESSAGE_ORIENTED (UINT)8
#define XP_PSEUDO_STREAM (UINT)16
#define XP_GRACEFUL_CLOSE (UINT)32
#define XP_EXPEDITED_DATA (UINT)64
#define XP_CONNECT_DATA (UINT)128
#define XP_DISCONNECT_DATA (UINT)256
#define XP_SUPPORTS_BROADCAST (UINT)512
#define XP_SUPPORTS_MULTICAST (UINT)1024
#define XP_BANDWIDTH_ALLOCATION (UINT)2048
#define XP_FRAGMENTATION (UINT)4096
#define XP_ENCRYPTS (UINT)8192
#define RES_SOFT_SEARCH (UINT)1
#define RES_FIND_MULTIPLE (UINT)2
#define RES_SERVICE (UINT)4
#define SET_SERVICE_PARTIAL_SUCCESS (UINT)1
#define FD_SETSIZE (UINT)64
#define IMPLINK_IP (UINT)155
#define IMPLINK_LOWEXPER (UINT)156
#define IMPLINK_HIGHEXPER (UINT)158
#define WSADESCRIPTION_LEN (UINT)256
#define WSASYS_STATUS_LEN (UINT)128
#define IP_DEFAULT_MULTICAST_TTL (UINT)1
#define IP_DEFAULT_MULTICAST_LOOP (UINT)1
#define IP_MAX_MEMBERSHIPS (UINT)20
#define SOCKET_ERROR (INT)-1
#define AF_IPX (SHORT)6
#define SOMAXCONN (UINT)5
#define MSG_PEEK (UINT)2
#define MSG_MAXIOVLEN (UINT)16
#define MSG_PARTIAL (UINT)32768
#define MAXGETHOSTSTRUCT (UINT)1024
#define FD_READ (UINT)1
#define FD_WRITE (UINT)2
#define FD_OOB (UINT)4
#define FD_ACCEPT (UINT)8
#define FD_CONNECT (UINT)16
#define FD_CLOSE (UINT)32
#define INCL_WINSOCK_API_PROTOTYPES (UINT)1
#define INCL_WINSOCK_API_TYPEDEFS (UINT)0
#define FROM_PROTOCOL_INFO (INT)-1
#define SO_PROTOCOL_INFOA (UINT)8196
#define SO_PROTOCOL_INFOW (UINT)8197
#define PVD_CONFIG (UINT)12289
#define MSG_WAITALL (UINT)8
#define MSG_PUSH_IMMEDIATE (UINT)32
#define MSG_INTERRUPT (UINT)16
#define FD_READ_BIT (UINT)0
#define FD_WRITE_BIT (UINT)1
#define FD_OOB_BIT (UINT)2
#define FD_ACCEPT_BIT (UINT)3
#define FD_CONNECT_BIT (UINT)4
#define FD_CLOSE_BIT (UINT)5
#define FD_QOS_BIT (UINT)6
#define FD_GROUP_QOS_BIT (UINT)7
#define FD_ROUTING_INTERFACE_CHANGE_BIT (UINT)8
#define FD_ADDRESS_LIST_CHANGE_BIT (UINT)9
#define FD_MAX_EVENTS (UINT)10
#define WSA_WAIT_FAILED (UINT)4294967295
#define WSA_INFINITE (UINT)4294967295
#define CF_ACCEPT (UINT)0
#define CF_REJECT (UINT)1
#define CF_DEFER (UINT)2
#define SD_RECEIVE (UINT)0
#define SD_SEND (UINT)1
#define SD_BOTH (UINT)2
#define SG_UNCONSTRAINED_GROUP (UINT)1
#define SG_CONSTRAINED_GROUP (UINT)2
#define MAX_PROTOCOL_CHAIN (UINT)7
#define BASE_PROTOCOL (UINT)1
#define LAYERED_PROTOCOL (UINT)0
#define WSAPROTOCOL_LEN (UINT)255
#define PFL_MULTIPLE_PROTO_ENTRIES (UINT)1
#define PFL_RECOMMENDED_PROTO_ENTRY (UINT)2
#define PFL_HIDDEN (UINT)4
#define PFL_MATCHES_PROTOCOL_ZERO (UINT)8
#define PFL_NETWORKDIRECT_PROVIDER (UINT)16
#define XP1_CONNECTIONLESS (UINT)1
#define XP1_GUARANTEED_DELIVERY (UINT)2
#define XP1_GUARANTEED_ORDER (UINT)4
#define XP1_MESSAGE_ORIENTED (UINT)8
#define XP1_PSEUDO_STREAM (UINT)16
#define XP1_GRACEFUL_CLOSE (UINT)32
#define XP1_EXPEDITED_DATA (UINT)64
#define XP1_CONNECT_DATA (UINT)128
#define XP1_DISCONNECT_DATA (UINT)256
#define XP1_SUPPORT_BROADCAST (UINT)512
#define XP1_SUPPORT_MULTIPOINT (UINT)1024
#define XP1_MULTIPOINT_CONTROL_PLANE (UINT)2048
#define XP1_MULTIPOINT_DATA_PLANE (UINT)4096
#define XP1_QOS_SUPPORTED (UINT)8192
#define XP1_INTERRUPT (UINT)16384
#define XP1_UNI_SEND (UINT)32768
#define XP1_UNI_RECV (UINT)65536
#define XP1_IFS_HANDLES (UINT)131072
#define XP1_PARTIAL_MESSAGE (UINT)262144
#define XP1_SAN_SUPPORT_SDP (UINT)524288
#define BIGENDIAN (UINT)0
#define LITTLEENDIAN (UINT)1
#define SECURITY_PROTOCOL_NONE (UINT)0
#define JL_SENDER_ONLY (UINT)1
#define JL_RECEIVER_ONLY (UINT)2
#define JL_BOTH (UINT)4
#define WSA_FLAG_OVERLAPPED (UINT)1
#define WSA_FLAG_MULTIPOINT_C_ROOT (UINT)2
#define WSA_FLAG_MULTIPOINT_C_LEAF (UINT)4
#define WSA_FLAG_MULTIPOINT_D_ROOT (UINT)8
#define WSA_FLAG_MULTIPOINT_D_LEAF (UINT)16
#define WSA_FLAG_ACCESS_SYSTEM_SECURITY (UINT)64
#define WSA_FLAG_NO_HANDLE_INHERIT (UINT)128
#define WSA_FLAG_REGISTERED_IO (UINT)256
#define TH_NETDEV (UINT)1
#define TH_TAPI (UINT)2
#define SERVICE_MULTIPLE (UINT)1
#define NS_LOCALNAME (UINT)19
#define RES_UNUSED_1 (UINT)1
#define RES_FLUSH_CACHE (UINT)2
#define LUP_DEEP (UINT)1
#define LUP_CONTAINERS (UINT)2
#define LUP_NOCONTAINERS (UINT)4
#define LUP_NEAREST (UINT)8
#define LUP_RETURN_NAME (UINT)16
#define LUP_RETURN_TYPE (UINT)32
#define LUP_RETURN_VERSION (UINT)64
#define LUP_RETURN_COMMENT (UINT)128
#define LUP_RETURN_ADDR (UINT)256
#define LUP_RETURN_BLOB (UINT)512
#define LUP_RETURN_ALIASES (UINT)1024
#define LUP_RETURN_QUERY_STRING (UINT)2048
#define LUP_RETURN_ALL (UINT)4080
#define LUP_RES_SERVICE (UINT)32768
#define LUP_FLUSHCACHE (UINT)4096
#define LUP_FLUSHPREVIOUS (UINT)8192
#define LUP_NON_AUTHORITATIVE (UINT)16384
#define LUP_SECURE (UINT)32768
#define LUP_RETURN_PREFERRED_NAMES (UINT)65536
#define LUP_DNS_ONLY (UINT)131072
#define LUP_ADDRCONFIG (UINT)1048576
#define LUP_DUAL_ADDR (UINT)2097152
#define LUP_FILESERVER (UINT)4194304
#define LUP_DISABLE_IDN_ENCODING (UINT)8388608
#define LUP_API_ANSI (UINT)16777216
#define LUP_RESOLUTION_HANDLE (UINT)2147483648
#define RESULT_IS_ALIAS (UINT)1
#define RESULT_IS_ADDED (UINT)16
#define RESULT_IS_CHANGED (UINT)32
#define RESULT_IS_DELETED (UINT)64
#define POLLRDNORM (UINT)256
#define POLLRDBAND (UINT)512
#define POLLPRI (UINT)1024
#define POLLWRNORM (UINT)16
#define POLLWRBAND (UINT)32
#define POLLERR (UINT)1
#define POLLHUP (UINT)2
#define POLLNVAL (UINT)4
#define ATMPROTO_AALUSER (UINT)0
#define ATMPROTO_AAL1 (UINT)1
#define ATMPROTO_AAL2 (UINT)2
#define ATMPROTO_AAL34 (UINT)3
#define ATMPROTO_AAL5 (UINT)5
#define SAP_FIELD_ABSENT (UINT)4294967294
#define SAP_FIELD_ANY (UINT)4294967295
#define SAP_FIELD_ANY_AESA_SEL (UINT)4294967290
#define SAP_FIELD_ANY_AESA_REST (UINT)4294967291
#define ATM_E164 (UINT)1
#define ATM_NSAP (UINT)2
#define ATM_AESA (UINT)2
#define ATM_ADDR_SIZE (UINT)20
#define BLLI_L2_ISO_1745 (UINT)1
#define BLLI_L2_Q921 (UINT)2
#define BLLI_L2_X25L (UINT)6
#define BLLI_L2_X25M (UINT)7
#define BLLI_L2_ELAPB (UINT)8
#define BLLI_L2_HDLC_ARM (UINT)9
#define BLLI_L2_HDLC_NRM (UINT)10
#define BLLI_L2_HDLC_ABM (UINT)11
#define BLLI_L2_LLC (UINT)12
#define BLLI_L2_X75 (UINT)13
#define BLLI_L2_Q922 (UINT)14
#define BLLI_L2_USER_SPECIFIED (UINT)16
#define BLLI_L2_ISO_7776 (UINT)17
#define BLLI_L3_X25 (UINT)6
#define BLLI_L3_ISO_8208 (UINT)7
#define BLLI_L3_X223 (UINT)8
#define BLLI_L3_SIO_8473 (UINT)9
#define BLLI_L3_T70 (UINT)10
#define BLLI_L3_ISO_TR9577 (UINT)11
#define BLLI_L3_USER_SPECIFIED (UINT)16
#define BLLI_L3_IPI_SNAP (UINT)128
#define BLLI_L3_IPI_IP (UINT)204
#define BHLI_ISO (UINT)0
#define BHLI_UserSpecific (UINT)1
#define BHLI_HighLayerProfile (UINT)2
#define BHLI_VendorSpecificAppId (UINT)3
#define AAL5_MODE_MESSAGE (UINT)1
#define AAL5_MODE_STREAMING (UINT)2
#define AAL5_SSCS_NULL (UINT)0
#define AAL5_SSCS_SSCOP_ASSURED (UINT)1
#define AAL5_SSCS_SSCOP_NON_ASSURED (UINT)2
#define AAL5_SSCS_FRAME_RELAY (UINT)4
#define BCOB_A (UINT)1
#define BCOB_C (UINT)3
#define BCOB_X (UINT)16
#define TT_NOIND (UINT)0
#define TT_CBR (UINT)4
#define TT_VBR (UINT)8
#define TR_NOIND (UINT)0
#define TR_END_TO_END (UINT)1
#define TR_NO_END_TO_END (UINT)2
#define CLIP_NOT (UINT)0
#define CLIP_SUS (UINT)32
#define UP_P2P (UINT)0
#define UP_P2MP (UINT)1
#define BLLI_L2_MODE_NORMAL (UINT)64
#define BLLI_L2_MODE_EXT (UINT)128
#define BLLI_L3_MODE_NORMAL (UINT)64
#define BLLI_L3_MODE_EXT (UINT)128
#define BLLI_L3_PACKET_16 (UINT)4
#define BLLI_L3_PACKET_32 (UINT)5
#define BLLI_L3_PACKET_64 (UINT)6
#define BLLI_L3_PACKET_128 (UINT)7
#define BLLI_L3_PACKET_256 (UINT)8
#define BLLI_L3_PACKET_512 (UINT)9
#define BLLI_L3_PACKET_1024 (UINT)10
#define BLLI_L3_PACKET_2048 (UINT)11
#define BLLI_L3_PACKET_4096 (UINT)12
#define PI_ALLOWED (UINT)0
#define PI_RESTRICTED (UINT)64
#define PI_NUMBER_NOT_AVAILABLE (UINT)128
#define SI_USER_NOT_SCREENED (UINT)0
#define SI_USER_PASSED (UINT)1
#define SI_USER_FAILED (UINT)2
#define SI_NETWORK (UINT)3
#define CAUSE_LOC_USER (UINT)0
#define CAUSE_LOC_PRIVATE_LOCAL (UINT)1
#define CAUSE_LOC_PUBLIC_LOCAL (UINT)2
#define CAUSE_LOC_TRANSIT_NETWORK (UINT)3
#define CAUSE_LOC_PUBLIC_REMOTE (UINT)4
#define CAUSE_LOC_PRIVATE_REMOTE (UINT)5
#define CAUSE_LOC_INTERNATIONAL_NETWORK (UINT)7
#define CAUSE_LOC_BEYOND_INTERWORKING (UINT)10
#define CAUSE_UNALLOCATED_NUMBER (UINT)1
#define CAUSE_NO_ROUTE_TO_TRANSIT_NETWORK (UINT)2
#define CAUSE_NO_ROUTE_TO_DESTINATION (UINT)3
#define CAUSE_VPI_VCI_UNACCEPTABLE (UINT)10
#define CAUSE_NORMAL_CALL_CLEARING (UINT)16
#define CAUSE_USER_BUSY (UINT)17
#define CAUSE_NO_USER_RESPONDING (UINT)18
#define CAUSE_CALL_REJECTED (UINT)21
#define CAUSE_NUMBER_CHANGED (UINT)22
#define CAUSE_USER_REJECTS_CLIR (UINT)23
#define CAUSE_DESTINATION_OUT_OF_ORDER (UINT)27
#define CAUSE_INVALID_NUMBER_FORMAT (UINT)28
#define CAUSE_STATUS_ENQUIRY_RESPONSE (UINT)30
#define CAUSE_NORMAL_UNSPECIFIED (UINT)31
#define CAUSE_VPI_VCI_UNAVAILABLE (UINT)35
#define CAUSE_NETWORK_OUT_OF_ORDER (UINT)38
#define CAUSE_TEMPORARY_FAILURE (UINT)41
#define CAUSE_ACCESS_INFORMAION_DISCARDED (UINT)43
#define CAUSE_NO_VPI_VCI_AVAILABLE (UINT)45
#define CAUSE_RESOURCE_UNAVAILABLE (UINT)47
#define CAUSE_QOS_UNAVAILABLE (UINT)49
#define CAUSE_USER_CELL_RATE_UNAVAILABLE (UINT)51
#define CAUSE_BEARER_CAPABILITY_UNAUTHORIZED (UINT)57
#define CAUSE_BEARER_CAPABILITY_UNAVAILABLE (UINT)58
#define CAUSE_OPTION_UNAVAILABLE (UINT)63
#define CAUSE_BEARER_CAPABILITY_UNIMPLEMENTED (UINT)65
#define CAUSE_UNSUPPORTED_TRAFFIC_PARAMETERS (UINT)73
#define CAUSE_INVALID_CALL_REFERENCE (UINT)81
#define CAUSE_CHANNEL_NONEXISTENT (UINT)82
#define CAUSE_INCOMPATIBLE_DESTINATION (UINT)88
#define CAUSE_INVALID_ENDPOINT_REFERENCE (UINT)89
#define CAUSE_INVALID_TRANSIT_NETWORK_SELECTION (UINT)91
#define CAUSE_TOO_MANY_PENDING_ADD_PARTY (UINT)92
#define CAUSE_AAL_PARAMETERS_UNSUPPORTED (UINT)93
#define CAUSE_MANDATORY_IE_MISSING (UINT)96
#define CAUSE_UNIMPLEMENTED_MESSAGE_TYPE (UINT)97
#define CAUSE_UNIMPLEMENTED_IE (UINT)99
#define CAUSE_INVALID_IE_CONTENTS (UINT)100
#define CAUSE_INVALID_STATE_FOR_MESSAGE (UINT)101
#define CAUSE_RECOVERY_ON_TIMEOUT (UINT)102
#define CAUSE_INCORRECT_MESSAGE_LENGTH (UINT)104
#define CAUSE_PROTOCOL_ERROR (UINT)111
#define CAUSE_COND_UNKNOWN (UINT)0
#define CAUSE_COND_PERMANENT (UINT)1
#define CAUSE_COND_TRANSIENT (UINT)2
#define CAUSE_REASON_USER (UINT)0
#define CAUSE_REASON_IE_MISSING (UINT)4
#define CAUSE_REASON_IE_INSUFFICIENT (UINT)8
#define CAUSE_PU_PROVIDER (UINT)0
#define CAUSE_PU_USER (UINT)8
#define CAUSE_NA_NORMAL (UINT)0
#define CAUSE_NA_ABNORMAL (UINT)4
#define QOS_CLASS0 (UINT)0
#define QOS_CLASS1 (UINT)1
#define QOS_CLASS2 (UINT)2
#define QOS_CLASS3 (UINT)3
#define QOS_CLASS4 (UINT)4
#define TNS_TYPE_NATIONAL (UINT)64
#define TNS_PLAN_CARRIER_ID_CODE (UINT)1
#define SIO_GET_NUMBER_OF_ATM_DEVICES (UINT)1343619073
#define SIO_GET_ATM_ADDRESS (UINT)3491102722
#define SIO_ASSOCIATE_PVC (UINT)2417360899
#define SIO_GET_ATM_CONNECTION_ID (UINT)1343619076
#define WSPDESCRIPTION_LEN (UINT)255
#define WSS_OPERATION_IN_PROGRESS (INT)259
#define LSP_SYSTEM (UINT)2147483648
#define LSP_INSPECTOR (UINT)1
#define LSP_REDIRECTOR (UINT)2
#define LSP_PROXY (UINT)4
#define LSP_FIREWALL (UINT)8
#define LSP_INBOUND_MODIFY (UINT)16
#define LSP_OUTBOUND_MODIFY (UINT)32
#define LSP_CRYPTO_COMPRESS (UINT)64
#define LSP_LOCAL_CACHE (UINT)128
#define UDP_NOCHECKSUM (UINT)1
#define UDP_CHECKSUM_COVERAGE (UINT)20
#define GAI_STRERROR_BUFFER_SIZE (UINT)1024
#define IPX_PTYPE (UINT)16384
#define IPX_FILTERPTYPE (UINT)16385
#define IPX_STOPFILTERPTYPE (UINT)16387
#define IPX_DSTYPE (UINT)16386
#define IPX_EXTENDED_ADDRESS (UINT)16388
#define IPX_RECVHDR (UINT)16389
#define IPX_MAXSIZE (UINT)16390
#define IPX_ADDRESS (UINT)16391
#define IPX_GETNETINFO (UINT)16392
#define IPX_GETNETINFO_NORIP (UINT)16393
#define IPX_SPXGETCONNECTIONSTATUS (UINT)16395
#define IPX_ADDRESS_NOTIFY (UINT)16396
#define IPX_MAX_ADAPTER_NUM (UINT)16397
#define IPX_RERIPNETNUMBER (UINT)16398
#define IPX_RECEIVE_BROADCAST (UINT)16399
#define IPX_IMMEDIATESPXACK (UINT)16400
#define IPPROTO_RM (UINT)113
#define MAX_MCAST_TTL (UINT)255
#define RM_OPTIONSBASE (UINT)1000
#define RM_RATE_WINDOW_SIZE (UINT)1001
#define RM_SET_MESSAGE_BOUNDARY (UINT)1002
#define RM_FLUSHCACHE (UINT)1003
#define RM_SENDER_WINDOW_ADVANCE_METHOD (UINT)1004
#define RM_SENDER_STATISTICS (UINT)1005
#define RM_LATEJOIN (UINT)1006
#define RM_SET_SEND_IF (UINT)1007
#define RM_ADD_RECEIVE_IF (UINT)1008
#define RM_DEL_RECEIVE_IF (UINT)1009
#define RM_SEND_WINDOW_ADV_RATE (UINT)1010
#define RM_USE_FEC (UINT)1011
#define RM_SET_MCAST_TTL (UINT)1012
#define RM_RECEIVER_STATISTICS (UINT)1013
#define RM_HIGH_SPEED_INTRANET_OPT (UINT)1014
#define SENDER_DEFAULT_RATE_KBITS_PER_SEC (UINT)56
#define SENDER_DEFAULT_WINDOW_ADV_PERCENTAGE (UINT)15
#define MAX_WINDOW_INCREMENT_PERCENTAGE (UINT)25
#define SENDER_DEFAULT_LATE_JOINER_PERCENTAGE (UINT)0
#define SENDER_MAX_LATE_JOINER_PERCENTAGE (UINT)75
#define BITS_PER_BYTE (UINT)8
#define LOG2_BITS_PER_BYTE (UINT)3
#define INVALID_SOCKET (SOCKET)(UINT)4294967295
#define LM_HB_Extension (INT)128
#define LM_HB1_PnP (INT)1
#define LM_HB1_PDA_Palmtop (INT)2
#define LM_HB1_Computer (INT)4
#define LM_HB1_Printer (INT)8
#define LM_HB1_Modem (INT)16
#define LM_HB1_Fax (INT)32
#define LM_HB1_LANAccess (INT)64
#define LM_HB2_Telephony (INT)1
#define LM_HB2_FileServer (INT)2

//--------------------------------------------------------------------------------
// Section: Types (326)
//--------------------------------------------------------------------------------
typedef enum {
    WSA_IO_PENDING = 997,
    WSA_IO_INCOMPLETE = 996,
    WSA_INVALID_HANDLE = 6,
    WSA_INVALID_PARAMETER = 87,
    WSA_NOT_ENOUGH_MEMORY = 8,
    WSA_OPERATION_ABORTED = 995,
    WSABASEERR = 10000,
    WSAEINTR = 10004,
    WSAEBADF = 10009,
    WSAEACCES = 10013,
    WSAEFAULT = 10014,
    WSAEINVAL = 10022,
    WSAEMFILE = 10024,
    WSAEWOULDBLOCK = 10035,
    WSAEINPROGRESS = 10036,
    WSAEALREADY = 10037,
    WSAENOTSOCK = 10038,
    WSAEDESTADDRREQ = 10039,
    WSAEMSGSIZE = 10040,
    WSAEPROTOTYPE = 10041,
    WSAENOPROTOOPT = 10042,
    WSAEPROTONOSUPPORT = 10043,
    WSAESOCKTNOSUPPORT = 10044,
    WSAEOPNOTSUPP = 10045,
    WSAEPFNOSUPPORT = 10046,
    WSAEAFNOSUPPORT = 10047,
    WSAEADDRINUSE = 10048,
    WSAEADDRNOTAVAIL = 10049,
    WSAENETDOWN = 10050,
    WSAENETUNREACH = 10051,
    WSAENETRESET = 10052,
    WSAECONNABORTED = 10053,
    WSAECONNRESET = 10054,
    WSAENOBUFS = 10055,
    WSAEISCONN = 10056,
    WSAENOTCONN = 10057,
    WSAESHUTDOWN = 10058,
    WSAETOOMANYREFS = 10059,
    WSAETIMEDOUT = 10060,
    WSAECONNREFUSED = 10061,
    WSAELOOP = 10062,
    WSAENAMETOOLONG = 10063,
    WSAEHOSTDOWN = 10064,
    WSAEHOSTUNREACH = 10065,
    WSAENOTEMPTY = 10066,
    WSAEPROCLIM = 10067,
    WSAEUSERS = 10068,
    WSAEDQUOT = 10069,
    WSAESTALE = 10070,
    WSAEREMOTE = 10071,
    WSASYSNOTREADY = 10091,
    WSAVERNOTSUPPORTED = 10092,
    WSANOTINITIALISED = 10093,
    WSAEDISCON = 10101,
    WSAENOMORE = 10102,
    WSAECANCELLED = 10103,
    WSAEINVALIDPROCTABLE = 10104,
    WSAEINVALIDPROVIDER = 10105,
    WSAEPROVIDERFAILEDINIT = 10106,
    WSASYSCALLFAILURE = 10107,
    WSASERVICE_NOT_FOUND = 10108,
    WSATYPE_NOT_FOUND = 10109,
    WSA_E_NO_MORE = 10110,
    WSA_E_CANCELLED = 10111,
    WSAEREFUSED = 10112,
    WSAHOST_NOT_FOUND = 11001,
    WSATRY_AGAIN = 11002,
    WSANO_RECOVERY = 11003,
    WSANO_DATA = 11004,
    WSA_QOS_RECEIVERS = 11005,
    WSA_QOS_SENDERS = 11006,
    WSA_QOS_NO_SENDERS = 11007,
    WSA_QOS_NO_RECEIVERS = 11008,
    WSA_QOS_REQUEST_CONFIRMED = 11009,
    WSA_QOS_ADMISSION_FAILURE = 11010,
    WSA_QOS_POLICY_FAILURE = 11011,
    WSA_QOS_BAD_STYLE = 11012,
    WSA_QOS_BAD_OBJECT = 11013,
    WSA_QOS_TRAFFIC_CTRL_ERROR = 11014,
    WSA_QOS_GENERIC_ERROR = 11015,
    WSA_QOS_ESERVICETYPE = 11016,
    WSA_QOS_EFLOWSPEC = 11017,
    WSA_QOS_EPROVSPECBUF = 11018,
    WSA_QOS_EFILTERSTYLE = 11019,
    WSA_QOS_EFILTERTYPE = 11020,
    WSA_QOS_EFILTERCOUNT = 11021,
    WSA_QOS_EOBJLENGTH = 11022,
    WSA_QOS_EFLOWCOUNT = 11023,
    WSA_QOS_EUNKOWNPSOBJ = 11024,
    WSA_QOS_EPOLICYOBJ = 11025,
    WSA_QOS_EFLOWDESC = 11026,
    WSA_QOS_EPSFLOWSPEC = 11027,
    WSA_QOS_EPSFILTERSPEC = 11028,
    WSA_QOS_ESDMODEOBJ = 11029,
    WSA_QOS_ESHAPERATEOBJ = 11030,
    WSA_QOS_RESERVED_PETYPE = 11031,
    WSA_SECURE_HOST_NOT_FOUND = 11032,
    WSA_IPSEC_NAME_POLICY_ERROR = 11033,
} WSA_ERROR;

typedef enum {
    SERVICE_REGISTER = 1,
    SERVICE_DEREGISTER = 2,
    SERVICE_FLUSH = 3,
    SERVICE_ADD_TYPE = 4,
    SERVICE_DELETE_TYPE = 5,
} SET_SERVICE_OPERATION;

typedef enum {
    MSG_DONTROUTE = 4,
    MSG_OOB = 1,
} SEND_FLAGS;

typedef enum {
    RESOURCEDISPLAYTYPE_DOMAIN = 1,
    RESOURCEDISPLAYTYPE_FILE = 4,
    RESOURCEDISPLAYTYPE_GENERIC = 0,
    RESOURCEDISPLAYTYPE_GROUP = 5,
    RESOURCEDISPLAYTYPE_SERVER = 2,
    RESOURCEDISPLAYTYPE_SHARE = 3,
    RESOURCEDISPLAYTYPE_TREE = 10,
} RESOURCE_DISPLAY_TYPE;

typedef int servent;

typedef int WSAData;

typedef int RIO_BUFFERID_t;

typedef int RIO_CQ_t;

typedef int RIO_RQ_t;

typedef int ATM_PVC_PARAMS;

typedef int HWSAEVENT;

typedef int SOCKET;

typedef int IN_ADDR;

typedef int SOCKADDR;

typedef int SOCKET_ADDRESS;

typedef int SOCKET_ADDRESS_LIST;

typedef int CSADDR_INFO;

typedef int SOCKADDR_STORAGE;

typedef int SOCKADDR_STORAGE_XP;

typedef int SOCKET_PROCESSOR_AFFINITY;

typedef enum {
    IPPROTO_HOPOPTS = 0,
    IPPROTO_ICMP = 1,
    IPPROTO_IGMP = 2,
    IPPROTO_GGP = 3,
    IPPROTO_IPV4 = 4,
    IPPROTO_ST = 5,
    IPPROTO_TCP = 6,
    IPPROTO_CBT = 7,
    IPPROTO_EGP = 8,
    IPPROTO_IGP = 9,
    IPPROTO_PUP = 12,
    IPPROTO_UDP = 17,
    IPPROTO_IDP = 22,
    IPPROTO_RDP = 27,
    IPPROTO_IPV6 = 41,
    IPPROTO_ROUTING = 43,
    IPPROTO_FRAGMENT = 44,
    IPPROTO_ESP = 50,
    IPPROTO_AH = 51,
    IPPROTO_ICMPV6 = 58,
    IPPROTO_NONE = 59,
    IPPROTO_DSTOPTS = 60,
    IPPROTO_ND = 77,
    IPPROTO_ICLFXBM = 78,
    IPPROTO_PIM = 103,
    IPPROTO_PGM = 113,
    IPPROTO_L2TP = 115,
    IPPROTO_SCTP = 132,
    IPPROTO_RAW = 255,
    IPPROTO_MAX = 256,
    IPPROTO_RESERVED_RAW = 257,
    IPPROTO_RESERVED_IPSEC = 258,
    IPPROTO_RESERVED_IPSECOFFLOAD = 259,
    IPPROTO_RESERVED_WNV = 260,
    IPPROTO_RESERVED_MAX = 261,
} IPPROTO;

typedef enum {
    ScopeLevelInterface = 1,
    ScopeLevelLink = 2,
    ScopeLevelSubnet = 3,
    ScopeLevelAdmin = 4,
    ScopeLevelSite = 5,
    ScopeLevelOrganization = 8,
    ScopeLevelGlobal = 14,
    ScopeLevelCount = 16,
} SCOPE_LEVEL;

typedef int SCOPE_ID;

typedef int SOCKADDR_IN;

typedef int SOCKADDR_DL;

typedef int WSABUF;

typedef int WSAMSG;

typedef int cmsghdr;

typedef int ADDRINFOA;

typedef int addrinfoW;

typedef int addrinfoexA;

typedef int addrinfoexW;

typedef int addrinfoex2A;

typedef int addrinfoex2W;

typedef int addrinfoex3;

typedef int addrinfoex4;

typedef int fd_set;

typedef int timeval;

typedef int hostent;

typedef int netent;

typedef int protoent;

typedef int sockproto;

typedef int linger;

typedef int WSANETWORKEVENTS;

typedef int WSAPROTOCOLCHAIN;

typedef int WSAPROTOCOL_INFOA;

typedef int WSAPROTOCOL_INFOW;

typedef int LPCONDITIONPROC;

typedef int LPWSAOVERLAPPED_COMPLETION_ROUTINE;

typedef enum {
    NSP_NOTIFY_IMMEDIATELY = 0,
    NSP_NOTIFY_HWND = 1,
    NSP_NOTIFY_EVENT = 2,
    NSP_NOTIFY_PORT = 3,
    NSP_NOTIFY_APC = 4,
} WSACOMPLETIONTYPE;

typedef int WSACOMPLETION;

typedef int AFPROTOCOLS;

typedef enum {
    COMP_EQUAL = 0,
    COMP_NOTLESS = 1,
} WSAECOMPARATOR;

typedef int WSAVERSION;

typedef int WSAQUERYSETA;

typedef int WSAQUERYSETW;

typedef int WSAQUERYSET2A;

typedef int WSAQUERYSET2W;

typedef enum {
    RNRSERVICE_REGISTER = 0,
    RNRSERVICE_DEREGISTER = 1,
    RNRSERVICE_DELETE = 2,
} WSAESETSERVICEOP;

typedef int WSANSCLASSINFOA;

typedef int WSANSCLASSINFOW;

typedef int WSASERVICECLASSINFOA;

typedef int WSASERVICECLASSINFOW;

typedef int WSANAMESPACE_INFOA;

typedef int WSANAMESPACE_INFOW;

typedef int WSANAMESPACE_INFOEXA;

typedef int WSANAMESPACE_INFOEXW;

typedef int WSAPOLLFD;

typedef int IN6_ADDR;

typedef int sockaddr_in6_old;

typedef int sockaddr_gen;

typedef int INTERFACE_INFO;

typedef int INTERFACE_INFO_EX;

typedef enum {
    IP_PMTUDISC_NOT_SET = 0,
    IP_PMTUDISC_DO = 1,
    IP_PMTUDISC_DONT = 2,
    IP_PMTUDISC_PROBE = 3,
    IP_PMTUDISC_MAX = 4,
} PMTUD_STATE;

typedef int SOCKADDR_IN6;

typedef int SOCKADDR_IN6_W2KSP1;

typedef int SOCKADDR_INET;

typedef int SOCKADDR_IN6_PAIR;

typedef enum {
    MCAST_INCLUDE = 0,
    MCAST_EXCLUDE = 1,
} MULTICAST_MODE_TYPE;

typedef int IP_MREQ;

typedef int IP_MREQ_SOURCE;

typedef int IP_MSFILTER;

typedef int IPV6_MREQ;

typedef int GROUP_REQ;

typedef int GROUP_SOURCE_REQ;

typedef int GROUP_FILTER;

typedef int IN_PKTINFO;

typedef int IN6_PKTINFO;

typedef int IN_PKTINFO_EX;

typedef int in6_pktinfo_ex;

typedef int IN_RECVERR;

typedef int ICMP_ERROR_INFO;

typedef enum {
    E_WINDOW_ADVANCE_BY_TIME = 1,
    E_WINDOW_USE_AS_DATA_CACHE = 2,
} eWINDOW_ADVANCE_METHOD;

typedef int RM_SEND_WINDOW;

typedef int RM_SENDER_STATS;

typedef int RM_RECEIVER_STATS;

typedef int RM_FEC_INFO;

typedef int IPX_ADDRESS_DATA;

typedef int IPX_NETNUM_DATA;

typedef int IPX_SPXCONNSTATUS_DATA;

typedef int LM_IRPARMS;

typedef int SOCKADDR_IRDA;

typedef int WINDOWS_IRDA_DEVICE_INFO;

typedef int WCE_IRDA_DEVICE_INFO;

typedef int WINDOWS_DEVICELIST;

typedef int WCE_DEVICELIST;

typedef int WINDOWS_IAS_SET;

typedef int WINDOWS_IAS_QUERY;

typedef enum {
    IpPrefixOriginOther = 0,
    IpPrefixOriginManual = 1,
    IpPrefixOriginWellKnown = 2,
    IpPrefixOriginDhcp = 3,
    IpPrefixOriginRouterAdvertisement = 4,
    IpPrefixOriginUnchanged = 16,
} NL_PREFIX_ORIGIN;

typedef enum {
    NlsoOther = 0,
    NlsoManual = 1,
    NlsoWellKnown = 2,
    NlsoDhcp = 3,
    NlsoLinkLayerAddress = 4,
    NlsoRandom = 5,
    IpSuffixOriginOther = 0,
    IpSuffixOriginManual = 1,
    IpSuffixOriginWellKnown = 2,
    IpSuffixOriginDhcp = 3,
    IpSuffixOriginLinkLayerAddress = 4,
    IpSuffixOriginRandom = 5,
    IpSuffixOriginUnchanged = 16,
} NL_SUFFIX_ORIGIN;

typedef enum {
    NldsInvalid = 0,
    NldsTentative = 1,
    NldsDuplicate = 2,
    NldsDeprecated = 3,
    NldsPreferred = 4,
    IpDadStateInvalid = 0,
    IpDadStateTentative = 1,
    IpDadStateDuplicate = 2,
    IpDadStateDeprecated = 3,
    IpDadStatePreferred = 4,
} NL_DAD_STATE;

typedef enum {
    RouteProtocolOther = 1,
    RouteProtocolLocal = 2,
    RouteProtocolNetMgmt = 3,
    RouteProtocolIcmp = 4,
    RouteProtocolEgp = 5,
    RouteProtocolGgp = 6,
    RouteProtocolHello = 7,
    RouteProtocolRip = 8,
    RouteProtocolIsIs = 9,
    RouteProtocolEsIs = 10,
    RouteProtocolCisco = 11,
    RouteProtocolBbn = 12,
    RouteProtocolOspf = 13,
    RouteProtocolBgp = 14,
    RouteProtocolIdpr = 15,
    RouteProtocolEigrp = 16,
    RouteProtocolDvmrp = 17,
    RouteProtocolRpl = 18,
    RouteProtocolDhcp = 19,
    MIB_IPPROTO_OTHER = 1,
    PROTO_IP_OTHER = 1,
    MIB_IPPROTO_LOCAL = 2,
    PROTO_IP_LOCAL = 2,
    MIB_IPPROTO_NETMGMT = 3,
    PROTO_IP_NETMGMT = 3,
    MIB_IPPROTO_ICMP = 4,
    PROTO_IP_ICMP = 4,
    MIB_IPPROTO_EGP = 5,
    PROTO_IP_EGP = 5,
    MIB_IPPROTO_GGP = 6,
    PROTO_IP_GGP = 6,
    MIB_IPPROTO_HELLO = 7,
    PROTO_IP_HELLO = 7,
    MIB_IPPROTO_RIP = 8,
    PROTO_IP_RIP = 8,
    MIB_IPPROTO_IS_IS = 9,
    PROTO_IP_IS_IS = 9,
    MIB_IPPROTO_ES_IS = 10,
    PROTO_IP_ES_IS = 10,
    MIB_IPPROTO_CISCO = 11,
    PROTO_IP_CISCO = 11,
    MIB_IPPROTO_BBN = 12,
    PROTO_IP_BBN = 12,
    MIB_IPPROTO_OSPF = 13,
    PROTO_IP_OSPF = 13,
    MIB_IPPROTO_BGP = 14,
    PROTO_IP_BGP = 14,
    MIB_IPPROTO_IDPR = 15,
    PROTO_IP_IDPR = 15,
    MIB_IPPROTO_EIGRP = 16,
    PROTO_IP_EIGRP = 16,
    MIB_IPPROTO_DVMRP = 17,
    PROTO_IP_DVMRP = 17,
    MIB_IPPROTO_RPL = 18,
    PROTO_IP_RPL = 18,
    MIB_IPPROTO_DHCP = 19,
    PROTO_IP_DHCP = 19,
    MIB_IPPROTO_NT_AUTOSTATIC = 10002,
    PROTO_IP_NT_AUTOSTATIC = 10002,
    MIB_IPPROTO_NT_STATIC = 10006,
    PROTO_IP_NT_STATIC = 10006,
    MIB_IPPROTO_NT_STATIC_NON_DOD = 10007,
    PROTO_IP_NT_STATIC_NON_DOD = 10007,
} NL_ROUTE_PROTOCOL;

typedef enum {
    NlatUnspecified = 0,
    NlatUnicast = 1,
    NlatAnycast = 2,
    NlatMulticast = 3,
    NlatBroadcast = 4,
    NlatInvalid = 5,
} NL_ADDRESS_TYPE;

typedef enum {
    NlroManual = 0,
    NlroWellKnown = 1,
    NlroDHCP = 2,
    NlroRouterAdvertisement = 3,
    Nlro6to4 = 4,
} NL_ROUTE_ORIGIN;

typedef enum {
    NlnsUnreachable = 0,
    NlnsIncomplete = 1,
    NlnsProbe = 2,
    NlnsDelay = 3,
    NlnsStale = 4,
    NlnsReachable = 5,
    NlnsPermanent = 6,
    NlnsMaximum = 7,
} NL_NEIGHBOR_STATE;

typedef enum {
    LinkLocalAlwaysOff = 0,
    LinkLocalDelayed = 1,
    LinkLocalAlwaysOn = 2,
    LinkLocalUnchanged = -1,
} NL_LINK_LOCAL_ADDRESS_BEHAVIOR;

typedef int NL_INTERFACE_OFFLOAD_ROD;

typedef enum {
    RouterDiscoveryDisabled = 0,
    RouterDiscoveryEnabled = 1,
    RouterDiscoveryDhcp = 2,
    RouterDiscoveryUnchanged = -1,
} NL_ROUTER_DISCOVERY_BEHAVIOR;

typedef enum {
    NlbwDisabled = 0,
    NlbwEnabled = 1,
    NlbwUnchanged = -1,
} NL_BANDWIDTH_FLAG;

typedef int NL_PATH_BANDWIDTH_ROD;

typedef enum {
    NetworkCategoryPublic = 0,
    NetworkCategoryPrivate = 1,
    NetworkCategoryDomainAuthenticated = 2,
    NetworkCategoryUnchanged = -1,
    NetworkCategoryUnknown = -1,
} NL_NETWORK_CATEGORY;

typedef enum {
    NlincCategoryUnknown = 0,
    NlincPublic = 1,
    NlincPrivate = 2,
    NlincDomainAuthenticated = 3,
    NlincCategoryStateMax = 4,
} NL_INTERFACE_NETWORK_CATEGORY_STATE;

typedef enum {
    NetworkConnectivityLevelHintUnknown = 0,
    NetworkConnectivityLevelHintNone = 1,
    NetworkConnectivityLevelHintLocalAccess = 2,
    NetworkConnectivityLevelHintInternetAccess = 3,
    NetworkConnectivityLevelHintConstrainedInternetAccess = 4,
    NetworkConnectivityLevelHintHidden = 5,
} NL_NETWORK_CONNECTIVITY_LEVEL_HINT;

typedef enum {
    NetworkConnectivityCostHintUnknown = 0,
    NetworkConnectivityCostHintUnrestricted = 1,
    NetworkConnectivityCostHintFixed = 2,
    NetworkConnectivityCostHintVariable = 3,
} NL_NETWORK_CONNECTIVITY_COST_HINT;

typedef int NL_NETWORK_CONNECTIVITY_HINT;

typedef int NL_BANDWIDTH_INFORMATION;

typedef enum {
    TCPSTATE_CLOSED = 0,
    TCPSTATE_LISTEN = 1,
    TCPSTATE_SYN_SENT = 2,
    TCPSTATE_SYN_RCVD = 3,
    TCPSTATE_ESTABLISHED = 4,
    TCPSTATE_FIN_WAIT_1 = 5,
    TCPSTATE_FIN_WAIT_2 = 6,
    TCPSTATE_CLOSE_WAIT = 7,
    TCPSTATE_CLOSING = 8,
    TCPSTATE_LAST_ACK = 9,
    TCPSTATE_TIME_WAIT = 10,
    TCPSTATE_MAX = 11,
} TCPSTATE;

typedef int TRANSPORT_SETTING_ID;

typedef int tcp_keepalive;

typedef enum {
    CONTROL_CHANNEL_TRIGGER_STATUS_INVALID = 0,
    CONTROL_CHANNEL_TRIGGER_STATUS_SOFTWARE_SLOT_ALLOCATED = 1,
    CONTROL_CHANNEL_TRIGGER_STATUS_HARDWARE_SLOT_ALLOCATED = 2,
    CONTROL_CHANNEL_TRIGGER_STATUS_POLICY_ERROR = 3,
    CONTROL_CHANNEL_TRIGGER_STATUS_SYSTEM_ERROR = 4,
    CONTROL_CHANNEL_TRIGGER_STATUS_TRANSPORT_DISCONNECTED = 5,
    CONTROL_CHANNEL_TRIGGER_STATUS_SERVICE_UNAVAILABLE = 6,
} CONTROL_CHANNEL_TRIGGER_STATUS;

typedef int REAL_TIME_NOTIFICATION_SETTING_INPUT;

typedef int REAL_TIME_NOTIFICATION_SETTING_INPUT_EX;

typedef int REAL_TIME_NOTIFICATION_SETTING_OUTPUT;

typedef int ASSOCIATE_NAMERES_CONTEXT_INPUT;

typedef enum {
    RCVALL_OFF = 0,
    RCVALL_ON = 1,
    RCVALL_SOCKETLEVELONLY = 2,
    RCVALL_IPLEVEL = 3,
} RCVALL_VALUE;

typedef int RCVALL_IF;

typedef int TCP_INITIAL_RTO_PARAMETERS;

typedef enum {
    TCP_ICW_LEVEL_DEFAULT = 0,
    TCP_ICW_LEVEL_HIGH = 1,
    TCP_ICW_LEVEL_VERY_HIGH = 2,
    TCP_ICW_LEVEL_AGGRESSIVE = 3,
    TCP_ICW_LEVEL_EXPERIMENTAL = 4,
    TCP_ICW_LEVEL_COMPAT = 254,
    TCP_ICW_LEVEL_MAX = 255,
} TCP_ICW_LEVEL;

typedef int TCP_ICW_PARAMETERS;

typedef int TCP_ACK_FREQUENCY_PARAMETERS;

typedef int TCP_INFO_v0;

typedef int TCP_INFO_v1;

typedef int INET_PORT_RANGE;

typedef int INET_PORT_RESERVATION_TOKEN;

typedef int INET_PORT_RESERVATION_INSTANCE;

typedef int INET_PORT_RESERVATION_INFORMATION;

typedef enum {
    SYSTEM_CRITICAL_SOCKET = 1,
} SOCKET_USAGE_TYPE;

typedef enum {
    SOCKET_SECURITY_PROTOCOL_DEFAULT = 0,
    SOCKET_SECURITY_PROTOCOL_IPSEC = 1,
    SOCKET_SECURITY_PROTOCOL_IPSEC2 = 2,
    SOCKET_SECURITY_PROTOCOL_INVALID = 3,
} SOCKET_SECURITY_PROTOCOL;

typedef int SOCKET_SECURITY_SETTINGS;

typedef int SOCKET_SECURITY_SETTINGS_IPSEC;

typedef int SOCKET_PEER_TARGET_NAME;

typedef int SOCKET_SECURITY_QUERY_TEMPLATE;

typedef int SOCKET_SECURITY_QUERY_TEMPLATE_IPSEC2;

typedef int SOCKET_SECURITY_QUERY_INFO;

typedef int SOCKET_SECURITY_QUERY_INFO_IPSEC2;

typedef int RSS_SCALABILITY_INFO;

typedef enum {
    WsaBehaviorAll = 0,
    WsaBehaviorReceiveBuffering = 1,
    WsaBehaviorAutoTuning = 2,
} WSA_COMPATIBILITY_BEHAVIOR_ID;

typedef int WSA_COMPATIBILITY_MODE;

typedef int RIORESULT;

typedef int RIO_BUF;

typedef int RIO_CMSG_BUFFER;

typedef int ATM_ADDRESS;

typedef int ATM_BLLI;

typedef int ATM_BHLI;

typedef int sockaddr_atm;

typedef enum {
    IE_AALParameters = 0,
    IE_TrafficDescriptor = 1,
    IE_BroadbandBearerCapability = 2,
    IE_BHLI = 3,
    IE_BLLI = 4,
    IE_CalledPartyNumber = 5,
    IE_CalledPartySubaddress = 6,
    IE_CallingPartyNumber = 7,
    IE_CallingPartySubaddress = 8,
    IE_Cause = 9,
    IE_QOSClass = 10,
    IE_TransitNetworkSelection = 11,
} Q2931_IE_TYPE;

typedef int Q2931_IE;

typedef enum {
    AALTYPE_5 = 5,
    AALTYPE_USER = 16,
} AAL_TYPE;

typedef int AAL5_PARAMETERS;

typedef int AALUSER_PARAMETERS;

typedef int AAL_PARAMETERS_IE;

typedef int ATM_TD;

typedef int ATM_TRAFFIC_DESCRIPTOR_IE;

typedef int ATM_BROADBAND_BEARER_CAPABILITY_IE;

typedef int ATM_BLLI_IE;

typedef int ATM_CALLING_PARTY_NUMBER_IE;

typedef int ATM_CAUSE_IE;

typedef int ATM_QOS_CLASS_IE;

typedef int ATM_TRANSIT_NETWORK_SELECTION_IE;

typedef int ATM_CONNECTION_ID;

typedef enum {
    ProviderType_Application = 1,
    ProviderType_Service = 2,
} NAPI_PROVIDER_TYPE;

typedef enum {
    ProviderLevel_None = 0,
    ProviderLevel_Secondary = 1,
    ProviderLevel_Primary = 2,
} NAPI_PROVIDER_LEVEL;

typedef int NAPI_DOMAIN_DESCRIPTION_BLOB;

typedef int NAPI_PROVIDER_INSTALLATION_BLOB;

typedef int TRANSMIT_FILE_BUFFERS;

typedef int LPFN_TRANSMITFILE;

typedef int LPFN_ACCEPTEX;

typedef int LPFN_GETACCEPTEXSOCKADDRS;

typedef int TRANSMIT_PACKETS_ELEMENT;

typedef int LPFN_TRANSMITPACKETS;

typedef int LPFN_CONNECTEX;

typedef int LPFN_DISCONNECTEX;

typedef enum {
    NLA_RAW_DATA = 0,
    NLA_INTERFACE = 1,
    NLA_802_1X_LOCATION = 2,
    NLA_CONNECTIVITY = 3,
    NLA_ICS = 4,
} NLA_BLOB_DATA_TYPE;

typedef enum {
    NLA_NETWORK_AD_HOC = 0,
    NLA_NETWORK_MANAGED = 1,
    NLA_NETWORK_UNMANAGED = 2,
    NLA_NETWORK_UNKNOWN = 3,
} NLA_CONNECTIVITY_TYPE;

typedef enum {
    NLA_INTERNET_UNKNOWN = 0,
    NLA_INTERNET_NO = 1,
    NLA_INTERNET_YES = 2,
} NLA_INTERNET;

typedef int NLA_BLOB;

typedef int LPFN_WSARECVMSG;

typedef int WSAPOLLDATA;

typedef int WSASENDMSG;

typedef int LPFN_WSASENDMSG;

typedef int LPFN_WSAPOLL;

typedef int LPFN_RIORECEIVE;

typedef int LPFN_RIORECEIVEEX;

typedef int LPFN_RIOSEND;

typedef int LPFN_RIOSENDEX;

typedef int LPFN_RIOCLOSECOMPLETIONQUEUE;

typedef enum {
    RIO_EVENT_COMPLETION = 1,
    RIO_IOCP_COMPLETION = 2,
} RIO_NOTIFICATION_COMPLETION_TYPE;

typedef int RIO_NOTIFICATION_COMPLETION;

typedef int LPFN_RIOCREATECOMPLETIONQUEUE;

typedef int LPFN_RIOCREATEREQUESTQUEUE;

typedef int LPFN_RIODEQUEUECOMPLETION;

typedef int LPFN_RIODEREGISTERBUFFER;

typedef int LPFN_RIONOTIFY;

typedef int LPFN_RIOREGISTERBUFFER;

typedef int LPFN_RIORESIZECOMPLETIONQUEUE;

typedef int LPFN_RIORESIZEREQUESTQUEUE;

typedef int RIO_EXTENSION_FUNCTION_TABLE;

typedef int WSPData;

typedef int WSATHREADID;

typedef int LPBLOCKINGCALLBACK;

typedef int LPWSAUSERAPC;

typedef int LPWSPACCEPT;

typedef int LPWSPADDRESSTOSTRING;

typedef int LPWSPASYNCSELECT;

typedef int LPWSPBIND;

typedef int LPWSPCANCELBLOCKINGCALL;

typedef int LPWSPCLEANUP;

typedef int LPWSPCLOSESOCKET;

typedef int LPWSPCONNECT;

typedef int LPWSPDUPLICATESOCKET;

typedef int LPWSPENUMNETWORKEVENTS;

typedef int LPWSPEVENTSELECT;

typedef int LPWSPGETOVERLAPPEDRESULT;

typedef int LPWSPGETPEERNAME;

typedef int LPWSPGETSOCKNAME;

typedef int LPWSPGETSOCKOPT;

typedef int LPWSPGETQOSBYNAME;

typedef int LPWSPIOCTL;

typedef int LPWSPJOINLEAF;

typedef int LPWSPLISTEN;

typedef int LPWSPRECV;

typedef int LPWSPRECVDISCONNECT;

typedef int LPWSPRECVFROM;

typedef int LPWSPSELECT;

typedef int LPWSPSEND;

typedef int LPWSPSENDDISCONNECT;

typedef int LPWSPSENDTO;

typedef int LPWSPSETSOCKOPT;

typedef int LPWSPSHUTDOWN;

typedef int LPWSPSOCKET;

typedef int LPWSPSTRINGTOADDRESS;

typedef int WSPPROC_TABLE;

typedef int LPWPUCLOSEEVENT;

typedef int LPWPUCLOSESOCKETHANDLE;

typedef int LPWPUCREATEEVENT;

typedef int LPWPUCREATESOCKETHANDLE;

typedef int LPWPUFDISSET;

typedef int LPWPUGETPROVIDERPATH;

typedef int LPWPUMODIFYIFSHANDLE;

typedef int LPWPUPOSTMESSAGE;

typedef int LPWPUQUERYBLOCKINGCALLBACK;

typedef int LPWPUQUERYSOCKETHANDLECONTEXT;

typedef int LPWPUQUEUEAPC;

typedef int LPWPURESETEVENT;

typedef int LPWPUSETEVENT;

typedef int LPWPUOPENCURRENTTHREAD;

typedef int LPWPUCLOSETHREAD;

typedef int LPWPUCOMPLETEOVERLAPPEDREQUEST;

typedef int WSPUPCALLTABLE;

typedef int LPWSPSTARTUP;

typedef int LPWSCENUMPROTOCOLS;

typedef int LPWSCDEINSTALLPROVIDER;

typedef int LPWSCINSTALLPROVIDER;

typedef int LPWSCGETPROVIDERPATH;

typedef int LPWSCUPDATEPROVIDER;

typedef enum {
    ProviderInfoLspCategories = 0,
    ProviderInfoAudit = 1,
} WSC_PROVIDER_INFO_TYPE;

typedef int WSC_PROVIDER_AUDIT_INFO;

typedef int LPWSCINSTALLNAMESPACE;

typedef int LPWSCUNINSTALLNAMESPACE;

typedef int LPWSCENABLENSPROVIDER;

typedef int LPNSPCLEANUP;

typedef int LPNSPLOOKUPSERVICEBEGIN;

typedef int LPNSPLOOKUPSERVICENEXT;

typedef int LPNSPIOCTL;

typedef int LPNSPLOOKUPSERVICEEND;

typedef int LPNSPSETSERVICE;

typedef int LPNSPINSTALLSERVICECLASS;

typedef int LPNSPREMOVESERVICECLASS;

typedef int LPNSPGETSERVICECLASSINFO;

typedef int NSP_ROUTINE;

typedef int LPNSPSTARTUP;

typedef int LPNSPV2STARTUP;

typedef int LPNSPV2CLEANUP;

typedef int LPNSPV2LOOKUPSERVICEBEGIN;

typedef int LPNSPV2LOOKUPSERVICENEXTEX;

typedef int LPNSPV2LOOKUPSERVICEEND;

typedef int LPNSPV2SETSERVICEEX;

typedef int LPNSPV2CLIENTSESSIONRUNDOWN;

typedef int NSPV2_ROUTINE;

typedef int NS_INFOA;

typedef int NS_INFOW;

typedef int SERVICE_TYPE_VALUE;

typedef int SERVICE_TYPE_VALUE_ABSA;

typedef int SERVICE_TYPE_VALUE_ABSW;

typedef int SERVICE_TYPE_INFO;

typedef int SERVICE_TYPE_INFO_ABSA;

typedef int SERVICE_TYPE_INFO_ABSW;

typedef int SERVICE_ADDRESS;

typedef int SERVICE_ADDRESSES;

typedef int SERVICE_INFOA;

typedef int SERVICE_INFOW;

typedef int NS_SERVICE_INFOA;

typedef int NS_SERVICE_INFOW;

typedef int PROTOCOL_INFOA;

typedef int PROTOCOL_INFOW;

typedef int NETRESOURCE2A;

typedef int NETRESOURCE2W;

typedef int LPFN_NSPAPI;

typedef int LPSERVICE_CALLBACK_PROC;

typedef int SERVICE_ASYNC_INFO;

typedef int LPLOOKUPSERVICE_COMPLETION_ROUTINE;

typedef int LPWSCWRITEPROVIDERORDER;

typedef int LPWSCWRITENAMESPACEORDER;

typedef int servent;

typedef int WSAData;

typedef int ATM_PVC_PARAMS;


//--------------------------------------------------------------------------------
// Section: Functions (202)
//--------------------------------------------------------------------------------
#if  defined(X64) || defined(Arm64)
// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void WSCEnumProtocols32();
#endif

#if  defined(X64) || defined(Arm64)
// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void WSCDeinstallProvider32();
#endif

#if  defined(X64) || defined(Arm64)
// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void WSCInstallProvider64_32();
#endif

#if  defined(X64) || defined(Arm64)
// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void WSCGetProviderPath32();
#endif

#if  defined(X64) || defined(Arm64)
// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void WSCUpdateProvider32();
#endif

#if  defined(X64) || defined(Arm64)
// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void WSCSetProviderInfo32();
#endif

#if  defined(X64) || defined(Arm64)
// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void WSCGetProviderInfo32();
#endif

#if  defined(X64) || defined(Arm64)
// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void WSCEnumNameSpaceProviders32();
#endif

#if  defined(X64) || defined(Arm64)
// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void WSCEnumNameSpaceProvidersEx32();
#endif

#if  defined(X64) || defined(Arm64)
// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void WSCInstallNameSpace32();
#endif

#if  defined(X64) || defined(Arm64)
// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void WSCInstallNameSpaceEx32();
#endif

#if  defined(X64) || defined(Arm64)
// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void WSCUnInstallNameSpace32();
#endif

#if  defined(X64) || defined(Arm64)
// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void WSCEnableNSProvider32();
#endif

#if  defined(X64) || defined(Arm64)
// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void WSCInstallProviderAndChains64_32();
#endif

#if  defined(X64) || defined(Arm64)
// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void WSCWriteProviderOrder32();
#endif

#if  defined(X64) || defined(Arm64)
// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void WSCWriteNameSpaceOrder32();
#endif

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void __WSAFDIsSet();

// TODO: this type is limited to platform 'windows8.1'
/*SOCKET*/void accept();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void bind();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void closesocket();

// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void connect();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void ioctlsocket();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void getpeername();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void getsockname();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void getsockopt();

// TODO: this type is limited to platform 'windows8.1'
/*u32*/void htonl();

// TODO: this type is limited to platform 'windows8.1'
/*u16*/void htons();

// TODO: this type is limited to platform 'windows8.1'
/*u32*/void inet_addr();

// TODO: this type is limited to platform 'windows8.1'
/*PSTR*/void inet_ntoa();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void listen();

// TODO: this type is limited to platform 'windows8.1'
/*u32*/void ntohl();

// TODO: this type is limited to platform 'windows8.1'
/*u16*/void ntohs();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void recv();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void recvfrom();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void select();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void send();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void sendto();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void setsockopt();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void shutdown();

// TODO: this type is limited to platform 'windows8.1'
/*SOCKET*/void socket();

// TODO: this type is limited to platform 'windows8.1'
/*?*hostent*/void gethostbyaddr();

// TODO: this type is limited to platform 'windows8.1'
/*?*hostent*/void gethostbyname();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void gethostname();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void GetHostNameW();

// TODO: this type is limited to platform 'windows8.1'
/*?*servent*/void getservbyport();

// TODO: this type is limited to platform 'windows8.1'
/*?*servent*/void getservbyname();

// TODO: this type is limited to platform 'windows8.1'
/*?*protoent*/void getprotobynumber();

// TODO: this type is limited to platform 'windows8.1'
/*?*protoent*/void getprotobyname();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSAStartup();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSACleanup();

// TODO: this type is limited to platform 'windows8.1'
/*void*/void WSASetLastError();

// TODO: this type is limited to platform 'windows8.1'
/*WSA_ERROR*/void WSAGetLastError();

/*BOOL*/void WSAIsBlocking();

/*i32*/void WSAUnhookBlockingHook();

/*FARPROC*/void WSASetBlockingHook();

/*i32*/void WSACancelBlockingCall();

// TODO: this type is limited to platform 'windows5.0'
/*HANDLE*/void WSAAsyncGetServByName();

// TODO: this type is limited to platform 'windows5.0'
/*HANDLE*/void WSAAsyncGetServByPort();

// TODO: this type is limited to platform 'windows5.0'
/*HANDLE*/void WSAAsyncGetProtoByName();

// TODO: this type is limited to platform 'windows5.0'
/*HANDLE*/void WSAAsyncGetProtoByNumber();

// TODO: this type is limited to platform 'windows5.0'
/*HANDLE*/void WSAAsyncGetHostByName();

// TODO: this type is limited to platform 'windows5.0'
/*HANDLE*/void WSAAsyncGetHostByAddr();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void WSACancelAsyncRequest();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void WSAAsyncSelect();

// TODO: this type is limited to platform 'windows8.1'
/*SOCKET*/void WSAAccept();

// TODO: this type is limited to platform 'windows8.1'
/*BOOL*/void WSACloseEvent();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSAConnect();

// TODO: this type is limited to platform 'windows8.1'
/*BOOL*/void WSAConnectByNameW();

// TODO: this type is limited to platform 'windows8.1'
/*BOOL*/void WSAConnectByNameA();

// TODO: this type is limited to platform 'windows8.1'
/*BOOL*/void WSAConnectByList();

// TODO: this type is limited to platform 'windows8.1'
/*HANDLE*/void WSACreateEvent();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSADuplicateSocketA();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSADuplicateSocketW();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSAEnumNetworkEvents();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSAEnumProtocolsA();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSAEnumProtocolsW();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSAEventSelect();

// TODO: this type is limited to platform 'windows8.1'
/*BOOL*/void WSAGetOverlappedResult();

// TODO: this type is limited to platform 'windows5.0'
/*BOOL*/void WSAGetQOSByName();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSAHtonl();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSAHtons();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSAIoctl();

// TODO: this type is limited to platform 'windows8.1'
/*SOCKET*/void WSAJoinLeaf();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSANtohl();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSANtohs();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSARecv();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void WSARecvDisconnect();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSARecvFrom();

// TODO: this type is limited to platform 'windows8.1'
/*BOOL*/void WSAResetEvent();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSASend();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSASendMsg();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void WSASendDisconnect();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSASendTo();

// TODO: this type is limited to platform 'windows8.1'
/*BOOL*/void WSASetEvent();

// TODO: this type is limited to platform 'windows8.1'
/*SOCKET*/void WSASocketA();

// TODO: this type is limited to platform 'windows8.1'
/*SOCKET*/void WSASocketW();

// TODO: this type is limited to platform 'windows8.1'
/*u32*/void WSAWaitForMultipleEvents();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSAAddressToStringA();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSAAddressToStringW();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSAStringToAddressA();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSAStringToAddressW();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSALookupServiceBeginA();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSALookupServiceBeginW();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSALookupServiceNextA();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSALookupServiceNextW();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSANSPIoctl();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSALookupServiceEnd();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void WSAInstallServiceClassA();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void WSAInstallServiceClassW();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void WSARemoveServiceClass();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void WSAGetServiceClassInfoA();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void WSAGetServiceClassInfoW();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSAEnumNameSpaceProvidersA();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSAEnumNameSpaceProvidersW();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSAEnumNameSpaceProvidersExA();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSAEnumNameSpaceProvidersExW();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void WSAGetServiceClassNameByClassIdA();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void WSAGetServiceClassNameByClassIdW();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSASetServiceA();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSASetServiceW();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSAProviderConfigChange();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void WSAPoll();

// TODO: this type is limited to platform 'windows6.0.6000'
/*PSTR*/void RtlIpv4AddressToStringA();

/*i32*/void RtlIpv4AddressToStringExA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*PWSTR*/void RtlIpv4AddressToStringW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void RtlIpv4AddressToStringExW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void RtlIpv4StringToAddressA();

/*i32*/void RtlIpv4StringToAddressExA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void RtlIpv4StringToAddressW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void RtlIpv4StringToAddressExW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*PSTR*/void RtlIpv6AddressToStringA();

/*i32*/void RtlIpv6AddressToStringExA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*PWSTR*/void RtlIpv6AddressToStringW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void RtlIpv6AddressToStringExW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void RtlIpv6StringToAddressA();

/*i32*/void RtlIpv6StringToAddressExA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void RtlIpv6StringToAddressW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void RtlIpv6StringToAddressExW();

// TODO: this type is limited to platform 'windows6.1'
/*PSTR*/void RtlEthernetAddressToStringA();

// TODO: this type is limited to platform 'windows6.1'
/*PWSTR*/void RtlEthernetAddressToStringW();

// TODO: this type is limited to platform 'windows6.1'
/*i32*/void RtlEthernetStringToAddressA();

// TODO: this type is limited to platform 'windows6.1'
/*i32*/void RtlEthernetStringToAddressW();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void WSARecvEx();

// TODO: this type is limited to platform 'windows8.1'
/*BOOL*/void TransmitFile();

// TODO: this type is limited to platform 'windows8.1'
/*BOOL*/void AcceptEx();

// TODO: this type is limited to platform 'windows8.1'
/*void*/void GetAcceptExSockaddrs();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void WSCEnumProtocols();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void WSCDeinstallProvider();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void WSCInstallProvider();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void WSCGetProviderPath();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void WSCUpdateProvider();

// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void WSCSetProviderInfo();

// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void WSCGetProviderInfo();

// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void WSCSetApplicationCategory();

// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void WSCGetApplicationCategory();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void WPUCompleteOverlappedRequest();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void WSCInstallNameSpace();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void WSCUnInstallNameSpace();

// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void WSCInstallNameSpaceEx();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void WSCEnableNSProvider();

// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void WSAAdvertiseProvider();

// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void WSAUnadvertiseProvider();

// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void WSAProviderCompleteAsyncCall();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void EnumProtocolsA();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void EnumProtocolsW();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void GetAddressByNameA();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void GetAddressByNameW();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void GetTypeByNameA();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void GetTypeByNameW();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void GetNameByTypeA();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void GetNameByTypeW();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void SetServiceA();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void SetServiceW();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void GetServiceA();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void GetServiceW();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void getaddrinfo();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void GetAddrInfoW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void GetAddrInfoExA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void GetAddrInfoExW();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void GetAddrInfoExCancel();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void GetAddrInfoExOverlappedResult();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void SetAddrInfoExA();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void SetAddrInfoExW();

// TODO: this type is limited to platform 'windows8.1'
/*void*/void freeaddrinfo();

// TODO: this type is limited to platform 'windows8.1'
/*void*/void FreeAddrInfoW();

// TODO: this type is limited to platform 'windows8.1'
/*void*/void FreeAddrInfoEx();

// TODO: this type is limited to platform 'windows8.1'
/*void*/void FreeAddrInfoExW();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void getnameinfo();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void GetNameInfoW();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void inet_pton();

// TODO: this type is limited to platform 'windows8.1'
/*i32*/void InetPtonW();

// TODO: this type is limited to platform 'windows8.1'
/*PSTR*/void inet_ntop();

// TODO: this type is limited to platform 'windows8.1'
/*PWSTR*/void InetNtopW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void WSASetSocketSecurity();

// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void WSAQuerySocketSecurity();

// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void WSASetSocketPeerTargetName();

// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void WSADeleteSocketPeerTargetName();

// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void WSAImpersonateSocketPeer();

// TODO: this type is limited to platform 'windows6.0.6000'
/*i32*/void WSARevertImpersonation();

// TODO: this type is limited to platform 'windows8.0'
/*HRESULT*/void SetSocketMediaStreamingMode();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void WSCWriteProviderOrder();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void WSCWriteNameSpaceOrder();

