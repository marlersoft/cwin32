// NOTE: this file is autogenerated, DO NOT MODIFY
#include "../bootstrap.h"
//--------------------------------------------------------------------------------
// Section: Constants (95)
//--------------------------------------------------------------------------------
#define WEBAUTHN_API_VERSION_1 (UINT)1
#define WEBAUTHN_API_VERSION_2 (UINT)2
#define WEBAUTHN_RP_ENTITY_INFORMATION_CURRENT_VERSION (UINT)1
#define WEBAUTHN_MAX_USER_ID_LENGTH (UINT)64
#define WEBAUTHN_USER_ENTITY_INFORMATION_CURRENT_VERSION (UINT)1
#define WEBAUTHN_CLIENT_DATA_CURRENT_VERSION (UINT)1
#define WEBAUTHN_COSE_ALGORITHM_ECDSA_P256_WITH_SHA256 (INT)-7
#define WEBAUTHN_COSE_ALGORITHM_ECDSA_P384_WITH_SHA384 (INT)-35
#define WEBAUTHN_COSE_ALGORITHM_ECDSA_P521_WITH_SHA512 (INT)-36
#define WEBAUTHN_COSE_ALGORITHM_RSASSA_PKCS1_V1_5_WITH_SHA256 (INT)-257
#define WEBAUTHN_COSE_ALGORITHM_RSASSA_PKCS1_V1_5_WITH_SHA384 (INT)-258
#define WEBAUTHN_COSE_ALGORITHM_RSASSA_PKCS1_V1_5_WITH_SHA512 (INT)-259
#define WEBAUTHN_COSE_ALGORITHM_RSA_PSS_WITH_SHA256 (INT)-37
#define WEBAUTHN_COSE_ALGORITHM_RSA_PSS_WITH_SHA384 (INT)-38
#define WEBAUTHN_COSE_ALGORITHM_RSA_PSS_WITH_SHA512 (INT)-39
#define WEBAUTHN_COSE_CREDENTIAL_PARAMETER_CURRENT_VERSION (UINT)1
#define WEBAUTHN_CREDENTIAL_CURRENT_VERSION (UINT)1
#define WEBAUTHN_CTAP_TRANSPORT_USB (UINT)1
#define WEBAUTHN_CTAP_TRANSPORT_NFC (UINT)2
#define WEBAUTHN_CTAP_TRANSPORT_BLE (UINT)4
#define WEBAUTHN_CTAP_TRANSPORT_TEST (UINT)8
#define WEBAUTHN_CTAP_TRANSPORT_INTERNAL (UINT)16
#define WEBAUTHN_CTAP_TRANSPORT_FLAGS_MASK (UINT)31
#define WEBAUTHN_CREDENTIAL_EX_CURRENT_VERSION (UINT)1
#define WEBAUTHN_USER_VERIFICATION_ANY (UINT)0
#define WEBAUTHN_USER_VERIFICATION_OPTIONAL (UINT)1
#define WEBAUTHN_USER_VERIFICATION_OPTIONAL_WITH_CREDENTIAL_ID_LIST (UINT)2
#define WEBAUTHN_USER_VERIFICATION_REQUIRED (UINT)3
#define WEBAUTHN_AUTHENTICATOR_ATTACHMENT_ANY (UINT)0
#define WEBAUTHN_AUTHENTICATOR_ATTACHMENT_PLATFORM (UINT)1
#define WEBAUTHN_AUTHENTICATOR_ATTACHMENT_CROSS_PLATFORM (UINT)2
#define WEBAUTHN_AUTHENTICATOR_ATTACHMENT_CROSS_PLATFORM_U2F_V2 (UINT)3
#define WEBAUTHN_USER_VERIFICATION_REQUIREMENT_ANY (UINT)0
#define WEBAUTHN_USER_VERIFICATION_REQUIREMENT_REQUIRED (UINT)1
#define WEBAUTHN_USER_VERIFICATION_REQUIREMENT_PREFERRED (UINT)2
#define WEBAUTHN_USER_VERIFICATION_REQUIREMENT_DISCOURAGED (UINT)3
#define WEBAUTHN_ATTESTATION_CONVEYANCE_PREFERENCE_ANY (UINT)0
#define WEBAUTHN_ATTESTATION_CONVEYANCE_PREFERENCE_NONE (UINT)1
#define WEBAUTHN_ATTESTATION_CONVEYANCE_PREFERENCE_INDIRECT (UINT)2
#define WEBAUTHN_ATTESTATION_CONVEYANCE_PREFERENCE_DIRECT (UINT)3
#define WEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS_VERSION_1 (UINT)1
#define WEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS_VERSION_2 (UINT)2
#define WEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS_VERSION_3 (UINT)3
#define WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS_VERSION_1 (UINT)1
#define WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS_VERSION_2 (UINT)2
#define WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS_VERSION_3 (UINT)3
#define WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS_VERSION_4 (UINT)4
#define WEBAUTHN_ATTESTATION_DECODE_NONE (UINT)0
#define WEBAUTHN_ATTESTATION_DECODE_COMMON (UINT)1
#define WEBAUTHN_COMMON_ATTESTATION_CURRENT_VERSION (UINT)1
#define WEBAUTHN_CREDENTIAL_ATTESTATION_VERSION_1 (UINT)1
#define WEBAUTHN_CREDENTIAL_ATTESTATION_VERSION_2 (UINT)2
#define WEBAUTHN_CREDENTIAL_ATTESTATION_VERSION_3 (UINT)3
#define WEBAUTHN_ASSERTION_CURRENT_VERSION (UINT)1
#define WS_HTTP_HEADER_MAPPING_COMMA_SEPARATOR (INT)1
#define WS_HTTP_HEADER_MAPPING_SEMICOLON_SEPARATOR (INT)2
#define WS_HTTP_HEADER_MAPPING_QUOTED_VALUE (INT)4
#define WS_HTTP_RESPONSE_MAPPING_STATUS_CODE (INT)1
#define WS_HTTP_RESPONSE_MAPPING_STATUS_TEXT (INT)2
#define WS_HTTP_REQUEST_MAPPING_VERB (INT)2
#define WS_MATCH_URL_DNS_HOST (INT)1
#define WS_MATCH_URL_DNS_FULLY_QUALIFIED_HOST (INT)2
#define WS_MATCH_URL_NETBIOS_HOST (INT)4
#define WS_MATCH_URL_LOCAL_HOST (INT)8
#define WS_MATCH_URL_HOST_ADDRESSES (INT)16
#define WS_MATCH_URL_THIS_HOST (INT)31
#define WS_MATCH_URL_PORT (INT)32
#define WS_MATCH_URL_EXACT_PATH (INT)64
#define WS_MATCH_URL_PREFIX_PATH (INT)128
#define WS_MATCH_URL_NO_QUERY (INT)256
#define WS_MUST_UNDERSTAND_HEADER_ATTRIBUTE (INT)1
#define WS_RELAY_HEADER_ATTRIBUTE (INT)2
#define WS_HTTP_HEADER_AUTH_SCHEME_NONE (INT)1
#define WS_HTTP_HEADER_AUTH_SCHEME_BASIC (INT)2
#define WS_HTTP_HEADER_AUTH_SCHEME_DIGEST (INT)4
#define WS_HTTP_HEADER_AUTH_SCHEME_NTLM (INT)8
#define WS_HTTP_HEADER_AUTH_SCHEME_NEGOTIATE (INT)16
#define WS_HTTP_HEADER_AUTH_SCHEME_PASSPORT (INT)32
#define WS_CERT_FAILURE_CN_MISMATCH (INT)1
#define WS_CERT_FAILURE_INVALID_DATE (INT)2
#define WS_CERT_FAILURE_UNTRUSTED_ROOT (INT)4
#define WS_CERT_FAILURE_WRONG_USAGE (INT)8
#define WS_CERT_FAILURE_REVOCATION_OFFLINE (INT)16
#define WS_STRUCT_ABSTRACT (INT)1
#define WS_STRUCT_IGNORE_TRAILING_ELEMENT_CONTENT (INT)2
#define WS_STRUCT_IGNORE_UNHANDLED_ATTRIBUTES (INT)4
#define WS_FIELD_POINTER (INT)1
#define WS_FIELD_OPTIONAL (INT)2
#define WS_FIELD_NILLABLE (INT)4
#define WS_FIELD_NILLABLE_ITEM (INT)8
#define WS_FIELD_OTHER_NAMESPACE (INT)16
#define WS_SERVICE_OPERATION_MESSAGE_NILLABLE_ELEMENT (INT)1
#define WS_URL_FLAGS_ALLOW_HOST_WILDCARDS (INT)1
#define WS_URL_FLAGS_NO_PATH_COLLAPSE (INT)2
#define WS_URL_FLAGS_ZERO_TERMINATE (INT)4

//--------------------------------------------------------------------------------
// Section: Types (450)
//--------------------------------------------------------------------------------
typedef int WS_XML_READER;

typedef int WS_XML_WRITER;

typedef int WS_XML_BUFFER;

typedef int WS_CHANNEL;

typedef int WS_OPERATION_CONTEXT;

typedef int WS_ERROR;

typedef int WS_HEAP;

typedef int WS_LISTENER;

typedef int WS_MESSAGE;

typedef int WS_SECURITY_TOKEN;

typedef int WS_SECURITY_CONTEXT;

typedef int WS_SERVICE_HOST;

typedef int WS_SERVICE_PROXY;

typedef int WS_METADATA;

typedef int WS_POLICY;

typedef enum {
    WS_XML_READER_PROPERTY_MAX_DEPTH = 0,
    WS_XML_READER_PROPERTY_ALLOW_FRAGMENT = 1,
    WS_XML_READER_PROPERTY_MAX_ATTRIBUTES = 2,
    WS_XML_READER_PROPERTY_READ_DECLARATION = 3,
    WS_XML_READER_PROPERTY_CHARSET = 4,
    WS_XML_READER_PROPERTY_ROW = 5,
    WS_XML_READER_PROPERTY_COLUMN = 6,
    WS_XML_READER_PROPERTY_UTF8_TRIM_SIZE = 7,
    WS_XML_READER_PROPERTY_STREAM_BUFFER_SIZE = 8,
    WS_XML_READER_PROPERTY_IN_ATTRIBUTE = 9,
    WS_XML_READER_PROPERTY_STREAM_MAX_ROOT_MIME_PART_SIZE = 10,
    WS_XML_READER_PROPERTY_STREAM_MAX_MIME_HEADERS_SIZE = 11,
    WS_XML_READER_PROPERTY_MAX_MIME_PARTS = 12,
    WS_XML_READER_PROPERTY_ALLOW_INVALID_CHARACTER_REFERENCES = 13,
    WS_XML_READER_PROPERTY_MAX_NAMESPACES = 14,
} WS_XML_READER_PROPERTY_ID;

typedef enum {
    WS_EXCLUSIVE_XML_CANONICALIZATION_ALGORITHM = 0,
    WS_EXCLUSIVE_WITH_COMMENTS_XML_CANONICALIZATION_ALGORITHM = 1,
    WS_INCLUSIVE_XML_CANONICALIZATION_ALGORITHM = 2,
    WS_INCLUSIVE_WITH_COMMENTS_XML_CANONICALIZATION_ALGORITHM = 3,
} WS_XML_CANONICALIZATION_ALGORITHM;

typedef enum {
    WS_XML_CANONICALIZATION_PROPERTY_ALGORITHM = 0,
    WS_XML_CANONICALIZATION_PROPERTY_INCLUSIVE_PREFIXES = 1,
    WS_XML_CANONICALIZATION_PROPERTY_OMITTED_ELEMENT = 2,
    WS_XML_CANONICALIZATION_PROPERTY_OUTPUT_BUFFER_SIZE = 3,
} WS_XML_CANONICALIZATION_PROPERTY_ID;

typedef enum {
    WS_XML_WRITER_PROPERTY_MAX_DEPTH = 0,
    WS_XML_WRITER_PROPERTY_ALLOW_FRAGMENT = 1,
    WS_XML_WRITER_PROPERTY_MAX_ATTRIBUTES = 2,
    WS_XML_WRITER_PROPERTY_WRITE_DECLARATION = 3,
    WS_XML_WRITER_PROPERTY_INDENT = 4,
    WS_XML_WRITER_PROPERTY_BUFFER_TRIM_SIZE = 5,
    WS_XML_WRITER_PROPERTY_CHARSET = 6,
    WS_XML_WRITER_PROPERTY_BUFFERS = 7,
    WS_XML_WRITER_PROPERTY_BUFFER_MAX_SIZE = 8,
    WS_XML_WRITER_PROPERTY_BYTES = 9,
    WS_XML_WRITER_PROPERTY_IN_ATTRIBUTE = 10,
    WS_XML_WRITER_PROPERTY_MAX_MIME_PARTS_BUFFER_SIZE = 11,
    WS_XML_WRITER_PROPERTY_INITIAL_BUFFER = 12,
    WS_XML_WRITER_PROPERTY_ALLOW_INVALID_CHARACTER_REFERENCES = 13,
    WS_XML_WRITER_PROPERTY_MAX_NAMESPACES = 14,
    WS_XML_WRITER_PROPERTY_BYTES_WRITTEN = 15,
    WS_XML_WRITER_PROPERTY_BYTES_TO_CLOSE = 16,
    WS_XML_WRITER_PROPERTY_COMPRESS_EMPTY_ELEMENTS = 17,
    WS_XML_WRITER_PROPERTY_EMIT_UNCOMPRESSED_EMPTY_ELEMENTS = 18,
} WS_XML_WRITER_PROPERTY_ID;

typedef enum {
} WS_XML_BUFFER_PROPERTY_ID;

typedef enum {
    WS_XML_TEXT_TYPE_UTF8 = 1,
    WS_XML_TEXT_TYPE_UTF16 = 2,
    WS_XML_TEXT_TYPE_BASE64 = 3,
    WS_XML_TEXT_TYPE_BOOL = 4,
    WS_XML_TEXT_TYPE_INT32 = 5,
    WS_XML_TEXT_TYPE_INT64 = 6,
    WS_XML_TEXT_TYPE_UINT64 = 7,
    WS_XML_TEXT_TYPE_FLOAT = 8,
    WS_XML_TEXT_TYPE_DOUBLE = 9,
    WS_XML_TEXT_TYPE_DECIMAL = 10,
    WS_XML_TEXT_TYPE_GUID = 11,
    WS_XML_TEXT_TYPE_UNIQUE_ID = 12,
    WS_XML_TEXT_TYPE_DATETIME = 13,
    WS_XML_TEXT_TYPE_TIMESPAN = 14,
    WS_XML_TEXT_TYPE_QNAME = 15,
    WS_XML_TEXT_TYPE_LIST = 16,
} WS_XML_TEXT_TYPE;

typedef enum {
    WS_XML_NODE_TYPE_ELEMENT = 1,
    WS_XML_NODE_TYPE_TEXT = 2,
    WS_XML_NODE_TYPE_END_ELEMENT = 3,
    WS_XML_NODE_TYPE_COMMENT = 4,
    WS_XML_NODE_TYPE_CDATA = 6,
    WS_XML_NODE_TYPE_END_CDATA = 7,
    WS_XML_NODE_TYPE_EOF = 8,
    WS_XML_NODE_TYPE_BOF = 9,
} WS_XML_NODE_TYPE;

typedef enum {
    WS_MOVE_TO_ROOT_ELEMENT = 0,
    WS_MOVE_TO_NEXT_ELEMENT = 1,
    WS_MOVE_TO_PREVIOUS_ELEMENT = 2,
    WS_MOVE_TO_CHILD_ELEMENT = 3,
    WS_MOVE_TO_END_ELEMENT = 4,
    WS_MOVE_TO_PARENT_ELEMENT = 5,
    WS_MOVE_TO_NEXT_NODE = 6,
    WS_MOVE_TO_PREVIOUS_NODE = 7,
    WS_MOVE_TO_FIRST_NODE = 8,
    WS_MOVE_TO_BOF = 9,
    WS_MOVE_TO_EOF = 10,
    WS_MOVE_TO_CHILD_NODE = 11,
} WS_MOVE_TO;

typedef enum {
    WS_BOOL_VALUE_TYPE = 0,
    WS_INT8_VALUE_TYPE = 1,
    WS_INT16_VALUE_TYPE = 2,
    WS_INT32_VALUE_TYPE = 3,
    WS_INT64_VALUE_TYPE = 4,
    WS_UINT8_VALUE_TYPE = 5,
    WS_UINT16_VALUE_TYPE = 6,
    WS_UINT32_VALUE_TYPE = 7,
    WS_UINT64_VALUE_TYPE = 8,
    WS_FLOAT_VALUE_TYPE = 9,
    WS_DOUBLE_VALUE_TYPE = 10,
    WS_DECIMAL_VALUE_TYPE = 11,
    WS_DATETIME_VALUE_TYPE = 12,
    WS_TIMESPAN_VALUE_TYPE = 13,
    WS_GUID_VALUE_TYPE = 14,
    WS_DURATION_VALUE_TYPE = 15,
} WS_VALUE_TYPE;

typedef enum {
    WS_XML_READER_INPUT_TYPE_BUFFER = 1,
    WS_XML_READER_INPUT_TYPE_STREAM = 2,
} WS_XML_READER_INPUT_TYPE;

typedef enum {
    WS_XML_READER_ENCODING_TYPE_TEXT = 1,
    WS_XML_READER_ENCODING_TYPE_BINARY = 2,
    WS_XML_READER_ENCODING_TYPE_MTOM = 3,
    WS_XML_READER_ENCODING_TYPE_RAW = 4,
} WS_XML_READER_ENCODING_TYPE;

typedef enum {
    WS_CHARSET_AUTO = 0,
    WS_CHARSET_UTF8 = 1,
    WS_CHARSET_UTF16LE = 2,
    WS_CHARSET_UTF16BE = 3,
} WS_CHARSET;

typedef enum {
    WS_XML_WRITER_ENCODING_TYPE_TEXT = 1,
    WS_XML_WRITER_ENCODING_TYPE_BINARY = 2,
    WS_XML_WRITER_ENCODING_TYPE_MTOM = 3,
    WS_XML_WRITER_ENCODING_TYPE_RAW = 4,
} WS_XML_WRITER_ENCODING_TYPE;

typedef enum {
    WS_XML_WRITER_OUTPUT_TYPE_BUFFER = 1,
    WS_XML_WRITER_OUTPUT_TYPE_STREAM = 2,
} WS_XML_WRITER_OUTPUT_TYPE;

typedef enum {
    WS_SHORT_CALLBACK = 0,
    WS_LONG_CALLBACK = 1,
} WS_CALLBACK_MODEL;

typedef enum {
    WS_ENCODING_XML_BINARY_1 = 0,
    WS_ENCODING_XML_BINARY_SESSION_1 = 1,
    WS_ENCODING_XML_MTOM_UTF8 = 2,
    WS_ENCODING_XML_MTOM_UTF16BE = 3,
    WS_ENCODING_XML_MTOM_UTF16LE = 4,
    WS_ENCODING_XML_UTF8 = 5,
    WS_ENCODING_XML_UTF16BE = 6,
    WS_ENCODING_XML_UTF16LE = 7,
    WS_ENCODING_RAW = 8,
} WS_ENCODING;

typedef enum {
    WS_CHANNEL_STATE_CREATED = 0,
    WS_CHANNEL_STATE_OPENING = 1,
    WS_CHANNEL_STATE_ACCEPTING = 2,
    WS_CHANNEL_STATE_OPEN = 3,
    WS_CHANNEL_STATE_FAULTED = 4,
    WS_CHANNEL_STATE_CLOSING = 5,
    WS_CHANNEL_STATE_CLOSED = 6,
} WS_CHANNEL_STATE;

typedef enum {
    WS_RECEIVE_REQUIRED_MESSAGE = 1,
    WS_RECEIVE_OPTIONAL_MESSAGE = 2,
} WS_RECEIVE_OPTION;

typedef enum {
    WS_HTTP_CHANNEL_BINDING = 0,
    WS_TCP_CHANNEL_BINDING = 1,
    WS_UDP_CHANNEL_BINDING = 2,
    WS_CUSTOM_CHANNEL_BINDING = 3,
    WS_NAMEDPIPE_CHANNEL_BINDING = 4,
} WS_CHANNEL_BINDING;

typedef enum {
    WS_CHANNEL_TYPE_INPUT = 1,
    WS_CHANNEL_TYPE_OUTPUT = 2,
    WS_CHANNEL_TYPE_SESSION = 4,
    WS_CHANNEL_TYPE_INPUT_SESSION = 5,
    WS_CHANNEL_TYPE_OUTPUT_SESSION = 6,
    WS_CHANNEL_TYPE_DUPLEX = 3,
    WS_CHANNEL_TYPE_DUPLEX_SESSION = 7,
    WS_CHANNEL_TYPE_REQUEST = 8,
    WS_CHANNEL_TYPE_REPLY = 16,
} WS_CHANNEL_TYPE;

typedef enum {
    WS_STREAMED_INPUT_TRANSFER_MODE = 1,
    WS_STREAMED_OUTPUT_TRANSFER_MODE = 2,
    WS_BUFFERED_TRANSFER_MODE = 0,
    WS_STREAMED_TRANSFER_MODE = 3,
} WS_TRANSFER_MODE;

typedef enum {
    WS_HTTP_PROXY_SETTING_MODE_AUTO = 1,
    WS_HTTP_PROXY_SETTING_MODE_NONE = 2,
    WS_HTTP_PROXY_SETTING_MODE_CUSTOM = 3,
} WS_HTTP_PROXY_SETTING_MODE;

typedef enum {
    WS_CHANNEL_PROPERTY_MAX_BUFFERED_MESSAGE_SIZE = 0,
    WS_CHANNEL_PROPERTY_MAX_STREAMED_MESSAGE_SIZE = 1,
    WS_CHANNEL_PROPERTY_MAX_STREAMED_START_SIZE = 2,
    WS_CHANNEL_PROPERTY_MAX_STREAMED_FLUSH_SIZE = 3,
    WS_CHANNEL_PROPERTY_ENCODING = 4,
    WS_CHANNEL_PROPERTY_ENVELOPE_VERSION = 5,
    WS_CHANNEL_PROPERTY_ADDRESSING_VERSION = 6,
    WS_CHANNEL_PROPERTY_MAX_SESSION_DICTIONARY_SIZE = 7,
    WS_CHANNEL_PROPERTY_STATE = 8,
    WS_CHANNEL_PROPERTY_ASYNC_CALLBACK_MODEL = 9,
    WS_CHANNEL_PROPERTY_IP_VERSION = 10,
    WS_CHANNEL_PROPERTY_RESOLVE_TIMEOUT = 11,
    WS_CHANNEL_PROPERTY_CONNECT_TIMEOUT = 12,
    WS_CHANNEL_PROPERTY_SEND_TIMEOUT = 13,
    WS_CHANNEL_PROPERTY_RECEIVE_RESPONSE_TIMEOUT = 14,
    WS_CHANNEL_PROPERTY_RECEIVE_TIMEOUT = 15,
    WS_CHANNEL_PROPERTY_CLOSE_TIMEOUT = 16,
    WS_CHANNEL_PROPERTY_ENABLE_TIMEOUTS = 17,
    WS_CHANNEL_PROPERTY_TRANSFER_MODE = 18,
    WS_CHANNEL_PROPERTY_MULTICAST_INTERFACE = 19,
    WS_CHANNEL_PROPERTY_MULTICAST_HOPS = 20,
    WS_CHANNEL_PROPERTY_REMOTE_ADDRESS = 21,
    WS_CHANNEL_PROPERTY_REMOTE_IP_ADDRESS = 22,
    WS_CHANNEL_PROPERTY_HTTP_CONNECTION_ID = 23,
    WS_CHANNEL_PROPERTY_CUSTOM_CHANNEL_CALLBACKS = 24,
    WS_CHANNEL_PROPERTY_CUSTOM_CHANNEL_PARAMETERS = 25,
    WS_CHANNEL_PROPERTY_CUSTOM_CHANNEL_INSTANCE = 26,
    WS_CHANNEL_PROPERTY_TRANSPORT_URL = 27,
    WS_CHANNEL_PROPERTY_NO_DELAY = 28,
    WS_CHANNEL_PROPERTY_SEND_KEEP_ALIVES = 29,
    WS_CHANNEL_PROPERTY_KEEP_ALIVE_TIME = 30,
    WS_CHANNEL_PROPERTY_KEEP_ALIVE_INTERVAL = 31,
    WS_CHANNEL_PROPERTY_MAX_HTTP_SERVER_CONNECTIONS = 32,
    WS_CHANNEL_PROPERTY_IS_SESSION_SHUT_DOWN = 33,
    WS_CHANNEL_PROPERTY_CHANNEL_TYPE = 34,
    WS_CHANNEL_PROPERTY_TRIM_BUFFERED_MESSAGE_SIZE = 35,
    WS_CHANNEL_PROPERTY_ENCODER = 36,
    WS_CHANNEL_PROPERTY_DECODER = 37,
    WS_CHANNEL_PROPERTY_PROTECTION_LEVEL = 38,
    WS_CHANNEL_PROPERTY_COOKIE_MODE = 39,
    WS_CHANNEL_PROPERTY_HTTP_PROXY_SETTING_MODE = 40,
    WS_CHANNEL_PROPERTY_CUSTOM_HTTP_PROXY = 41,
    WS_CHANNEL_PROPERTY_HTTP_MESSAGE_MAPPING = 42,
    WS_CHANNEL_PROPERTY_ENABLE_HTTP_REDIRECT = 43,
    WS_CHANNEL_PROPERTY_HTTP_REDIRECT_CALLBACK_CONTEXT = 44,
    WS_CHANNEL_PROPERTY_FAULTS_AS_ERRORS = 45,
    WS_CHANNEL_PROPERTY_ALLOW_UNSECURED_FAULTS = 46,
    WS_CHANNEL_PROPERTY_HTTP_SERVER_SPN = 47,
    WS_CHANNEL_PROPERTY_HTTP_PROXY_SPN = 48,
    WS_CHANNEL_PROPERTY_MAX_HTTP_REQUEST_HEADERS_BUFFER_SIZE = 49,
} WS_CHANNEL_PROPERTY_ID;

typedef enum {
    WS_MANUAL_COOKIE_MODE = 1,
    WS_AUTO_COOKIE_MODE = 2,
} WS_COOKIE_MODE;

typedef enum {
    WS_OPERATION_CONTEXT_PROPERTY_CHANNEL = 0,
    WS_OPERATION_CONTEXT_PROPERTY_CONTRACT_DESCRIPTION = 1,
    WS_OPERATION_CONTEXT_PROPERTY_HOST_USER_STATE = 2,
    WS_OPERATION_CONTEXT_PROPERTY_CHANNEL_USER_STATE = 3,
    WS_OPERATION_CONTEXT_PROPERTY_INPUT_MESSAGE = 4,
    WS_OPERATION_CONTEXT_PROPERTY_OUTPUT_MESSAGE = 5,
    WS_OPERATION_CONTEXT_PROPERTY_HEAP = 6,
    WS_OPERATION_CONTEXT_PROPERTY_LISTENER = 7,
    WS_OPERATION_CONTEXT_PROPERTY_ENDPOINT_ADDRESS = 8,
} WS_OPERATION_CONTEXT_PROPERTY_ID;

typedef enum {
    WS_DNS_ENDPOINT_IDENTITY_TYPE = 1,
    WS_UPN_ENDPOINT_IDENTITY_TYPE = 2,
    WS_SPN_ENDPOINT_IDENTITY_TYPE = 3,
    WS_RSA_ENDPOINT_IDENTITY_TYPE = 4,
    WS_CERT_ENDPOINT_IDENTITY_TYPE = 5,
    WS_UNKNOWN_ENDPOINT_IDENTITY_TYPE = 6,
} WS_ENDPOINT_IDENTITY_TYPE;

typedef enum {
    WS_ENDPOINT_ADDRESS_EXTENSION_METADATA_ADDRESS = 1,
} WS_ENDPOINT_ADDRESS_EXTENSION_TYPE;

typedef enum {
    WS_ERROR_PROPERTY_STRING_COUNT = 0,
    WS_ERROR_PROPERTY_ORIGINAL_ERROR_CODE = 1,
    WS_ERROR_PROPERTY_LANGID = 2,
} WS_ERROR_PROPERTY_ID;

typedef enum {
    WS_EXCEPTION_CODE_USAGE_FAILURE = -1069744128,
    WS_EXCEPTION_CODE_INTERNAL_FAILURE = -1069744127,
} WS_EXCEPTION_CODE;

typedef enum {
    WS_FAULT_ERROR_PROPERTY_FAULT = 0,
    WS_FAULT_ERROR_PROPERTY_ACTION = 1,
    WS_FAULT_ERROR_PROPERTY_HEADER = 2,
} WS_FAULT_ERROR_PROPERTY_ID;

typedef enum {
    WS_MINIMAL_FAULT_DISCLOSURE = 0,
    WS_FULL_FAULT_DISCLOSURE = 1,
} WS_FAULT_DISCLOSURE;

typedef enum {
    WS_HEAP_PROPERTY_MAX_SIZE = 0,
    WS_HEAP_PROPERTY_TRIM_SIZE = 1,
    WS_HEAP_PROPERTY_REQUESTED_SIZE = 2,
    WS_HEAP_PROPERTY_ACTUAL_SIZE = 3,
} WS_HEAP_PROPERTY_ID;

typedef enum {
    WS_LISTENER_STATE_CREATED = 0,
    WS_LISTENER_STATE_OPENING = 1,
    WS_LISTENER_STATE_OPEN = 2,
    WS_LISTENER_STATE_FAULTED = 3,
    WS_LISTENER_STATE_CLOSING = 4,
    WS_LISTENER_STATE_CLOSED = 5,
} WS_LISTENER_STATE;

typedef enum {
    WS_LISTENER_PROPERTY_LISTEN_BACKLOG = 0,
    WS_LISTENER_PROPERTY_IP_VERSION = 1,
    WS_LISTENER_PROPERTY_STATE = 2,
    WS_LISTENER_PROPERTY_ASYNC_CALLBACK_MODEL = 3,
    WS_LISTENER_PROPERTY_CHANNEL_TYPE = 4,
    WS_LISTENER_PROPERTY_CHANNEL_BINDING = 5,
    WS_LISTENER_PROPERTY_CONNECT_TIMEOUT = 6,
    WS_LISTENER_PROPERTY_IS_MULTICAST = 7,
    WS_LISTENER_PROPERTY_MULTICAST_INTERFACES = 8,
    WS_LISTENER_PROPERTY_MULTICAST_LOOPBACK = 9,
    WS_LISTENER_PROPERTY_CLOSE_TIMEOUT = 10,
    WS_LISTENER_PROPERTY_TO_HEADER_MATCHING_OPTIONS = 11,
    WS_LISTENER_PROPERTY_TRANSPORT_URL_MATCHING_OPTIONS = 12,
    WS_LISTENER_PROPERTY_CUSTOM_LISTENER_CALLBACKS = 13,
    WS_LISTENER_PROPERTY_CUSTOM_LISTENER_PARAMETERS = 14,
    WS_LISTENER_PROPERTY_CUSTOM_LISTENER_INSTANCE = 15,
    WS_LISTENER_PROPERTY_DISALLOWED_USER_AGENT = 16,
} WS_LISTENER_PROPERTY_ID;

typedef enum {
    WS_IP_VERSION_4 = 1,
    WS_IP_VERSION_6 = 2,
    WS_IP_VERSION_AUTO = 3,
} WS_IP_VERSION;

typedef enum {
    WS_MESSAGE_STATE_EMPTY = 1,
    WS_MESSAGE_STATE_INITIALIZED = 2,
    WS_MESSAGE_STATE_READING = 3,
    WS_MESSAGE_STATE_WRITING = 4,
    WS_MESSAGE_STATE_DONE = 5,
} WS_MESSAGE_STATE;

typedef enum {
    WS_BLANK_MESSAGE = 0,
    WS_DUPLICATE_MESSAGE = 1,
    WS_REQUEST_MESSAGE = 2,
    WS_REPLY_MESSAGE = 3,
    WS_FAULT_MESSAGE = 4,
} WS_MESSAGE_INITIALIZATION;

typedef enum {
    WS_REPEATING_HEADER = 1,
    WS_SINGLETON_HEADER = 2,
} WS_REPEATING_HEADER_OPTION;

typedef enum {
    WS_ACTION_HEADER = 1,
    WS_TO_HEADER = 2,
    WS_MESSAGE_ID_HEADER = 3,
    WS_RELATES_TO_HEADER = 4,
    WS_FROM_HEADER = 5,
    WS_REPLY_TO_HEADER = 6,
    WS_FAULT_TO_HEADER = 7,
} WS_HEADER_TYPE;

typedef enum {
    WS_ADDRESSING_VERSION_0_9 = 1,
    WS_ADDRESSING_VERSION_1_0 = 2,
    WS_ADDRESSING_VERSION_TRANSPORT = 3,
} WS_ADDRESSING_VERSION;

typedef enum {
    WS_ENVELOPE_VERSION_SOAP_1_1 = 1,
    WS_ENVELOPE_VERSION_SOAP_1_2 = 2,
    WS_ENVELOPE_VERSION_NONE = 3,
} WS_ENVELOPE_VERSION;

typedef enum {
    WS_MESSAGE_PROPERTY_STATE = 0,
    WS_MESSAGE_PROPERTY_HEAP = 1,
    WS_MESSAGE_PROPERTY_ENVELOPE_VERSION = 2,
    WS_MESSAGE_PROPERTY_ADDRESSING_VERSION = 3,
    WS_MESSAGE_PROPERTY_HEADER_BUFFER = 4,
    WS_MESSAGE_PROPERTY_HEADER_POSITION = 5,
    WS_MESSAGE_PROPERTY_BODY_READER = 6,
    WS_MESSAGE_PROPERTY_BODY_WRITER = 7,
    WS_MESSAGE_PROPERTY_IS_ADDRESSED = 8,
    WS_MESSAGE_PROPERTY_HEAP_PROPERTIES = 9,
    WS_MESSAGE_PROPERTY_XML_READER_PROPERTIES = 10,
    WS_MESSAGE_PROPERTY_XML_WRITER_PROPERTIES = 11,
    WS_MESSAGE_PROPERTY_IS_FAULT = 12,
    WS_MESSAGE_PROPERTY_MAX_PROCESSED_HEADERS = 13,
    WS_MESSAGE_PROPERTY_USERNAME = 14,
    WS_MESSAGE_PROPERTY_ENCODED_CERT = 15,
    WS_MESSAGE_PROPERTY_TRANSPORT_SECURITY_WINDOWS_TOKEN = 16,
    WS_MESSAGE_PROPERTY_HTTP_HEADER_AUTH_WINDOWS_TOKEN = 17,
    WS_MESSAGE_PROPERTY_MESSAGE_SECURITY_WINDOWS_TOKEN = 18,
    WS_MESSAGE_PROPERTY_SAML_ASSERTION = 19,
    WS_MESSAGE_PROPERTY_SECURITY_CONTEXT = 20,
    WS_MESSAGE_PROPERTY_PROTECTION_LEVEL = 21,
} WS_MESSAGE_PROPERTY_ID;

typedef enum {
    WS_SSL_TRANSPORT_SECURITY_BINDING_TYPE = 1,
    WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TYPE = 2,
    WS_HTTP_HEADER_AUTH_SECURITY_BINDING_TYPE = 3,
    WS_USERNAME_MESSAGE_SECURITY_BINDING_TYPE = 4,
    WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TYPE = 5,
    WS_XML_TOKEN_MESSAGE_SECURITY_BINDING_TYPE = 6,
    WS_SAML_MESSAGE_SECURITY_BINDING_TYPE = 7,
    WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_TYPE = 8,
    WS_NAMEDPIPE_SSPI_TRANSPORT_SECURITY_BINDING_TYPE = 9,
} WS_SECURITY_BINDING_TYPE;

typedef enum {
    WS_HTTP_HEADER_AUTH_TARGET_SERVICE = 1,
    WS_HTTP_HEADER_AUTH_TARGET_PROXY = 2,
} WS_HTTP_HEADER_AUTH_TARGET;

typedef enum {
    WS_WINDOWS_INTEGRATED_AUTH_PACKAGE_KERBEROS = 1,
    WS_WINDOWS_INTEGRATED_AUTH_PACKAGE_NTLM = 2,
    WS_WINDOWS_INTEGRATED_AUTH_PACKAGE_SPNEGO = 3,
} WS_WINDOWS_INTEGRATED_AUTH_PACKAGE;

typedef enum {
    WS_SECURITY_HEADER_VERSION_1_0 = 1,
    WS_SECURITY_HEADER_VERSION_1_1 = 2,
} WS_SECURITY_HEADER_VERSION;

typedef enum {
    WS_TRUST_VERSION_FEBRUARY_2005 = 1,
    WS_TRUST_VERSION_1_3 = 2,
} WS_TRUST_VERSION;

typedef enum {
    WS_REQUEST_SECURITY_TOKEN_ACTION_ISSUE = 1,
    WS_REQUEST_SECURITY_TOKEN_ACTION_NEW_CONTEXT = 2,
    WS_REQUEST_SECURITY_TOKEN_ACTION_RENEW_CONTEXT = 3,
} WS_REQUEST_SECURITY_TOKEN_ACTION;

typedef enum {
    WS_SECURE_CONVERSATION_VERSION_FEBRUARY_2005 = 1,
    WS_SECURE_CONVERSATION_VERSION_1_3 = 2,
} WS_SECURE_CONVERSATION_VERSION;

typedef enum {
    WS_SECURE_PROTOCOL_SSL2 = 1,
    WS_SECURE_PROTOCOL_SSL3 = 2,
    WS_SECURE_PROTOCOL_TLS1_0 = 4,
    WS_SECURE_PROTOCOL_TLS1_1 = 8,
    WS_SECURE_PROTOCOL_TLS1_2 = 16,
} WS_SECURE_PROTOCOL;

typedef enum {
    WS_SECURITY_TIMESTAMP_USAGE_ALWAYS = 1,
    WS_SECURITY_TIMESTAMP_USAGE_NEVER = 2,
    WS_SECURITY_TIMESTAMP_USAGE_REQUESTS_ONLY = 3,
} WS_SECURITY_TIMESTAMP_USAGE;

typedef enum {
    WS_SECURITY_HEADER_LAYOUT_STRICT = 1,
    WS_SECURITY_HEADER_LAYOUT_LAX = 2,
    WS_SECURITY_HEADER_LAYOUT_LAX_WITH_TIMESTAMP_FIRST = 3,
    WS_SECURITY_HEADER_LAYOUT_LAX_WITH_TIMESTAMP_LAST = 4,
} WS_SECURITY_HEADER_LAYOUT;

typedef enum {
} WS_SECURITY_ALGORITHM_PROPERTY_ID;

typedef enum {
    WS_SECURITY_ALGORITHM_DEFAULT = 0,
    WS_SECURITY_ALGORITHM_CANONICALIZATION_EXCLUSIVE = 1,
    WS_SECURITY_ALGORITHM_CANONICALIZATION_EXCLUSIVE_WITH_COMMENTS = 2,
    WS_SECURITY_ALGORITHM_DIGEST_SHA1 = 3,
    WS_SECURITY_ALGORITHM_DIGEST_SHA_256 = 4,
    WS_SECURITY_ALGORITHM_DIGEST_SHA_384 = 5,
    WS_SECURITY_ALGORITHM_DIGEST_SHA_512 = 6,
    WS_SECURITY_ALGORITHM_SYMMETRIC_SIGNATURE_HMAC_SHA1 = 7,
    WS_SECURITY_ALGORITHM_SYMMETRIC_SIGNATURE_HMAC_SHA_256 = 8,
    WS_SECURITY_ALGORITHM_SYMMETRIC_SIGNATURE_HMAC_SHA_384 = 9,
    WS_SECURITY_ALGORITHM_SYMMETRIC_SIGNATURE_HMAC_SHA_512 = 10,
    WS_SECURITY_ALGORITHM_ASYMMETRIC_SIGNATURE_RSA_SHA1 = 11,
    WS_SECURITY_ALGORITHM_ASYMMETRIC_SIGNATURE_DSA_SHA1 = 12,
    WS_SECURITY_ALGORITHM_ASYMMETRIC_SIGNATURE_RSA_SHA_256 = 13,
    WS_SECURITY_ALGORITHM_ASYMMETRIC_SIGNATURE_RSA_SHA_384 = 14,
    WS_SECURITY_ALGORITHM_ASYMMETRIC_SIGNATURE_RSA_SHA_512 = 15,
    WS_SECURITY_ALGORITHM_ASYMMETRIC_KEYWRAP_RSA_1_5 = 16,
    WS_SECURITY_ALGORITHM_ASYMMETRIC_KEYWRAP_RSA_OAEP = 17,
    WS_SECURITY_ALGORITHM_KEY_DERIVATION_P_SHA1 = 18,
} WS_SECURITY_ALGORITHM_ID;

typedef enum {
    WS_PROTECTION_LEVEL_NONE = 1,
    WS_PROTECTION_LEVEL_SIGN = 2,
    WS_PROTECTION_LEVEL_SIGN_AND_ENCRYPT = 3,
} WS_PROTECTION_LEVEL;

typedef enum {
    WS_SECURITY_PROPERTY_TRANSPORT_PROTECTION_LEVEL = 1,
    WS_SECURITY_PROPERTY_ALGORITHM_SUITE = 2,
    WS_SECURITY_PROPERTY_ALGORITHM_SUITE_NAME = 3,
    WS_SECURITY_PROPERTY_MAX_ALLOWED_LATENCY = 4,
    WS_SECURITY_PROPERTY_TIMESTAMP_VALIDITY_DURATION = 5,
    WS_SECURITY_PROPERTY_MAX_ALLOWED_CLOCK_SKEW = 6,
    WS_SECURITY_PROPERTY_TIMESTAMP_USAGE = 7,
    WS_SECURITY_PROPERTY_SECURITY_HEADER_LAYOUT = 8,
    WS_SECURITY_PROPERTY_SECURITY_HEADER_VERSION = 9,
    WS_SECURITY_PROPERTY_EXTENDED_PROTECTION_POLICY = 10,
    WS_SECURITY_PROPERTY_EXTENDED_PROTECTION_SCENARIO = 11,
    WS_SECURITY_PROPERTY_SERVICE_IDENTITIES = 12,
} WS_SECURITY_PROPERTY_ID;

typedef enum {
    WS_SECURITY_KEY_TYPE_NONE = 1,
    WS_SECURITY_KEY_TYPE_SYMMETRIC = 2,
    WS_SECURITY_KEY_TYPE_ASYMMETRIC = 3,
} WS_SECURITY_KEY_TYPE;

typedef enum {
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC256 = 1,
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC192 = 2,
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC128 = 3,
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC256_RSA15 = 4,
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC192_RSA15 = 5,
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC128_RSA15 = 6,
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC256_SHA256 = 7,
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC192_SHA256 = 8,
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC128_SHA256 = 9,
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC256_SHA256_RSA15 = 10,
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC192_SHA256_RSA15 = 11,
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC128_SHA256_RSA15 = 12,
} WS_SECURITY_ALGORITHM_SUITE_NAME;

typedef enum {
    WS_SECURITY_TOKEN_REFERENCE_MODE_LOCAL_ID = 1,
    WS_SECURITY_TOKEN_REFERENCE_MODE_XML_BUFFER = 2,
    WS_SECURITY_TOKEN_REFERENCE_MODE_CERT_THUMBPRINT = 3,
    WS_SECURITY_TOKEN_REFERENCE_MODE_SECURITY_CONTEXT_ID = 4,
    WS_SECURITY_TOKEN_REFERENCE_MODE_SAML_ASSERTION_ID = 5,
} WS_SECURITY_TOKEN_REFERENCE_MODE;

typedef enum {
    WS_SECURITY_KEY_ENTROPY_MODE_CLIENT_ONLY = 1,
    WS_SECURITY_KEY_ENTROPY_MODE_SERVER_ONLY = 2,
    WS_SECURITY_KEY_ENTROPY_MODE_COMBINED = 3,
} WS_SECURITY_KEY_ENTROPY_MODE;

typedef enum {
    WS_EXTENDED_PROTECTION_POLICY_NEVER = 1,
    WS_EXTENDED_PROTECTION_POLICY_WHEN_SUPPORTED = 2,
    WS_EXTENDED_PROTECTION_POLICY_ALWAYS = 3,
} WS_EXTENDED_PROTECTION_POLICY;

typedef enum {
    WS_EXTENDED_PROTECTION_SCENARIO_BOUND_SERVER = 1,
    WS_EXTENDED_PROTECTION_SCENARIO_TERMINATED_SSL = 2,
} WS_EXTENDED_PROTECTION_SCENARIO;

typedef enum {
    WS_SECURITY_BINDING_PROPERTY_REQUIRE_SSL_CLIENT_CERT = 1,
    WS_SECURITY_BINDING_PROPERTY_WINDOWS_INTEGRATED_AUTH_PACKAGE = 2,
    WS_SECURITY_BINDING_PROPERTY_REQUIRE_SERVER_AUTH = 3,
    WS_SECURITY_BINDING_PROPERTY_ALLOW_ANONYMOUS_CLIENTS = 4,
    WS_SECURITY_BINDING_PROPERTY_ALLOWED_IMPERSONATION_LEVEL = 5,
    WS_SECURITY_BINDING_PROPERTY_HTTP_HEADER_AUTH_SCHEME = 6,
    WS_SECURITY_BINDING_PROPERTY_HTTP_HEADER_AUTH_TARGET = 7,
    WS_SECURITY_BINDING_PROPERTY_HTTP_HEADER_AUTH_BASIC_REALM = 8,
    WS_SECURITY_BINDING_PROPERTY_HTTP_HEADER_AUTH_DIGEST_REALM = 9,
    WS_SECURITY_BINDING_PROPERTY_HTTP_HEADER_AUTH_DIGEST_DOMAIN = 10,
    WS_SECURITY_BINDING_PROPERTY_SECURITY_CONTEXT_KEY_SIZE = 11,
    WS_SECURITY_BINDING_PROPERTY_SECURITY_CONTEXT_KEY_ENTROPY_MODE = 12,
    WS_SECURITY_BINDING_PROPERTY_MESSAGE_PROPERTIES = 13,
    WS_SECURITY_BINDING_PROPERTY_SECURITY_CONTEXT_MAX_PENDING_CONTEXTS = 14,
    WS_SECURITY_BINDING_PROPERTY_SECURITY_CONTEXT_MAX_ACTIVE_CONTEXTS = 15,
    WS_SECURITY_BINDING_PROPERTY_SECURE_CONVERSATION_VERSION = 16,
    WS_SECURITY_BINDING_PROPERTY_SECURITY_CONTEXT_SUPPORT_RENEW = 17,
    WS_SECURITY_BINDING_PROPERTY_SECURITY_CONTEXT_RENEWAL_INTERVAL = 18,
    WS_SECURITY_BINDING_PROPERTY_SECURITY_CONTEXT_ROLLOVER_INTERVAL = 19,
    WS_SECURITY_BINDING_PROPERTY_CERT_FAILURES_TO_IGNORE = 20,
    WS_SECURITY_BINDING_PROPERTY_DISABLE_CERT_REVOCATION_CHECK = 21,
    WS_SECURITY_BINDING_PROPERTY_DISALLOWED_SECURE_PROTOCOLS = 22,
    WS_SECURITY_BINDING_PROPERTY_CERTIFICATE_VALIDATION_CALLBACK_CONTEXT = 23,
} WS_SECURITY_BINDING_PROPERTY_ID;

typedef enum {
    WS_SUBJECT_NAME_CERT_CREDENTIAL_TYPE = 1,
    WS_THUMBPRINT_CERT_CREDENTIAL_TYPE = 2,
    WS_CUSTOM_CERT_CREDENTIAL_TYPE = 3,
} WS_CERT_CREDENTIAL_TYPE;

typedef enum {
    WS_STRING_WINDOWS_INTEGRATED_AUTH_CREDENTIAL_TYPE = 1,
    WS_DEFAULT_WINDOWS_INTEGRATED_AUTH_CREDENTIAL_TYPE = 2,
    WS_OPAQUE_WINDOWS_INTEGRATED_AUTH_CREDENTIAL_TYPE = 3,
} WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL_TYPE;

typedef enum {
    WS_STRING_USERNAME_CREDENTIAL_TYPE = 1,
} WS_USERNAME_CREDENTIAL_TYPE;

typedef enum {
    WS_SECURITY_TOKEN_PROPERTY_KEY_TYPE = 1,
    WS_SECURITY_TOKEN_PROPERTY_VALID_FROM_TIME = 2,
    WS_SECURITY_TOKEN_PROPERTY_VALID_TILL_TIME = 3,
    WS_SECURITY_TOKEN_PROPERTY_SERIALIZED_XML = 4,
    WS_SECURITY_TOKEN_PROPERTY_ATTACHED_REFERENCE_XML = 5,
    WS_SECURITY_TOKEN_PROPERTY_UNATTACHED_REFERENCE_XML = 6,
    WS_SECURITY_TOKEN_PROPERTY_SYMMETRIC_KEY = 7,
} WS_SECURITY_TOKEN_PROPERTY_ID;

typedef enum {
    WS_RAW_SYMMETRIC_SECURITY_KEY_HANDLE_TYPE = 1,
    WS_NCRYPT_ASYMMETRIC_SECURITY_KEY_HANDLE_TYPE = 2,
    WS_CAPI_ASYMMETRIC_SECURITY_KEY_HANDLE_TYPE = 3,
} WS_SECURITY_KEY_HANDLE_TYPE;

typedef enum {
    WS_SUPPORTING_MESSAGE_SECURITY_USAGE = 1,
} WS_MESSAGE_SECURITY_USAGE;

typedef enum {
    WS_SECURITY_CONTEXT_PROPERTY_IDENTIFIER = 1,
    WS_SECURITY_CONTEXT_PROPERTY_USERNAME = 2,
    WS_SECURITY_CONTEXT_PROPERTY_MESSAGE_SECURITY_WINDOWS_TOKEN = 3,
    WS_SECURITY_CONTEXT_PROPERTY_SAML_ASSERTION = 4,
} WS_SECURITY_CONTEXT_PROPERTY_ID;

typedef enum {
    WS_XML_SECURITY_TOKEN_PROPERTY_ATTACHED_REFERENCE = 1,
    WS_XML_SECURITY_TOKEN_PROPERTY_UNATTACHED_REFERENCE = 2,
    WS_XML_SECURITY_TOKEN_PROPERTY_VALID_FROM_TIME = 3,
    WS_XML_SECURITY_TOKEN_PROPERTY_VALID_TILL_TIME = 4,
} WS_XML_SECURITY_TOKEN_PROPERTY_ID;

typedef enum {
    WS_CERT_SIGNED_SAML_AUTHENTICATOR_TYPE = 1,
} WS_SAML_AUTHENTICATOR_TYPE;

typedef enum {
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_APPLIES_TO = 1,
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_TRUST_VERSION = 2,
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_SECURE_CONVERSATION_VERSION = 3,
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_ISSUED_TOKEN_TYPE = 4,
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_REQUEST_ACTION = 5,
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_EXISTING_TOKEN = 6,
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_ISSUED_TOKEN_KEY_TYPE = 7,
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_ISSUED_TOKEN_KEY_SIZE = 8,
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_ISSUED_TOKEN_KEY_ENTROPY = 9,
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_LOCAL_REQUEST_PARAMETERS = 10,
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_SERVICE_REQUEST_PARAMETERS = 11,
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_MESSAGE_PROPERTIES = 12,
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_BEARER_KEY_TYPE_VERSION = 13,
} WS_REQUEST_SECURITY_TOKEN_PROPERTY_ID;

typedef enum {
    WS_SECURITY_BEARER_KEY_TYPE_VERSION_1_3_ORIGINAL_SPECIFICATION = 1,
    WS_SECURITY_BEARER_KEY_TYPE_VERSION_1_3_ORIGINAL_SCHEMA = 2,
    WS_SECURITY_BEARER_KEY_TYPE_VERSION_1_3_ERRATA_01 = 3,
} WS_SECURITY_BEARER_KEY_TYPE_VERSION;

typedef enum {
    WS_BOOL_TYPE = 0,
    WS_INT8_TYPE = 1,
    WS_INT16_TYPE = 2,
    WS_INT32_TYPE = 3,
    WS_INT64_TYPE = 4,
    WS_UINT8_TYPE = 5,
    WS_UINT16_TYPE = 6,
    WS_UINT32_TYPE = 7,
    WS_UINT64_TYPE = 8,
    WS_FLOAT_TYPE = 9,
    WS_DOUBLE_TYPE = 10,
    WS_DECIMAL_TYPE = 11,
    WS_DATETIME_TYPE = 12,
    WS_TIMESPAN_TYPE = 13,
    WS_GUID_TYPE = 14,
    WS_UNIQUE_ID_TYPE = 15,
    WS_STRING_TYPE = 16,
    WS_WSZ_TYPE = 17,
    WS_BYTES_TYPE = 18,
    WS_XML_STRING_TYPE = 19,
    WS_XML_QNAME_TYPE = 20,
    WS_XML_BUFFER_TYPE = 21,
    WS_CHAR_ARRAY_TYPE = 22,
    WS_UTF8_ARRAY_TYPE = 23,
    WS_BYTE_ARRAY_TYPE = 24,
    WS_DESCRIPTION_TYPE = 25,
    WS_STRUCT_TYPE = 26,
    WS_CUSTOM_TYPE = 27,
    WS_ENDPOINT_ADDRESS_TYPE = 28,
    WS_FAULT_TYPE = 29,
    WS_VOID_TYPE = 30,
    WS_ENUM_TYPE = 31,
    WS_DURATION_TYPE = 32,
    WS_UNION_TYPE = 33,
    WS_ANY_ATTRIBUTES_TYPE = 34,
} WS_TYPE;

typedef enum {
    WS_TYPE_ATTRIBUTE_FIELD_MAPPING = 0,
    WS_ATTRIBUTE_FIELD_MAPPING = 1,
    WS_ELEMENT_FIELD_MAPPING = 2,
    WS_REPEATING_ELEMENT_FIELD_MAPPING = 3,
    WS_TEXT_FIELD_MAPPING = 4,
    WS_NO_FIELD_MAPPING = 5,
    WS_XML_ATTRIBUTE_FIELD_MAPPING = 6,
    WS_ELEMENT_CHOICE_FIELD_MAPPING = 7,
    WS_REPEATING_ELEMENT_CHOICE_FIELD_MAPPING = 8,
    WS_ANY_ELEMENT_FIELD_MAPPING = 9,
    WS_REPEATING_ANY_ELEMENT_FIELD_MAPPING = 10,
    WS_ANY_CONTENT_FIELD_MAPPING = 11,
    WS_ANY_ATTRIBUTES_FIELD_MAPPING = 12,
} WS_FIELD_MAPPING;

typedef enum {
    WS_ELEMENT_TYPE_MAPPING = 1,
    WS_ATTRIBUTE_TYPE_MAPPING = 2,
    WS_ELEMENT_CONTENT_TYPE_MAPPING = 3,
    WS_ANY_ELEMENT_TYPE_MAPPING = 4,
} WS_TYPE_MAPPING;

typedef enum {
    WS_READ_REQUIRED_VALUE = 1,
    WS_READ_REQUIRED_POINTER = 2,
    WS_READ_OPTIONAL_POINTER = 3,
    WS_READ_NILLABLE_POINTER = 4,
    WS_READ_NILLABLE_VALUE = 5,
} WS_READ_OPTION;

typedef enum {
    WS_WRITE_REQUIRED_VALUE = 1,
    WS_WRITE_REQUIRED_POINTER = 2,
    WS_WRITE_NILLABLE_VALUE = 3,
    WS_WRITE_NILLABLE_POINTER = 4,
} WS_WRITE_OPTION;

typedef enum {
    WS_SERVICE_HOST_ABORT = 0,
    WS_SERVICE_CHANNEL_FAULTED = 1,
} WS_SERVICE_CANCEL_REASON;

typedef enum {
    WS_NON_RPC_LITERAL_OPERATION = 0,
    WS_RPC_LITERAL_OPERATION = 1,
} WS_OPERATION_STYLE;

typedef enum {
    WS_PARAMETER_TYPE_NORMAL = 0,
    WS_PARAMETER_TYPE_ARRAY = 1,
    WS_PARAMETER_TYPE_ARRAY_COUNT = 2,
    WS_PARAMETER_TYPE_MESSAGES = 3,
} WS_PARAMETER_TYPE;

typedef enum {
    WS_SERVICE_ENDPOINT_PROPERTY_ACCEPT_CHANNEL_CALLBACK = 0,
    WS_SERVICE_ENDPOINT_PROPERTY_CLOSE_CHANNEL_CALLBACK = 1,
    WS_SERVICE_ENDPOINT_PROPERTY_MAX_ACCEPTING_CHANNELS = 2,
    WS_SERVICE_ENDPOINT_PROPERTY_MAX_CONCURRENCY = 3,
    WS_SERVICE_ENDPOINT_PROPERTY_BODY_HEAP_MAX_SIZE = 4,
    WS_SERVICE_ENDPOINT_PROPERTY_BODY_HEAP_TRIM_SIZE = 5,
    WS_SERVICE_ENDPOINT_PROPERTY_MESSAGE_PROPERTIES = 6,
    WS_SERVICE_ENDPOINT_PROPERTY_MAX_CALL_POOL_SIZE = 7,
    WS_SERVICE_ENDPOINT_PROPERTY_MAX_CHANNEL_POOL_SIZE = 8,
    WS_SERVICE_ENDPOINT_PROPERTY_LISTENER_PROPERTIES = 9,
    WS_SERVICE_ENDPOINT_PROPERTY_CHECK_MUST_UNDERSTAND = 10,
    WS_SERVICE_ENDPOINT_PROPERTY_METADATA_EXCHANGE_TYPE = 11,
    WS_SERVICE_ENDPOINT_PROPERTY_METADATA = 12,
    WS_SERVICE_ENDPOINT_PROPERTY_METADATA_EXCHANGE_URL_SUFFIX = 13,
    WS_SERVICE_ENDPOINT_PROPERTY_MAX_CHANNELS = 14,
} WS_SERVICE_ENDPOINT_PROPERTY_ID;

typedef enum {
    WS_METADATA_EXCHANGE_TYPE_NONE = 0,
    WS_METADATA_EXCHANGE_TYPE_MEX = 1,
    WS_METADATA_EXCHANGE_TYPE_HTTP_GET = 2,
} WS_METADATA_EXCHANGE_TYPE;

typedef enum {
    WS_SERVICE_PROPERTY_HOST_USER_STATE = 0,
    WS_SERVICE_PROPERTY_FAULT_DISCLOSURE = 1,
    WS_SERVICE_PROPERTY_FAULT_LANGID = 2,
    WS_SERVICE_PROPERTY_HOST_STATE = 3,
    WS_SERVICE_PROPERTY_METADATA = 4,
    WS_SERVICE_PROPERTY_CLOSE_TIMEOUT = 5,
} WS_SERVICE_PROPERTY_ID;

typedef enum {
    WS_SERVICE_HOST_STATE_CREATED = 0,
    WS_SERVICE_HOST_STATE_OPENING = 1,
    WS_SERVICE_HOST_STATE_OPEN = 2,
    WS_SERVICE_HOST_STATE_CLOSING = 3,
    WS_SERVICE_HOST_STATE_CLOSED = 4,
    WS_SERVICE_HOST_STATE_FAULTED = 5,
} WS_SERVICE_HOST_STATE;

typedef enum {
    WS_SERVICE_PROXY_STATE_CREATED = 0,
    WS_SERVICE_PROXY_STATE_OPENING = 1,
    WS_SERVICE_PROXY_STATE_OPEN = 2,
    WS_SERVICE_PROXY_STATE_CLOSING = 3,
    WS_SERVICE_PROXY_STATE_CLOSED = 4,
    WS_SERVICE_PROXY_STATE_FAULTED = 5,
} WS_SERVICE_PROXY_STATE;

typedef enum {
    WS_PROXY_PROPERTY_CALL_TIMEOUT = 0,
    WS_PROXY_PROPERTY_MESSAGE_PROPERTIES = 1,
    WS_PROXY_PROPERTY_MAX_CALL_POOL_SIZE = 2,
    WS_PROXY_PROPERTY_STATE = 3,
    WS_PROXY_PROPERTY_MAX_PENDING_CALLS = 4,
    WS_PROXY_PROPERTY_MAX_CLOSE_TIMEOUT = 5,
    WS_PROXY_FAULT_LANG_ID = 6,
} WS_PROXY_PROPERTY_ID;

typedef enum {
    WS_CALL_PROPERTY_CHECK_MUST_UNDERSTAND = 0,
    WS_CALL_PROPERTY_SEND_MESSAGE_CONTEXT = 1,
    WS_CALL_PROPERTY_RECEIVE_MESSAGE_CONTEXT = 2,
    WS_CALL_PROPERTY_CALL_ID = 3,
} WS_CALL_PROPERTY_ID;

typedef enum {
    WS_TRACE_API_NONE = -1,
    WS_TRACE_API_START_READER_CANONICALIZATION = 0,
    WS_TRACE_API_END_READER_CANONICALIZATION = 1,
    WS_TRACE_API_START_WRITER_CANONICALIZATION = 2,
    WS_TRACE_API_END_WRITER_CANONICALIZATION = 3,
    WS_TRACE_API_CREATE_XML_BUFFER = 4,
    WS_TRACE_API_REMOVE_NODE = 5,
    WS_TRACE_API_CREATE_READER = 6,
    WS_TRACE_API_SET_INPUT = 7,
    WS_TRACE_API_SET_INPUT_TO_BUFFER = 8,
    WS_TRACE_API_FREE_XML_READER = 9,
    WS_TRACE_API_GET_READER_PROPERTY = 10,
    WS_TRACE_API_GET_READER_NODE = 11,
    WS_TRACE_API_FILL_READER = 12,
    WS_TRACE_API_READ_START_ELEMENT = 13,
    WS_TRACE_API_READ_TO_START_ELEMENT = 14,
    WS_TRACE_API_READ_START_ATTRIBUTE = 15,
    WS_TRACE_API_READ_END_ATTRIBUTE = 16,
    WS_TRACE_API_READ_NODE = 17,
    WS_TRACE_API_SKIP_NODE = 18,
    WS_TRACE_API_READ_END_ELEMENT = 19,
    WS_TRACE_API_FIND_ATTRIBUTE = 20,
    WS_TRACE_API_READ_ELEMENT_VALUE = 21,
    WS_TRACE_API_READ_CHARS = 22,
    WS_TRACE_API_READ_CHARS_UTF8 = 23,
    WS_TRACE_API_READ_BYTES = 24,
    WS_TRACE_API_READ_ARRAY = 25,
    WS_TRACE_API_GET_READER_POSITION = 26,
    WS_TRACE_API_SET_READER_POSITION = 27,
    WS_TRACE_API_MOVE_READER = 28,
    WS_TRACE_API_CREATE_WRITER = 29,
    WS_TRACE_API_FREE_XML_WRITER = 30,
    WS_TRACE_API_SET_OUTPUT = 31,
    WS_TRACE_API_SET_OUTPUT_TO_BUFFER = 32,
    WS_TRACE_API_GET_WRITER_PROPERTY = 33,
    WS_TRACE_API_FLUSH_WRITER = 34,
    WS_TRACE_API_WRITE_START_ELEMENT = 35,
    WS_TRACE_API_WRITE_END_START_ELEMENT = 36,
    WS_TRACE_API_WRITE_XMLNS_ATTRIBUTE = 37,
    WS_TRACE_API_WRITE_START_ATTRIBUTE = 38,
    WS_TRACE_API_WRITE_END_ATTRIBUTE = 39,
    WS_TRACE_API_WRITE_VALUE = 40,
    WS_TRACE_API_WRITE_XML_BUFFER = 41,
    WS_TRACE_API_READ_XML_BUFFER = 42,
    WS_TRACE_API_WRITE_XML_BUFFER_TO_BYTES = 43,
    WS_TRACE_API_READ_XML_BUFFER_FROM_BYTES = 44,
    WS_TRACE_API_WRITE_ARRAY = 45,
    WS_TRACE_API_WRITE_QUALIFIED_NAME = 46,
    WS_TRACE_API_WRITE_CHARS = 47,
    WS_TRACE_API_WRITE_CHARS_UTF8 = 48,
    WS_TRACE_API_WRITE_BYTES = 49,
    WS_TRACE_API_PUSH_BYTES = 50,
    WS_TRACE_API_PULL_BYTES = 51,
    WS_TRACE_API_WRITE_END_ELEMENT = 52,
    WS_TRACE_API_WRITE_TEXT = 53,
    WS_TRACE_API_WRITE_START_CDATA = 54,
    WS_TRACE_API_WRITE_END_CDATA = 55,
    WS_TRACE_API_WRITE_NODE = 56,
    WS_TRACE_API_PREFIX_FROM_NAMESPACE = 57,
    WS_TRACE_API_GET_WRITER_POSITION = 58,
    WS_TRACE_API_SET_WRITER_POSITION = 59,
    WS_TRACE_API_MOVE_WRITER = 60,
    WS_TRACE_API_TRIM_XML_WHITESPACE = 61,
    WS_TRACE_API_VERIFY_XML_NCNAME = 62,
    WS_TRACE_API_XML_STRING_EQUALS = 63,
    WS_TRACE_API_NAMESPACE_FROM_PREFIX = 64,
    WS_TRACE_API_READ_QUALIFIED_NAME = 65,
    WS_TRACE_API_GET_XML_ATTRIBUTE = 66,
    WS_TRACE_API_COPY_NODE = 67,
    WS_TRACE_API_ASYNC_EXECUTE = 68,
    WS_TRACE_API_CREATE_CHANNEL = 69,
    WS_TRACE_API_OPEN_CHANNEL = 70,
    WS_TRACE_API_SEND_MESSAGE = 71,
    WS_TRACE_API_RECEIVE_MESSAGE = 72,
    WS_TRACE_API_REQUEST_REPLY = 73,
    WS_TRACE_API_SEND_REPLY_MESSAGE = 74,
    WS_TRACE_API_SEND_FAULT_MESSAGE_FOR_ERROR = 75,
    WS_TRACE_API_GET_CHANNEL_PROPERTY = 76,
    WS_TRACE_API_SET_CHANNEL_PROPERTY = 77,
    WS_TRACE_API_WRITE_MESSAGE_START = 78,
    WS_TRACE_API_WRITE_MESSAGE_END = 79,
    WS_TRACE_API_READ_MESSAGE_START = 80,
    WS_TRACE_API_READ_MESSAGE_END = 81,
    WS_TRACE_API_CLOSE_CHANNEL = 82,
    WS_TRACE_API_ABORT_CHANNEL = 83,
    WS_TRACE_API_FREE_CHANNEL = 84,
    WS_TRACE_API_RESET_CHANNEL = 85,
    WS_TRACE_API_ABANDON_MESSAGE = 86,
    WS_TRACE_API_SHUTDOWN_SESSION_CHANNEL = 87,
    WS_TRACE_API_GET_CONTEXT_PROPERTY = 88,
    WS_TRACE_API_GET_DICTIONARY = 89,
    WS_TRACE_API_READ_ENDPOINT_ADDRESS_EXTENSION = 90,
    WS_TRACE_API_CREATE_ERROR = 91,
    WS_TRACE_API_ADD_ERROR_STRING = 92,
    WS_TRACE_API_GET_ERROR_STRING = 93,
    WS_TRACE_API_COPY_ERROR = 94,
    WS_TRACE_API_GET_ERROR_PROPERTY = 95,
    WS_TRACE_API_SET_ERROR_PROPERTY = 96,
    WS_TRACE_API_RESET_ERROR = 97,
    WS_TRACE_API_FREE_ERROR = 98,
    WS_TRACE_API_GET_FAULT_ERROR_PROPERTY = 99,
    WS_TRACE_API_SET_FAULT_ERROR_PROPERTY = 100,
    WS_TRACE_API_CREATE_FAULT_FROM_ERROR = 101,
    WS_TRACE_API_SET_FAULT_ERROR_DETAIL = 102,
    WS_TRACE_API_GET_FAULT_ERROR_DETAIL = 103,
    WS_TRACE_API_CREATE_HEAP = 104,
    WS_TRACE_API_ALLOC = 105,
    WS_TRACE_API_GET_HEAP_PROPERTY = 106,
    WS_TRACE_API_RESET_HEAP = 107,
    WS_TRACE_API_FREE_HEAP = 108,
    WS_TRACE_API_CREATE_LISTENER = 109,
    WS_TRACE_API_OPEN_LISTENER = 110,
    WS_TRACE_API_ACCEPT_CHANNEL = 111,
    WS_TRACE_API_CLOSE_LISTENER = 112,
    WS_TRACE_API_ABORT_LISTENER = 113,
    WS_TRACE_API_RESET_LISTENER = 114,
    WS_TRACE_API_FREE_LISTENER = 115,
    WS_TRACE_API_GET_LISTENER_PROPERTY = 116,
    WS_TRACE_API_SET_LISTENER_PROPERTY = 117,
    WS_TRACE_API_CREATE_CHANNEL_FOR_LISTENER = 118,
    WS_TRACE_API_CREATE_MESSAGE = 119,
    WS_TRACE_API_CREATE_MESSAGE_FOR_CHANNEL = 120,
    WS_TRACE_API_INITIALIZE_MESSAGE = 121,
    WS_TRACE_API_RESET_MESSAGE = 122,
    WS_TRACE_API_FREE_MESSAGE = 123,
    WS_TRACE_API_GET_HEADER_ATTRIBUTES = 124,
    WS_TRACE_API_GET_HEADER = 125,
    WS_TRACE_API_GET_CUSTOM_HEADER = 126,
    WS_TRACE_API_REMOVE_HEADER = 127,
    WS_TRACE_API_SET_HEADER = 128,
    WS_TRACE_API_REMOVE_CUSTOM_HEADER = 129,
    WS_TRACE_API_ADD_CUSTOM_HEADER = 130,
    WS_TRACE_API_ADD_MAPPED_HEADER = 131,
    WS_TRACE_API_REMOVE_MAPPED_HEADER = 132,
    WS_TRACE_API_GET_MAPPED_HEADER = 133,
    WS_TRACE_API_WRITE_BODY = 134,
    WS_TRACE_API_READ_BODY = 135,
    WS_TRACE_API_WRITE_ENVELOPE_START = 136,
    WS_TRACE_API_WRITE_ENVELOPE_END = 137,
    WS_TRACE_API_READ_ENVELOPE_START = 138,
    WS_TRACE_API_READ_ENVELOPE_END = 139,
    WS_TRACE_API_GET_MESSAGE_PROPERTY = 140,
    WS_TRACE_API_SET_MESSAGE_PROPERTY = 141,
    WS_TRACE_API_ADDRESS_MESSAGE = 142,
    WS_TRACE_API_CHECK_MUST_UNDERSTAND_HEADERS = 143,
    WS_TRACE_API_MARK_HEADER_AS_UNDERSTOOD = 144,
    WS_TRACE_API_FILL_BODY = 145,
    WS_TRACE_API_FLUSH_BODY = 146,
    WS_TRACE_API_REQUEST_SECURITY_TOKEN = 147,
    WS_TRACE_API_GET_SECURITY_TOKEN_PROPERTY = 148,
    WS_TRACE_API_CREATE_XML_SECURITY_TOKEN = 149,
    WS_TRACE_API_FREE_SECURITY_TOKEN = 150,
    WS_TRACE_API_REVOKE_SECURITY_CONTEXT = 151,
    WS_TRACE_API_GET_SECURITY_CONTEXT_PROPERTY = 152,
    WS_TRACE_API_READ_ELEMENT_TYPE = 153,
    WS_TRACE_API_READ_ATTRIBUTE_TYPE = 154,
    WS_TRACE_API_READ_TYPE = 155,
    WS_TRACE_API_WRITE_ELEMENT_TYPE = 156,
    WS_TRACE_API_WRITE_ATTRIBUTE_TYPE = 157,
    WS_TRACE_API_WRITE_TYPE = 158,
    WS_TRACE_API_SERVICE_REGISTER_FOR_CANCEL = 159,
    WS_TRACE_API_GET_SERVICE_HOST_PROPERTY = 160,
    WS_TRACE_API_CREATE_SERVICE_HOST = 161,
    WS_TRACE_API_OPEN_SERVICE_HOST = 162,
    WS_TRACE_API_CLOSE_SERVICE_HOST = 163,
    WS_TRACE_API_ABORT_SERVICE_HOST = 164,
    WS_TRACE_API_FREE_SERVICE_HOST = 165,
    WS_TRACE_API_RESET_SERVICE_HOST = 166,
    WS_TRACE_API_GET_SERVICE_PROXY_PROPERTY = 167,
    WS_TRACE_API_CREATE_SERVICE_PROXY = 168,
    WS_TRACE_API_OPEN_SERVICE_PROXY = 169,
    WS_TRACE_API_CLOSE_SERVICE_PROXY = 170,
    WS_TRACE_API_ABORT_SERVICE_PROXY = 171,
    WS_TRACE_API_FREE_SERVICE_PROXY = 172,
    WS_TRACE_API_RESET_SERVICE_PROXY = 173,
    WS_TRACE_API_ABORT_CALL = 174,
    WS_TRACE_API_CALL = 175,
    WS_TRACE_API_DECODE_URL = 176,
    WS_TRACE_API_ENCODE_URL = 177,
    WS_TRACE_API_COMBINE_URL = 178,
    WS_TRACE_API_DATETIME_TO_FILETIME = 179,
    WS_TRACE_API_FILETIME_TO_DATETIME = 180,
    WS_TRACE_API_DUMP_MEMORY = 181,
    WS_TRACE_API_SET_AUTOFAIL = 182,
    WS_TRACE_API_CREATE_METADATA = 183,
    WS_TRACE_API_READ_METADATA = 184,
    WS_TRACE_API_FREE_METADATA = 185,
    WS_TRACE_API_RESET_METADATA = 186,
    WS_TRACE_API_GET_METADATA_PROPERTY = 187,
    WS_TRACE_API_GET_MISSING_METADATA_DOCUMENT_ADDRESS = 188,
    WS_TRACE_API_GET_METADATA_ENDPOINTS = 189,
    WS_TRACE_API_MATCH_POLICY_ALTERNATIVE = 190,
    WS_TRACE_API_GET_POLICY_PROPERTY = 191,
    WS_TRACE_API_GET_POLICY_ALTERNATIVE_COUNT = 192,
    WS_TRACE_API_WS_CREATE_SERVICE_PROXY_FROM_TEMPLATE = 193,
    WS_TRACE_API_WS_CREATE_SERVICE_HOST_FROM_TEMPLATE = 194,
} WS_TRACE_API;

typedef enum {
    WS_URL_HTTP_SCHEME_TYPE = 0,
    WS_URL_HTTPS_SCHEME_TYPE = 1,
    WS_URL_NETTCP_SCHEME_TYPE = 2,
    WS_URL_SOAPUDP_SCHEME_TYPE = 3,
    WS_URL_NETPIPE_SCHEME_TYPE = 4,
} WS_URL_SCHEME_TYPE;

typedef enum {
    WS_DATETIME_FORMAT_UTC = 0,
    WS_DATETIME_FORMAT_LOCAL = 1,
    WS_DATETIME_FORMAT_NONE = 2,
} WS_DATETIME_FORMAT;

typedef enum {
    WS_METADATA_STATE_CREATED = 1,
    WS_METADATA_STATE_RESOLVED = 2,
    WS_METADATA_STATE_FAULTED = 3,
} WS_METADATA_STATE;

typedef enum {
    WS_METADATA_PROPERTY_STATE = 1,
    WS_METADATA_PROPERTY_HEAP_PROPERTIES = 2,
    WS_METADATA_PROPERTY_POLICY_PROPERTIES = 3,
    WS_METADATA_PROPERTY_HEAP_REQUESTED_SIZE = 4,
    WS_METADATA_PROPERTY_MAX_DOCUMENTS = 5,
    WS_METADATA_PROPERTY_HOST_NAMES = 6,
    WS_METADATA_PROPERTY_VERIFY_HOST_NAMES = 7,
} WS_METADATA_PROPERTY_ID;

typedef enum {
    WS_POLICY_STATE_CREATED = 1,
    WS_POLICY_STATE_FAULTED = 2,
} WS_POLICY_STATE;

typedef enum {
    WS_POLICY_PROPERTY_STATE = 1,
    WS_POLICY_PROPERTY_MAX_ALTERNATIVES = 2,
    WS_POLICY_PROPERTY_MAX_DEPTH = 3,
    WS_POLICY_PROPERTY_MAX_EXTENSIONS = 4,
} WS_POLICY_PROPERTY_ID;

typedef enum {
    WS_SSL_TRANSPORT_SECURITY_BINDING_CONSTRAINT_TYPE = 1,
    WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_CONSTRAINT_TYPE = 2,
    WS_HTTP_HEADER_AUTH_SECURITY_BINDING_CONSTRAINT_TYPE = 3,
    WS_USERNAME_MESSAGE_SECURITY_BINDING_CONSTRAINT_TYPE = 4,
    WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_CONSTRAINT_TYPE = 5,
    WS_ISSUED_TOKEN_MESSAGE_SECURITY_BINDING_CONSTRAINT_TYPE = 6,
    WS_CERT_MESSAGE_SECURITY_BINDING_CONSTRAINT_TYPE = 7,
    WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_CONSTRAINT_TYPE = 8,
} WS_SECURITY_BINDING_CONSTRAINT_TYPE;

typedef enum {
    WS_ENDPOINT_POLICY_EXTENSION_TYPE = 1,
} WS_POLICY_EXTENSION_TYPE;

typedef enum {
    WS_HTTP_BINDING_TEMPLATE_TYPE = 0,
    WS_HTTP_SSL_BINDING_TEMPLATE_TYPE = 1,
    WS_HTTP_HEADER_AUTH_BINDING_TEMPLATE_TYPE = 2,
    WS_HTTP_SSL_HEADER_AUTH_BINDING_TEMPLATE_TYPE = 3,
    WS_HTTP_SSL_USERNAME_BINDING_TEMPLATE_TYPE = 4,
    WS_HTTP_SSL_KERBEROS_APREQ_BINDING_TEMPLATE_TYPE = 5,
    WS_TCP_BINDING_TEMPLATE_TYPE = 6,
    WS_TCP_SSPI_BINDING_TEMPLATE_TYPE = 7,
    WS_TCP_SSPI_USERNAME_BINDING_TEMPLATE_TYPE = 8,
    WS_TCP_SSPI_KERBEROS_APREQ_BINDING_TEMPLATE_TYPE = 9,
    WS_HTTP_SSL_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE_TYPE = 10,
    WS_HTTP_SSL_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE_TYPE = 11,
    WS_TCP_SSPI_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE_TYPE = 12,
    WS_TCP_SSPI_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE_TYPE = 13,
} WS_BINDING_TEMPLATE_TYPE;

typedef int WS_READ_CALLBACK;

typedef int WS_WRITE_CALLBACK;

typedef int WS_PUSH_BYTES_CALLBACK;

typedef int WS_PULL_BYTES_CALLBACK;

typedef int WS_DYNAMIC_STRING_CALLBACK;

typedef int WS_ASYNC_CALLBACK;

typedef int WS_ASYNC_FUNCTION;

typedef int WS_CREATE_CHANNEL_CALLBACK;

typedef int WS_FREE_CHANNEL_CALLBACK;

typedef int WS_RESET_CHANNEL_CALLBACK;

typedef int WS_ABORT_CHANNEL_CALLBACK;

typedef int WS_OPEN_CHANNEL_CALLBACK;

typedef int WS_CLOSE_CHANNEL_CALLBACK;

typedef int WS_SET_CHANNEL_PROPERTY_CALLBACK;

typedef int WS_GET_CHANNEL_PROPERTY_CALLBACK;

typedef int WS_READ_MESSAGE_START_CALLBACK;

typedef int WS_READ_MESSAGE_END_CALLBACK;

typedef int WS_WRITE_MESSAGE_START_CALLBACK;

typedef int WS_WRITE_MESSAGE_END_CALLBACK;

typedef int WS_ABANDON_MESSAGE_CALLBACK;

typedef int WS_SHUTDOWN_SESSION_CHANNEL_CALLBACK;

typedef int WS_CREATE_ENCODER_CALLBACK;

typedef int WS_ENCODER_GET_CONTENT_TYPE_CALLBACK;

typedef int WS_ENCODER_START_CALLBACK;

typedef int WS_ENCODER_ENCODE_CALLBACK;

typedef int WS_ENCODER_END_CALLBACK;

typedef int WS_FREE_ENCODER_CALLBACK;

typedef int WS_CREATE_DECODER_CALLBACK;

typedef int WS_DECODER_GET_CONTENT_TYPE_CALLBACK;

typedef int WS_DECODER_START_CALLBACK;

typedef int WS_DECODER_DECODE_CALLBACK;

typedef int WS_DECODER_END_CALLBACK;

typedef int WS_FREE_DECODER_CALLBACK;

typedef int WS_HTTP_REDIRECT_CALLBACK;

typedef int WS_CREATE_LISTENER_CALLBACK;

typedef int WS_FREE_LISTENER_CALLBACK;

typedef int WS_RESET_LISTENER_CALLBACK;

typedef int WS_OPEN_LISTENER_CALLBACK;

typedef int WS_CLOSE_LISTENER_CALLBACK;

typedef int WS_GET_LISTENER_PROPERTY_CALLBACK;

typedef int WS_SET_LISTENER_PROPERTY_CALLBACK;

typedef int WS_ACCEPT_CHANNEL_CALLBACK;

typedef int WS_ABORT_LISTENER_CALLBACK;

typedef int WS_CREATE_CHANNEL_FOR_LISTENER_CALLBACK;

typedef int WS_MESSAGE_DONE_CALLBACK;

typedef int WS_CERTIFICATE_VALIDATION_CALLBACK;

typedef int WS_GET_CERT_CALLBACK;

typedef int WS_CERT_ISSUER_LIST_NOTIFICATION_CALLBACK;

typedef int WS_VALIDATE_PASSWORD_CALLBACK;

typedef int WS_VALIDATE_SAML_CALLBACK;

typedef int WS_DURATION_COMPARISON_CALLBACK;

typedef int WS_READ_TYPE_CALLBACK;

typedef int WS_WRITE_TYPE_CALLBACK;

typedef int WS_IS_DEFAULT_VALUE_CALLBACK;

typedef int WS_SERVICE_MESSAGE_RECEIVE_CALLBACK;

typedef int WS_OPERATION_CANCEL_CALLBACK;

typedef int WS_OPERATION_FREE_STATE_CALLBACK;

typedef int WS_SERVICE_STUB_CALLBACK;

typedef int WS_SERVICE_ACCEPT_CHANNEL_CALLBACK;

typedef int WS_SERVICE_CLOSE_CHANNEL_CALLBACK;

typedef int WS_SERVICE_SECURITY_CALLBACK;

typedef int WS_PROXY_MESSAGE_CALLBACK;

typedef int WS_XML_DICTIONARY;

typedef int WS_XML_STRING;

typedef int WS_XML_QNAME;

typedef int WS_XML_NODE_POSITION;

typedef int WS_XML_READER_PROPERTY;

typedef int WS_XML_CANONICALIZATION_INCLUSIVE_PREFIXES;

typedef int WS_XML_CANONICALIZATION_PROPERTY;

typedef int WS_XML_WRITER_PROPERTY;

typedef int WS_XML_BUFFER_PROPERTY;

typedef int WS_XML_TEXT;

typedef int WS_XML_UTF8_TEXT;

typedef int WS_XML_UTF16_TEXT;

typedef int WS_XML_BASE64_TEXT;

typedef int WS_XML_BOOL_TEXT;

typedef int WS_XML_INT32_TEXT;

typedef int WS_XML_INT64_TEXT;

typedef int WS_XML_UINT64_TEXT;

typedef int WS_XML_FLOAT_TEXT;

typedef int WS_XML_DOUBLE_TEXT;

typedef int WS_XML_DECIMAL_TEXT;

typedef int WS_XML_GUID_TEXT;

typedef int WS_XML_UNIQUE_ID_TEXT;

typedef int WS_DATETIME;

typedef int WS_XML_DATETIME_TEXT;

typedef int WS_TIMESPAN;

typedef int WS_XML_TIMESPAN_TEXT;

typedef int WS_XML_QNAME_TEXT;

typedef int WS_XML_LIST_TEXT;

typedef int WS_XML_NODE;

typedef int WS_XML_ATTRIBUTE;

typedef int WS_XML_ELEMENT_NODE;

typedef int WS_XML_TEXT_NODE;

typedef int WS_XML_COMMENT_NODE;

typedef int WS_XML_READER_INPUT;

typedef int WS_XML_READER_BUFFER_INPUT;

typedef int WS_XML_READER_STREAM_INPUT;

typedef int WS_XML_READER_ENCODING;

typedef int WS_XML_READER_TEXT_ENCODING;

typedef int WS_XML_READER_BINARY_ENCODING;

typedef int WS_STRING;

typedef int WS_XML_READER_MTOM_ENCODING;

typedef int WS_XML_READER_RAW_ENCODING;

typedef int WS_XML_WRITER_ENCODING;

typedef int WS_XML_WRITER_TEXT_ENCODING;

typedef int WS_XML_WRITER_BINARY_ENCODING;

typedef int WS_XML_WRITER_MTOM_ENCODING;

typedef int WS_XML_WRITER_RAW_ENCODING;

typedef int WS_XML_WRITER_OUTPUT;

typedef int WS_XML_WRITER_BUFFER_OUTPUT;

typedef int WS_XML_WRITER_STREAM_OUTPUT;

typedef int WS_XML_WRITER_PROPERTIES;

typedef int WS_XML_READER_PROPERTIES;

typedef int WS_ASYNC_CONTEXT;

typedef int WS_ASYNC_STATE;

typedef int WS_ASYNC_OPERATION;

typedef int WS_CHANNEL_PROPERTY;

typedef int WS_CUSTOM_HTTP_PROXY;

typedef int WS_CHANNEL_PROPERTIES;

typedef int WS_CUSTOM_CHANNEL_CALLBACKS;

typedef int WS_HTTP_HEADER_MAPPING;

typedef int WS_HTTP_MESSAGE_MAPPING;

typedef int WS_ELEMENT_DESCRIPTION;

typedef int WS_MESSAGE_DESCRIPTION;

typedef int WS_CHANNEL_ENCODER;

typedef int WS_CHANNEL_DECODER;

typedef int WS_HTTP_REDIRECT_CALLBACK_CONTEXT;

typedef int WS_ENDPOINT_IDENTITY;

typedef int WS_ENDPOINT_ADDRESS;

typedef int WS_DNS_ENDPOINT_IDENTITY;

typedef int WS_UPN_ENDPOINT_IDENTITY;

typedef int WS_SPN_ENDPOINT_IDENTITY;

typedef int WS_BYTES;

typedef int WS_RSA_ENDPOINT_IDENTITY;

typedef int WS_CERT_ENDPOINT_IDENTITY;

typedef int WS_UNKNOWN_ENDPOINT_IDENTITY;

typedef int WS_ERROR_PROPERTY;

typedef int WS_FAULT_REASON;

typedef int WS_FAULT_CODE;

typedef int WS_FAULT;

typedef int WS_FAULT_DETAIL_DESCRIPTION;

typedef int WS_HEAP_PROPERTY;

typedef int WS_HEAP_PROPERTIES;

typedef int WS_LISTENER_PROPERTY;

typedef int WS_DISALLOWED_USER_AGENT_SUBSTRINGS;

typedef int WS_LISTENER_PROPERTIES;

typedef int WS_HOST_NAMES;

typedef int WS_CUSTOM_LISTENER_CALLBACKS;

typedef int WS_MESSAGE_PROPERTY;

typedef int WS_MESSAGE_PROPERTIES;

typedef int WS_SECURITY_ALGORITHM_PROPERTY;

typedef int WS_SECURITY_ALGORITHM_SUITE;

typedef int WS_SECURITY_PROPERTY;

typedef int WS_SECURITY_PROPERTIES;

typedef int WS_SECURITY_BINDING_PROPERTY;

typedef int WS_SECURITY_BINDING_PROPERTIES;

typedef int WS_SERVICE_SECURITY_IDENTITIES;

typedef int WS_CERTIFICATE_VALIDATION_CALLBACK_CONTEXT;

typedef int WS_CERT_CREDENTIAL;

typedef int WS_SUBJECT_NAME_CERT_CREDENTIAL;

typedef int WS_THUMBPRINT_CERT_CREDENTIAL;

typedef int WS_CUSTOM_CERT_CREDENTIAL;

typedef int WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL;

typedef int WS_STRING_WINDOWS_INTEGRATED_AUTH_CREDENTIAL;

typedef int WS_DEFAULT_WINDOWS_INTEGRATED_AUTH_CREDENTIAL;

typedef int WS_OPAQUE_WINDOWS_INTEGRATED_AUTH_CREDENTIAL;

typedef int WS_USERNAME_CREDENTIAL;

typedef int WS_STRING_USERNAME_CREDENTIAL;

typedef int WS_SECURITY_KEY_HANDLE;

typedef int WS_RAW_SYMMETRIC_SECURITY_KEY_HANDLE;

typedef int WS_NCRYPT_ASYMMETRIC_SECURITY_KEY_HANDLE;

typedef int WS_CAPI_ASYMMETRIC_SECURITY_KEY_HANDLE;

typedef int WS_SECURITY_BINDING;

typedef int WS_SSL_TRANSPORT_SECURITY_BINDING;

typedef int WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING;

typedef int WS_NAMEDPIPE_SSPI_TRANSPORT_SECURITY_BINDING;

typedef int WS_HTTP_HEADER_AUTH_SECURITY_BINDING;

typedef int WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING;

typedef int WS_USERNAME_MESSAGE_SECURITY_BINDING;

typedef int WS_SECURITY_DESCRIPTION;

typedef int WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING;

typedef int WS_SECURITY_CONTEXT_PROPERTY;

typedef int WS_XML_SECURITY_TOKEN_PROPERTY;

typedef int WS_XML_TOKEN_MESSAGE_SECURITY_BINDING;

typedef int WS_SAML_AUTHENTICATOR;

typedef int WS_CERT_SIGNED_SAML_AUTHENTICATOR;

typedef int WS_SAML_MESSAGE_SECURITY_BINDING;

typedef int WS_REQUEST_SECURITY_TOKEN_PROPERTY;

typedef int WS_ANY_ATTRIBUTE;

typedef int WS_ANY_ATTRIBUTES;

typedef int WS_BOOL_DESCRIPTION;

typedef int WS_GUID_DESCRIPTION;

typedef int WS_DATETIME_DESCRIPTION;

typedef int WS_DURATION;

typedef int WS_DURATION_DESCRIPTION;

typedef int WS_TIMESPAN_DESCRIPTION;

typedef int WS_UNIQUE_ID_DESCRIPTION;

typedef int WS_STRING_DESCRIPTION;

typedef int WS_XML_STRING_DESCRIPTION;

typedef int WS_XML_QNAME_DESCRIPTION;

typedef int WS_CHAR_ARRAY_DESCRIPTION;

typedef int WS_BYTE_ARRAY_DESCRIPTION;

typedef int WS_UTF8_ARRAY_DESCRIPTION;

typedef int WS_WSZ_DESCRIPTION;

typedef int WS_INT8_DESCRIPTION;

typedef int WS_UINT8_DESCRIPTION;

typedef int WS_INT16_DESCRIPTION;

typedef int WS_UINT16_DESCRIPTION;

typedef int WS_INT32_DESCRIPTION;

typedef int WS_UINT32_DESCRIPTION;

typedef int WS_INT64_DESCRIPTION;

typedef int WS_UINT64_DESCRIPTION;

typedef int WS_FLOAT_DESCRIPTION;

typedef int WS_DOUBLE_DESCRIPTION;

typedef int WS_DECIMAL_DESCRIPTION;

typedef int WS_BYTES_DESCRIPTION;

typedef int WS_ENUM_VALUE;

typedef int WS_ENUM_DESCRIPTION;

typedef int WS_ITEM_RANGE;

typedef int WS_DEFAULT_VALUE;

typedef int WS_FIELD_DESCRIPTION;

typedef int WS_UNION_FIELD_DESCRIPTION;

typedef int WS_STRUCT_DESCRIPTION;

typedef int WS_UNION_DESCRIPTION;

typedef int WS_ENDPOINT_ADDRESS_DESCRIPTION;

typedef int WS_FAULT_DESCRIPTION;

typedef int WS_VOID_DESCRIPTION;

typedef int WS_CUSTOM_TYPE_DESCRIPTION;

typedef int WS_ATTRIBUTE_DESCRIPTION;

typedef int WS_PARAMETER_DESCRIPTION;

typedef int WS_OPERATION_DESCRIPTION;

typedef int WS_CONTRACT_DESCRIPTION;

typedef int WS_SERVICE_CONTRACT;

typedef int WS_SERVICE_PROPERTY;

typedef int WS_SERVICE_ENDPOINT_PROPERTY;

typedef int WS_SERVICE_PROPERTY_ACCEPT_CALLBACK;

typedef int WS_SERVICE_METADATA_DOCUMENT;

typedef int WS_SERVICE_METADATA;

typedef int WS_SERVICE_PROPERTY_CLOSE_CALLBACK;

typedef int WS_SERVICE_ENDPOINT_METADATA;

typedef int WS_SERVICE_ENDPOINT;

typedef int WS_PROXY_PROPERTY;

typedef int WS_PROXY_MESSAGE_CALLBACK_CONTEXT;

typedef int WS_CALL_PROPERTY;

typedef int WS_URL;

typedef int WS_HTTP_URL;

typedef int WS_HTTPS_URL;

typedef int WS_NETTCP_URL;

typedef int WS_SOAPUDP_URL;

typedef int WS_NETPIPE_URL;

typedef int WS_UNIQUE_ID;

typedef int WS_BUFFERS;

typedef int WS_METADATA_ENDPOINT;

typedef int WS_METADATA_ENDPOINTS;

typedef int WS_METADATA_PROPERTY;

typedef int WS_POLICY_PROPERTY;

typedef int WS_POLICY_PROPERTIES;

typedef int WS_SECURITY_BINDING_PROPERTY_CONSTRAINT;

typedef int WS_SECURITY_BINDING_CONSTRAINT;

typedef int WS_SSL_TRANSPORT_SECURITY_BINDING_CONSTRAINT;

typedef int WS_USERNAME_MESSAGE_SECURITY_BINDING_CONSTRAINT;

typedef int WS_HTTP_HEADER_AUTH_SECURITY_BINDING_CONSTRAINT;

typedef int WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_CONSTRAINT;

typedef int WS_CERT_MESSAGE_SECURITY_BINDING_CONSTRAINT;

typedef int WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_CONSTRAINT;

typedef int WS_REQUEST_SECURITY_TOKEN_PROPERTY_CONSTRAINT;

typedef int WS_ISSUED_TOKEN_MESSAGE_SECURITY_BINDING_CONSTRAINT;

typedef int WS_SECURITY_PROPERTY_CONSTRAINT;

typedef int WS_SECURITY_CONSTRAINTS;

typedef int WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_CONSTRAINT;

typedef int WS_CHANNEL_PROPERTY_CONSTRAINT;

typedef int WS_POLICY_EXTENSION;

typedef int WS_ENDPOINT_POLICY_EXTENSION;

typedef int WS_POLICY_CONSTRAINTS;

typedef int WS_HTTP_POLICY_DESCRIPTION;

typedef int WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION;

typedef int WS_HTTP_SSL_POLICY_DESCRIPTION;

typedef int WS_HTTP_HEADER_AUTH_SECURITY_BINDING_POLICY_DESCRIPTION;

typedef int WS_HTTP_HEADER_AUTH_POLICY_DESCRIPTION;

typedef int WS_HTTP_SSL_HEADER_AUTH_POLICY_DESCRIPTION;

typedef int WS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION;

typedef int WS_HTTP_SSL_USERNAME_POLICY_DESCRIPTION;

typedef int WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION;

typedef int WS_HTTP_SSL_KERBEROS_APREQ_POLICY_DESCRIPTION;

typedef int WS_TCP_POLICY_DESCRIPTION;

typedef int WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION;

typedef int WS_TCP_SSPI_POLICY_DESCRIPTION;

typedef int WS_TCP_SSPI_USERNAME_POLICY_DESCRIPTION;

typedef int WS_TCP_SSPI_KERBEROS_APREQ_POLICY_DESCRIPTION;

typedef int WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION;

typedef int WS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION;

typedef int WS_TCP_SSPI_KERBEROS_APREQ_SECURITY_CONTEXT_POLICY_DESCRIPTION;

typedef int WS_TCP_SSPI_USERNAME_SECURITY_CONTEXT_POLICY_DESCRIPTION;

typedef int WS_HTTP_SSL_USERNAME_SECURITY_CONTEXT_POLICY_DESCRIPTION;

typedef int WS_HTTP_SSL_KERBEROS_APREQ_SECURITY_CONTEXT_POLICY_DESCRIPTION;

typedef int WS_HTTP_BINDING_TEMPLATE;

typedef int WS_TCP_BINDING_TEMPLATE;

typedef int WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE;

typedef int WS_HTTP_SSL_BINDING_TEMPLATE;

typedef int WS_HTTP_HEADER_AUTH_SECURITY_BINDING_TEMPLATE;

typedef int WS_HTTP_HEADER_AUTH_BINDING_TEMPLATE;

typedef int WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE;

typedef int WS_TCP_SSPI_BINDING_TEMPLATE;

typedef int WS_HTTP_SSL_HEADER_AUTH_BINDING_TEMPLATE;

typedef int WS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE;

typedef int WS_HTTP_SSL_USERNAME_BINDING_TEMPLATE;

typedef int WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE;

typedef int WS_HTTP_SSL_KERBEROS_APREQ_BINDING_TEMPLATE;

typedef int WS_TCP_SSPI_USERNAME_BINDING_TEMPLATE;

typedef int WS_TCP_SSPI_KERBEROS_APREQ_BINDING_TEMPLATE;

typedef int WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_TEMPLATE;

typedef int WS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE;

typedef int WS_HTTP_SSL_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE;

typedef int WS_HTTP_SSL_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE;

typedef int WS_TCP_SSPI_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE;

typedef int WS_TCP_SSPI_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE;

// TODO: this type is limited to platform 'windows8.1'
typedef int IContentPrefetcherTaskTrigger;

typedef int WEBAUTHN_RP_ENTITY_INFORMATION;

typedef int WEBAUTHN_USER_ENTITY_INFORMATION;

typedef int WEBAUTHN_CLIENT_DATA;

typedef int WEBAUTHN_COSE_CREDENTIAL_PARAMETER;

typedef int WEBAUTHN_COSE_CREDENTIAL_PARAMETERS;

typedef int WEBAUTHN_CREDENTIAL;

typedef int WEBAUTHN_CREDENTIALS;

typedef int WEBAUTHN_CREDENTIAL_EX;

typedef int WEBAUTHN_CREDENTIAL_LIST;

typedef int WEBAUTHN_CRED_PROTECT_EXTENSION_IN;

typedef int WEBAUTHN_EXTENSION;

typedef int WEBAUTHN_EXTENSIONS;

typedef int WEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS;

typedef int WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS;

typedef int WEBAUTHN_X5C;

typedef int WEBAUTHN_COMMON_ATTESTATION;

typedef int WEBAUTHN_CREDENTIAL_ATTESTATION;

typedef int WEBAUTHN_ASSERTION;


//--------------------------------------------------------------------------------
// Section: Functions (203)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsStartReaderCanonicalization();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsEndReaderCanonicalization();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsStartWriterCanonicalization();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsEndWriterCanonicalization();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsCreateXmlBuffer();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsRemoveNode();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsCreateReader();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsSetInput();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsSetInputToBuffer();

// TODO: this type is limited to platform 'windows6.1'
/*void*/void WsFreeReader();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsGetReaderProperty();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsGetReaderNode();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsFillReader();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsReadStartElement();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsReadToStartElement();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsReadStartAttribute();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsReadEndAttribute();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsReadNode();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsSkipNode();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsReadEndElement();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsFindAttribute();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsReadValue();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsReadChars();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsReadCharsUtf8();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsReadBytes();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsReadArray();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsGetReaderPosition();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsSetReaderPosition();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsMoveReader();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsCreateWriter();

// TODO: this type is limited to platform 'windows6.1'
/*void*/void WsFreeWriter();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsSetOutput();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsSetOutputToBuffer();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsGetWriterProperty();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsFlushWriter();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsWriteStartElement();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsWriteEndStartElement();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsWriteXmlnsAttribute();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsWriteStartAttribute();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsWriteEndAttribute();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsWriteValue();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsWriteXmlBuffer();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsReadXmlBuffer();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsWriteXmlBufferToBytes();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsReadXmlBufferFromBytes();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsWriteArray();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsWriteQualifiedName();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsWriteChars();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsWriteCharsUtf8();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsWriteBytes();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsPushBytes();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsPullBytes();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsWriteEndElement();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsWriteText();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsWriteStartCData();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsWriteEndCData();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsWriteNode();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsGetPrefixFromNamespace();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsGetWriterPosition();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsSetWriterPosition();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsMoveWriter();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsTrimXmlWhitespace();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsVerifyXmlNCName();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsXmlStringEquals();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsGetNamespaceFromPrefix();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsReadQualifiedName();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsGetXmlAttribute();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsCopyNode();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsAsyncExecute();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsCreateChannel();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsOpenChannel();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsSendMessage();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsReceiveMessage();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsRequestReply();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsSendReplyMessage();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsSendFaultMessageForError();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsGetChannelProperty();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsSetChannelProperty();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsWriteMessageStart();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsWriteMessageEnd();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsReadMessageStart();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsReadMessageEnd();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsCloseChannel();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsAbortChannel();

// TODO: this type is limited to platform 'windows6.1'
/*void*/void WsFreeChannel();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsResetChannel();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsAbandonMessage();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsShutdownSessionChannel();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsGetOperationContextProperty();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsGetDictionary();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsReadEndpointAddressExtension();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsCreateError();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsAddErrorString();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsGetErrorString();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsCopyError();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsGetErrorProperty();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsSetErrorProperty();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsResetError();

// TODO: this type is limited to platform 'windows6.1'
/*void*/void WsFreeError();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsGetFaultErrorProperty();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsSetFaultErrorProperty();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsCreateFaultFromError();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsSetFaultErrorDetail();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsGetFaultErrorDetail();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsCreateHeap();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsAlloc();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsGetHeapProperty();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsResetHeap();

// TODO: this type is limited to platform 'windows6.1'
/*void*/void WsFreeHeap();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsCreateListener();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsOpenListener();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsAcceptChannel();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsCloseListener();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsAbortListener();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsResetListener();

// TODO: this type is limited to platform 'windows6.1'
/*void*/void WsFreeListener();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsGetListenerProperty();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsSetListenerProperty();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsCreateChannelForListener();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsCreateMessage();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsCreateMessageForChannel();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsInitializeMessage();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsResetMessage();

// TODO: this type is limited to platform 'windows6.1'
/*void*/void WsFreeMessage();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsGetHeaderAttributes();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsGetHeader();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsGetCustomHeader();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsRemoveHeader();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsSetHeader();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsRemoveCustomHeader();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsAddCustomHeader();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsAddMappedHeader();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsRemoveMappedHeader();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsGetMappedHeader();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsWriteBody();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsReadBody();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsWriteEnvelopeStart();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsWriteEnvelopeEnd();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsReadEnvelopeStart();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsReadEnvelopeEnd();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsGetMessageProperty();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsSetMessageProperty();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsAddressMessage();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsCheckMustUnderstandHeaders();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsMarkHeaderAsUnderstood();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsFillBody();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsFlushBody();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsRequestSecurityToken();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsGetSecurityTokenProperty();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsCreateXmlSecurityToken();

// TODO: this type is limited to platform 'windows6.1'
/*void*/void WsFreeSecurityToken();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsRevokeSecurityContext();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsGetSecurityContextProperty();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsReadElement();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsReadAttribute();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsReadType();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsWriteElement();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsWriteAttribute();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsWriteType();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsRegisterOperationForCancel();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsGetServiceHostProperty();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsCreateServiceHost();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsOpenServiceHost();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsCloseServiceHost();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsAbortServiceHost();

// TODO: this type is limited to platform 'windows6.1'
/*void*/void WsFreeServiceHost();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsResetServiceHost();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsGetServiceProxyProperty();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsCreateServiceProxy();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsOpenServiceProxy();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsCloseServiceProxy();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsAbortServiceProxy();

// TODO: this type is limited to platform 'windows6.1'
/*void*/void WsFreeServiceProxy();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsResetServiceProxy();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsAbandonCall();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsCall();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsDecodeUrl();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsEncodeUrl();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsCombineUrl();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsDateTimeToFileTime();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsFileTimeToDateTime();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsCreateMetadata();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsReadMetadata();

// TODO: this type is limited to platform 'windows6.1'
/*void*/void WsFreeMetadata();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsResetMetadata();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsGetMetadataProperty();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsGetMissingMetadataDocumentAddress();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsGetMetadataEndpoints();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsMatchPolicyAlternative();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsGetPolicyProperty();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsGetPolicyAlternativeCount();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsCreateServiceProxyFromTemplate();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WsCreateServiceEndpointFromTemplate();

/*u32*/void WebAuthNGetApiVersionNumber();

/*HRESULT*/void WebAuthNIsUserVerifyingPlatformAuthenticatorAvailable();

/*HRESULT*/void WebAuthNAuthenticatorMakeCredential();

/*HRESULT*/void WebAuthNAuthenticatorGetAssertion();

/*void*/void WebAuthNFreeCredentialAttestation();

/*void*/void WebAuthNFreeAssertion();

/*HRESULT*/void WebAuthNGetCancellationId();

/*HRESULT*/void WebAuthNCancelCurrentOperation();

/*PWSTR*/void WebAuthNGetErrorName();

/*HRESULT*/void WebAuthNGetW3CExceptionDOMError();

