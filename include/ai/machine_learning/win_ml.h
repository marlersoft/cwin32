// NOTE: this file is autogenerated, DO NOT MODIFY
#include "../../bootstrap.h"
//--------------------------------------------------------------------------------
// Section: Constants (1)
//--------------------------------------------------------------------------------
#define WINML_TENSOR_DIMENSION_COUNT_MAX (UINT)4

//--------------------------------------------------------------------------------
// Section: Types (47)
//--------------------------------------------------------------------------------
typedef enum {
    WINML_TENSOR_UNDEFINED = 0,
    WINML_TENSOR_FLOAT = 1,
    WINML_TENSOR_UINT8 = 2,
    WINML_TENSOR_INT8 = 3,
    WINML_TENSOR_UINT16 = 4,
    WINML_TENSOR_INT16 = 5,
    WINML_TENSOR_INT32 = 6,
    WINML_TENSOR_INT64 = 7,
    WINML_TENSOR_STRING = 8,
    WINML_TENSOR_BOOLEAN = 9,
    WINML_TENSOR_FLOAT16 = 10,
    WINML_TENSOR_DOUBLE = 11,
    WINML_TENSOR_UINT32 = 12,
    WINML_TENSOR_UINT64 = 13,
    WINML_TENSOR_COMPLEX64 = 14,
    WINML_TENSOR_COMPLEX128 = 15,
} WINML_TENSOR_DATA_TYPE;

typedef enum {
    WINML_FEATURE_UNDEFINED = 0,
    WINML_FEATURE_TENSOR = 1,
    WINML_FEATURE_SEQUENCE = 2,
    WINML_FEATURE_MAP = 3,
    WINML_FEATURE_IMAGE = 4,
} WINML_FEATURE_TYPE;

typedef enum {
    WINML_BINDING_UNDEFINED = 0,
    WINML_BINDING_TENSOR = 1,
    WINML_BINDING_SEQUENCE = 2,
    WINML_BINDING_MAP = 3,
    WINML_BINDING_IMAGE = 4,
    WINML_BINDING_RESOURCE = 5,
} WINML_BINDING_TYPE;

typedef int WINML_TENSOR_BINDING_DESC;

typedef int WINML_SEQUENCE_BINDING_DESC;

typedef int WINML_MAP_BINDING_DESC;

typedef int WINML_IMAGE_BINDING_DESC;

typedef int WINML_RESOURCE_BINDING_DESC;

typedef int WINML_BINDING_DESC;

typedef int WINML_TENSOR_VARIABLE_DESC;

typedef int WINML_SEQUENCE_VARIABLE_DESC;

typedef int WINML_MAP_VARIABLE_DESC;

typedef int WINML_IMAGE_VARIABLE_DESC;

typedef int WINML_VARIABLE_DESC;

typedef int WINML_MODEL_DESC;

// TODO: this type is limited to platform 'windows10.0.17134'
typedef int IWinMLModel;

// TODO: this type is limited to platform 'windows10.0.17134'
typedef int IWinMLEvaluationContext;

// TODO: this type is limited to platform 'windows10.0.17134'
typedef int IWinMLRuntime;

typedef enum {
    WINML_RUNTIME_CNTK = 0,
} WINML_RUNTIME_TYPE;

// TODO: this type is limited to platform 'windows10.0.17134'
typedef int IWinMLRuntimeFactory;

typedef enum {
    Undefined = 0,
    Float = 2,
    Int = 3,
    String = 4,
    FloatArray = 7,
    IntArray = 8,
    StringArray = 9,
} MLOperatorAttributeType;
// NOTE: not creating aliases because this enum is 'Scoped'

typedef enum {
    Undefined = 0,
    Float = 1,
    UInt8 = 2,
    Int8 = 3,
    UInt16 = 4,
    Int16 = 5,
    Int32 = 6,
    Int64 = 7,
    String = 8,
    Bool = 9,
    Float16 = 10,
    Double = 11,
    UInt32 = 12,
    UInt64 = 13,
    Complex64 = 14,
    Complex128 = 15,
} MLOperatorTensorDataType;
// NOTE: not creating aliases because this enum is 'Scoped'

typedef enum {
    Undefined = 0,
    Tensor = 1,
} MLOperatorEdgeType;
// NOTE: not creating aliases because this enum is 'Scoped'

typedef int MLOperatorEdgeDescription;

typedef int IMLOperatorAttributes;

typedef int IMLOperatorTensorShapeDescription;

typedef int IMLOperatorKernelCreationContext;

typedef int IMLOperatorTensor;

typedef int IMLOperatorKernelContext;

typedef int IMLOperatorKernel;

typedef enum {
    Single = 0,
    Optional = 1,
    Variadic = 2,
} MLOperatorParameterOptions;
// NOTE: not creating aliases because this enum is 'Scoped'

typedef enum {
    EdgeDescription = 0,
    Label = 1,
} MLOperatorSchemaEdgeTypeFormat;
// NOTE: not creating aliases because this enum is 'Scoped'

typedef int MLOperatorSchemaEdgeDescription;

typedef int MLOperatorEdgeTypeConstraint;

typedef int IMLOperatorShapeInferenceContext;

typedef int IMLOperatorTypeInferenceContext;

typedef int IMLOperatorTypeInferrer;

typedef int IMLOperatorShapeInferrer;

typedef int MLOperatorAttribute;

typedef int MLOperatorAttributeNameValue;

typedef int MLOperatorSchemaDescription;

typedef int MLOperatorSetId;

typedef enum {
    None = 0,
    AllowDynamicInputShapes = 1,
} MLOperatorKernelOptions;
// NOTE: not creating aliases because this enum is 'Scoped'

typedef enum {
    Undefined = 0,
    Cpu = 1,
    D3D12 = 2,
} MLOperatorExecutionType;
// NOTE: not creating aliases because this enum is 'Scoped'

typedef int MLOperatorKernelDescription;

typedef int IMLOperatorKernelFactory;

typedef int IMLOperatorRegistry;


//--------------------------------------------------------------------------------
// Section: Functions (2)
//--------------------------------------------------------------------------------
/*HRESULT*/void WinMLCreateRuntime();

/*HRESULT*/void MLCreateOperatorRegistry();

