// NOTE: this file is autogenerated, DO NOT MODIFY
#include "../bootstrap.h"
//--------------------------------------------------------------------------------
// Section: Constants (62)
//--------------------------------------------------------------------------------
#define DRMHANDLE_INVALID (UINT)0
#define DRMENVHANDLE_INVALID (UINT)0
#define DRMQUERYHANDLE_INVALID (UINT)0
#define DRMHSESSION_INVALID (UINT)0
#define DRMPUBHANDLE_INVALID (UINT)0
#define DRM_AL_NONSILENT (UINT)1
#define DRM_AL_NOPERSIST (UINT)2
#define DRM_AL_CANCEL (UINT)4
#define DRM_AL_FETCHNOADVISORY (UINT)8
#define DRM_AL_NOUI (UINT)16
#define DRM_ACTIVATE_MACHINE (UINT)1
#define DRM_ACTIVATE_GROUPIDENTITY (UINT)2
#define DRM_ACTIVATE_TEMPORARY (UINT)4
#define DRM_ACTIVATE_CANCEL (UINT)8
#define DRM_ACTIVATE_SILENT (UINT)16
#define DRM_ACTIVATE_SHARED_GROUPIDENTITY (UINT)32
#define DRM_ACTIVATE_DELAYED (UINT)64
#define DRM_EL_MACHINE (UINT)1
#define DRM_EL_GROUPIDENTITY (UINT)2
#define DRM_EL_GROUPIDENTITY_NAME (UINT)4
#define DRM_EL_GROUPIDENTITY_LID (UINT)8
#define DRM_EL_SPECIFIED_GROUPIDENTITY (UINT)16
#define DRM_EL_EUL (UINT)32
#define DRM_EL_EUL_LID (UINT)64
#define DRM_EL_CLIENTLICENSOR (UINT)128
#define DRM_EL_CLIENTLICENSOR_LID (UINT)256
#define DRM_EL_SPECIFIED_CLIENTLICENSOR (UINT)512
#define DRM_EL_REVOCATIONLIST (UINT)1024
#define DRM_EL_REVOCATIONLIST_LID (UINT)2048
#define DRM_EL_EXPIRED (UINT)4096
#define DRM_EL_ISSUERNAME (UINT)8192
#define DRM_EL_ISSUANCELICENSE_TEMPLATE (UINT)16384
#define DRM_EL_ISSUANCELICENSE_TEMPLATE_LID (UINT)32768
#define DRM_ADD_LICENSE_NOPERSIST (UINT)0
#define DRM_ADD_LICENSE_PERSIST (UINT)1
#define DRM_SERVICE_TYPE_ACTIVATION (UINT)1
#define DRM_SERVICE_TYPE_CERTIFICATION (UINT)2
#define DRM_SERVICE_TYPE_PUBLISHING (UINT)4
#define DRM_SERVICE_TYPE_CLIENTLICENSOR (UINT)8
#define DRM_SERVICE_TYPE_SILENT (UINT)16
#define DRM_SERVICE_LOCATION_INTERNET (UINT)1
#define DRM_SERVICE_LOCATION_ENTERPRISE (UINT)2
#define DRM_SIGN_ONLINE (UINT)1
#define DRM_SIGN_OFFLINE (UINT)2
#define DRM_SIGN_CANCEL (UINT)4
#define DRM_SERVER_ISSUANCELICENSE (UINT)8
#define DRM_AUTO_GENERATE_KEY (UINT)16
#define DRM_OWNER_LICENSE_NOPERSIST (UINT)32
#define DRM_REUSE_KEY (UINT)64
#define DRM_LOCKBOXTYPE_NONE (UINT)0
#define DRM_LOCKBOXTYPE_WHITEBOX (UINT)1
#define DRM_LOCKBOXTYPE_BLACKBOX (UINT)2
#define DRM_AILT_NONSILENT (UINT)1
#define DRM_AILT_OBTAIN_ALL (UINT)2
#define DRM_AILT_CANCEL (UINT)4
#define DRMIDVERSION (UINT)0
#define DRMBOUNDLICENSEPARAMSVERSION (UINT)1
#define DRMBINDINGFLAGS_IGNORE_VALIDITY_INTERVALS (UINT)1
#define DRMLICENSEACQDATAVERSION (UINT)0
#define DRMACTSERVINFOVERSION (UINT)0
#define DRMCLIENTSTRUCTVERSION (UINT)1
#define DRMCALLBACKVERSION (UINT)1

//--------------------------------------------------------------------------------
// Section: Types (15)
//--------------------------------------------------------------------------------
typedef int DRMID;

typedef enum {
    DRMTIMETYPE_SYSTEMUTC = 0,
    DRMTIMETYPE_SYSTEMLOCAL = 1,
} DRMTIMETYPE;

typedef enum {
    DRMENCODINGTYPE_BASE64 = 0,
    DRMENCODINGTYPE_STRING = 1,
    DRMENCODINGTYPE_LONG = 2,
    DRMENCODINGTYPE_TIME = 3,
    DRMENCODINGTYPE_UINT = 4,
    DRMENCODINGTYPE_RAW = 5,
} DRMENCODINGTYPE;

typedef enum {
    DRMATTESTTYPE_FULLENVIRONMENT = 0,
    DRMATTESTTYPE_HASHONLY = 1,
} DRMATTESTTYPE;

typedef enum {
    DRMSPECTYPE_UNKNOWN = 0,
    DRMSPECTYPE_FILENAME = 1,
} DRMSPECTYPE;

typedef enum {
    DRMSECURITYPROVIDERTYPE_SOFTWARESECREP = 0,
} DRMSECURITYPROVIDERTYPE;

typedef enum {
    DRMGLOBALOPTIONS_USE_WINHTTP = 0,
    DRMGLOBALOPTIONS_USE_SERVERSECURITYPROCESSOR = 1,
} DRMGLOBALOPTIONS;

typedef int DRMBOUNDLICENSEPARAMS;

typedef int DRM_LICENSE_ACQ_DATA;

typedef int DRM_ACTSERV_INFO;

typedef int DRM_CLIENT_VERSION_INFO;

typedef enum {
    DRM_MSG_ACTIVATE_MACHINE = 0,
    DRM_MSG_ACTIVATE_GROUPIDENTITY = 1,
    DRM_MSG_ACQUIRE_LICENSE = 2,
    DRM_MSG_ACQUIRE_ADVISORY = 3,
    DRM_MSG_SIGN_ISSUANCE_LICENSE = 4,
    DRM_MSG_ACQUIRE_CLIENTLICENSOR = 5,
    DRM_MSG_ACQUIRE_ISSUANCE_LICENSE_TEMPLATE = 6,
} DRM_STATUS_MSG;

typedef enum {
    DRM_USAGEPOLICY_TYPE_BYNAME = 0,
    DRM_USAGEPOLICY_TYPE_BYPUBLICKEY = 1,
    DRM_USAGEPOLICY_TYPE_BYDIGEST = 2,
    DRM_USAGEPOLICY_TYPE_OSEXCLUSION = 3,
} DRM_USAGEPOLICY_TYPE;

typedef enum {
    DRM_DISTRIBUTION_POINT_LICENSE_ACQUISITION = 0,
    DRM_DISTRIBUTION_POINT_PUBLISHING = 1,
    DRM_DISTRIBUTION_POINT_REFERRAL_INFO = 2,
} DRM_DISTRIBUTION_POINT_INFO;

typedef int DRMCALLBACK;


//--------------------------------------------------------------------------------
// Section: Functions (84)
//--------------------------------------------------------------------------------
/*HRESULT*/void DRMSetGlobalOptions();

/*HRESULT*/void DRMGetClientVersion();

/*HRESULT*/void DRMInitEnvironment();

/*HRESULT*/void DRMLoadLibrary();

/*HRESULT*/void DRMCreateEnablingPrincipal();

/*HRESULT*/void DRMCloseHandle();

/*HRESULT*/void DRMCloseEnvironmentHandle();

/*HRESULT*/void DRMDuplicateHandle();

/*HRESULT*/void DRMDuplicateEnvironmentHandle();

/*HRESULT*/void DRMRegisterRevocationList();

/*HRESULT*/void DRMCheckSecurity();

/*HRESULT*/void DRMRegisterContent();

/*HRESULT*/void DRMEncrypt();

/*HRESULT*/void DRMDecrypt();

/*HRESULT*/void DRMCreateBoundLicense();

/*HRESULT*/void DRMCreateEnablingBitsDecryptor();

/*HRESULT*/void DRMCreateEnablingBitsEncryptor();

/*HRESULT*/void DRMAttest();

/*HRESULT*/void DRMGetTime();

/*HRESULT*/void DRMGetInfo();

/*HRESULT*/void DRMGetEnvironmentInfo();

/*HRESULT*/void DRMGetProcAddress();

/*HRESULT*/void DRMGetBoundLicenseObjectCount();

/*HRESULT*/void DRMGetBoundLicenseObject();

/*HRESULT*/void DRMGetBoundLicenseAttributeCount();

/*HRESULT*/void DRMGetBoundLicenseAttribute();

/*HRESULT*/void DRMCreateClientSession();

/*HRESULT*/void DRMIsActivated();

/*HRESULT*/void DRMActivate();

/*HRESULT*/void DRMGetServiceLocation();

/*HRESULT*/void DRMCreateLicenseStorageSession();

/*HRESULT*/void DRMAddLicense();

/*HRESULT*/void DRMAcquireAdvisories();

/*HRESULT*/void DRMEnumerateLicense();

/*HRESULT*/void DRMAcquireLicense();

/*HRESULT*/void DRMDeleteLicense();

/*HRESULT*/void DRMCloseSession();

/*HRESULT*/void DRMDuplicateSession();

/*HRESULT*/void DRMGetSecurityProvider();

/*HRESULT*/void DRMEncode();

/*HRESULT*/void DRMDecode();

/*HRESULT*/void DRMConstructCertificateChain();

/*HRESULT*/void DRMParseUnboundLicense();

/*HRESULT*/void DRMCloseQueryHandle();

/*HRESULT*/void DRMGetUnboundLicenseObjectCount();

/*HRESULT*/void DRMGetUnboundLicenseObject();

/*HRESULT*/void DRMGetUnboundLicenseAttributeCount();

/*HRESULT*/void DRMGetUnboundLicenseAttribute();

/*HRESULT*/void DRMGetCertificateChainCount();

/*HRESULT*/void DRMDeconstructCertificateChain();

/*HRESULT*/void DRMVerify();

/*HRESULT*/void DRMCreateUser();

/*HRESULT*/void DRMCreateRight();

/*HRESULT*/void DRMCreateIssuanceLicense();

/*HRESULT*/void DRMAddRightWithUser();

/*HRESULT*/void DRMClearAllRights();

/*HRESULT*/void DRMSetMetaData();

/*HRESULT*/void DRMSetUsagePolicy();

/*HRESULT*/void DRMSetRevocationPoint();

/*HRESULT*/void DRMSetApplicationSpecificData();

/*HRESULT*/void DRMSetNameAndDescription();

/*HRESULT*/void DRMSetIntervalTime();

/*HRESULT*/void DRMGetIssuanceLicenseTemplate();

/*HRESULT*/void DRMGetSignedIssuanceLicense();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void DRMGetSignedIssuanceLicenseEx();

/*HRESULT*/void DRMClosePubHandle();

/*HRESULT*/void DRMDuplicatePubHandle();

/*HRESULT*/void DRMGetUserInfo();

/*HRESULT*/void DRMGetRightInfo();

/*HRESULT*/void DRMGetRightExtendedInfo();

/*HRESULT*/void DRMGetUsers();

/*HRESULT*/void DRMGetUserRights();

/*HRESULT*/void DRMGetMetaData();

/*HRESULT*/void DRMGetApplicationSpecificData();

/*HRESULT*/void DRMGetIssuanceLicenseInfo();

/*HRESULT*/void DRMGetRevocationPoint();

/*HRESULT*/void DRMGetUsagePolicy();

/*HRESULT*/void DRMGetNameAndDescription();

/*HRESULT*/void DRMGetOwnerLicense();

/*HRESULT*/void DRMGetIntervalTime();

/*HRESULT*/void DRMRepair();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void DRMRegisterProtectedWindow();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void DRMIsWindowProtected();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void DRMAcquireIssuanceLicenseTemplate();

