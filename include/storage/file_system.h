// NOTE: this file is autogenerated, DO NOT MODIFY
#include "../bootstrap.h"
//--------------------------------------------------------------------------------
// Section: Constants (225)
//--------------------------------------------------------------------------------
#define CLFS_FLAG_REENTRANT_FILE_SYSTEM (UINT)8
#define CLFS_FLAG_NON_REENTRANT_FILTER (UINT)16
#define CLFS_FLAG_REENTRANT_FILTER (UINT)32
#define CLFS_FLAG_IGNORE_SHARE_ACCESS (UINT)64
#define CLFS_FLAG_READ_IN_PROGRESS (UINT)128
#define CLFS_FLAG_MINIFILTER_LEVEL (UINT)256
#define CLFS_FLAG_HIDDEN_SYSTEM_LOG (UINT)512
#define CLFS_MARSHALLING_FLAG_NONE (UINT)0
#define CLFS_MARSHALLING_FLAG_DISABLE_BUFF_INIT (UINT)1
#define TRANSACTION_MANAGER_VOLATILE (UINT)1
#define TRANSACTION_MANAGER_COMMIT_DEFAULT (UINT)0
#define TRANSACTION_MANAGER_COMMIT_SYSTEM_VOLUME (UINT)2
#define TRANSACTION_MANAGER_COMMIT_SYSTEM_HIVES (UINT)4
#define TRANSACTION_MANAGER_COMMIT_LOWEST (UINT)8
#define TRANSACTION_MANAGER_CORRUPT_FOR_RECOVERY (UINT)16
#define TRANSACTION_MANAGER_CORRUPT_FOR_PROGRESS (UINT)32
#define TRANSACTION_MANAGER_MAXIMUM_OPTION (UINT)63
#define TRANSACTION_DO_NOT_PROMOTE (UINT)1
#define TRANSACTION_MAXIMUM_OPTION (UINT)1
#define RESOURCE_MANAGER_VOLATILE (UINT)1
#define RESOURCE_MANAGER_COMMUNICATION (UINT)2
#define RESOURCE_MANAGER_MAXIMUM_OPTION (UINT)3
#define CRM_PROTOCOL_EXPLICIT_MARSHAL_ONLY (UINT)1
#define CRM_PROTOCOL_DYNAMIC_MARSHAL_INFO (UINT)2
#define CRM_PROTOCOL_MAXIMUM_OPTION (UINT)3
#define ENLISTMENT_SUPERIOR (UINT)1
#define ENLISTMENT_MAXIMUM_OPTION (UINT)1
#define TRANSACTION_NOTIFY_MASK (UINT)1073741823
#define TRANSACTION_NOTIFY_PREPREPARE (UINT)1
#define TRANSACTION_NOTIFY_PREPARE (UINT)2
#define TRANSACTION_NOTIFY_COMMIT (UINT)4
#define TRANSACTION_NOTIFY_ROLLBACK (UINT)8
#define TRANSACTION_NOTIFY_PREPREPARE_COMPLETE (UINT)16
#define TRANSACTION_NOTIFY_PREPARE_COMPLETE (UINT)32
#define TRANSACTION_NOTIFY_COMMIT_COMPLETE (UINT)64
#define TRANSACTION_NOTIFY_ROLLBACK_COMPLETE (UINT)128
#define TRANSACTION_NOTIFY_RECOVER (UINT)256
#define TRANSACTION_NOTIFY_SINGLE_PHASE_COMMIT (UINT)512
#define TRANSACTION_NOTIFY_DELEGATE_COMMIT (UINT)1024
#define TRANSACTION_NOTIFY_RECOVER_QUERY (UINT)2048
#define TRANSACTION_NOTIFY_ENLIST_PREPREPARE (UINT)4096
#define TRANSACTION_NOTIFY_LAST_RECOVER (UINT)8192
#define TRANSACTION_NOTIFY_INDOUBT (UINT)16384
#define TRANSACTION_NOTIFY_PROPAGATE_PULL (UINT)32768
#define TRANSACTION_NOTIFY_PROPAGATE_PUSH (UINT)65536
#define TRANSACTION_NOTIFY_MARSHAL (UINT)131072
#define TRANSACTION_NOTIFY_ENLIST_MASK (UINT)262144
#define TRANSACTION_NOTIFY_RM_DISCONNECTED (UINT)16777216
#define TRANSACTION_NOTIFY_TM_ONLINE (UINT)33554432
#define TRANSACTION_NOTIFY_COMMIT_REQUEST (UINT)67108864
#define TRANSACTION_NOTIFY_PROMOTE (UINT)134217728
#define TRANSACTION_NOTIFY_PROMOTE_NEW (UINT)268435456
#define TRANSACTION_NOTIFY_REQUEST_OUTCOME (UINT)536870912
#define TRANSACTION_NOTIFY_COMMIT_FINALIZE (UINT)1073741824
#define TRANSACTION_NOTIFICATION_TM_ONLINE_FLAG_IS_CLUSTERED (UINT)1
#define KTM_MARSHAL_BLOB_VERSION_MAJOR (UINT)1
#define KTM_MARSHAL_BLOB_VERSION_MINOR (UINT)1
#define MAX_TRANSACTION_DESCRIPTION_LENGTH (UINT)64
#define MAX_RESOURCEMANAGER_DESCRIPTION_LENGTH (UINT)64
#define IOCTL_VOLUME_SUPPORTS_ONLINE_OFFLINE (UINT)5636100
#define IOCTL_VOLUME_IS_OFFLINE (UINT)5636112
#define IOCTL_VOLUME_IS_IO_CAPABLE (UINT)5636116
#define IOCTL_VOLUME_QUERY_FAILOVER_SET (UINT)5636120
#define IOCTL_VOLUME_QUERY_VOLUME_NUMBER (UINT)5636124
#define IOCTL_VOLUME_LOGICAL_TO_PHYSICAL (UINT)5636128
#define IOCTL_VOLUME_PHYSICAL_TO_LOGICAL (UINT)5636132
#define IOCTL_VOLUME_IS_PARTITION (UINT)5636136
#define IOCTL_VOLUME_READ_PLEX (UINT)5652526
#define IOCTL_VOLUME_SET_GPT_ATTRIBUTES (UINT)5636148
#define IOCTL_VOLUME_GET_BC_PROPERTIES (UINT)5652540
#define IOCTL_VOLUME_ALLOCATE_BC_STREAM (UINT)5685312
#define IOCTL_VOLUME_FREE_BC_STREAM (UINT)5685316
#define IOCTL_VOLUME_BC_VERSION (UINT)1
#define IOCTL_VOLUME_IS_DYNAMIC (UINT)5636168
#define IOCTL_VOLUME_PREPARE_FOR_CRITICAL_IO (UINT)5685324
#define IOCTL_VOLUME_QUERY_ALLOCATION_HINT (UINT)5652562
#define IOCTL_VOLUME_UPDATE_PROPERTIES (UINT)5636180
#define IOCTL_VOLUME_QUERY_MINIMUM_SHRINK_SIZE (UINT)5652568
#define IOCTL_VOLUME_PREPARE_FOR_SHRINK (UINT)5685340
#define IOCTL_VOLUME_IS_CSV (UINT)5636192
#define IOCTL_VOLUME_POST_ONLINE (UINT)5685348
#define IOCTL_VOLUME_GET_CSVBLOCKCACHE_CALLBACK (UINT)5685352
#define CSV_BLOCK_CACHE_CALLBACK_VERSION (UINT)1
#define CSV_BLOCK_AND_FILE_CACHE_CALLBACK_VERSION (UINT)2
#define CLFS_MGMT_POLICY_VERSION (UINT)1
#define LOG_POLICY_OVERWRITE (UINT)1
#define LOG_POLICY_PERSIST (UINT)2
#define CLFS_MGMT_CLIENT_REGISTRATION_VERSION (UINT)1
#define CLSID_DiskQuotaControl GUID { "7988b571-ec89-11cf-9c00-00aa00a14f56" }
#define DISKQUOTA_STATE_DISABLED (UINT)0
#define DISKQUOTA_STATE_TRACK (UINT)1
#define DISKQUOTA_STATE_ENFORCE (UINT)2
#define DISKQUOTA_STATE_MASK (UINT)3
#define DISKQUOTA_FILESTATE_INCOMPLETE (UINT)256
#define DISKQUOTA_FILESTATE_REBUILDING (UINT)512
#define DISKQUOTA_FILESTATE_MASK (UINT)768
#define DISKQUOTA_LOGFLAG_USER_THRESHOLD (UINT)1
#define DISKQUOTA_LOGFLAG_USER_LIMIT (UINT)2
#define DISKQUOTA_USER_ACCOUNT_RESOLVED (UINT)0
#define DISKQUOTA_USER_ACCOUNT_UNAVAILABLE (UINT)1
#define DISKQUOTA_USER_ACCOUNT_DELETED (UINT)2
#define DISKQUOTA_USER_ACCOUNT_INVALID (UINT)3
#define DISKQUOTA_USER_ACCOUNT_UNKNOWN (UINT)4
#define DISKQUOTA_USER_ACCOUNT_UNRESOLVED (UINT)5
#define INVALID_SET_FILE_POINTER (UINT)4294967295
#define INVALID_FILE_ATTRIBUTES (UINT)4294967295
#define SHARE_NETNAME_PARMNUM (UINT)1
#define SHARE_TYPE_PARMNUM (UINT)3
#define SHARE_REMARK_PARMNUM (UINT)4
#define SHARE_PERMISSIONS_PARMNUM (UINT)5
#define SHARE_MAX_USES_PARMNUM (UINT)6
#define SHARE_CURRENT_USES_PARMNUM (UINT)7
#define SHARE_PATH_PARMNUM (UINT)8
#define SHARE_PASSWD_PARMNUM (UINT)9
#define SHARE_FILE_SD_PARMNUM (UINT)501
#define SHARE_SERVER_PARMNUM (UINT)503
#define SHI1_NUM_ELEMENTS (UINT)4
#define SHI2_NUM_ELEMENTS (UINT)10
#define STYPE_RESERVED1 (UINT)16777216
#define STYPE_RESERVED2 (UINT)33554432
#define STYPE_RESERVED3 (UINT)67108864
#define STYPE_RESERVED4 (UINT)134217728
#define STYPE_RESERVED5 (UINT)1048576
#define STYPE_RESERVED_ALL (UINT)1073741568
#define SHI_USES_UNLIMITED (UINT)4294967295
#define SHI1005_FLAGS_DFS (UINT)1
#define SHI1005_FLAGS_DFS_ROOT (UINT)2
#define CSC_MASK_EXT (UINT)8240
#define CSC_MASK (UINT)48
#define CSC_CACHE_MANUAL_REINT (UINT)0
#define CSC_CACHE_AUTO_REINT (UINT)16
#define CSC_CACHE_VDO (UINT)32
#define CSC_CACHE_NONE (UINT)48
#define SHI1005_FLAGS_RESTRICT_EXCLUSIVE_OPENS (UINT)256
#define SHI1005_FLAGS_FORCE_SHARED_DELETE (UINT)512
#define SHI1005_FLAGS_ALLOW_NAMESPACE_CACHING (UINT)1024
#define SHI1005_FLAGS_ACCESS_BASED_DIRECTORY_ENUM (UINT)2048
#define SHI1005_FLAGS_FORCE_LEVELII_OPLOCK (UINT)4096
#define SHI1005_FLAGS_ENABLE_HASH (UINT)8192
#define SHI1005_FLAGS_ENABLE_CA (UINT)16384
#define SHI1005_FLAGS_ENCRYPT_DATA (UINT)32768
#define SHI1005_FLAGS_RESERVED (UINT)65536
#define SHI1005_FLAGS_DISABLE_CLIENT_BUFFERING (UINT)131072
#define SHI1005_FLAGS_IDENTITY_REMOTING (UINT)262144
#define SHI1005_FLAGS_CLUSTER_MANAGED (UINT)524288
#define SESI1_NUM_ELEMENTS (UINT)8
#define SESI2_NUM_ELEMENTS (UINT)9
#define STATSOPT_CLR (UINT)1
#define LZERROR_BADINHANDLE (INT)-1
#define LZERROR_BADOUTHANDLE (INT)-2
#define LZERROR_READ (INT)-3
#define LZERROR_WRITE (INT)-4
#define LZERROR_GLOBALLOC (INT)-5
#define LZERROR_GLOBLOCK (INT)-6
#define LZERROR_BADVALUE (INT)-7
#define LZERROR_UNKNOWNALG (INT)-8
#define NTMS_OBJECTNAME_LENGTH (UINT)64
#define NTMS_DESCRIPTION_LENGTH (UINT)127
#define NTMS_DEVICENAME_LENGTH (UINT)64
#define NTMS_SERIALNUMBER_LENGTH (UINT)32
#define NTMS_REVISION_LENGTH (UINT)32
#define NTMS_BARCODE_LENGTH (UINT)64
#define NTMS_SEQUENCE_LENGTH (UINT)32
#define NTMS_VENDORNAME_LENGTH (UINT)128
#define NTMS_PRODUCTNAME_LENGTH (UINT)128
#define NTMS_USERNAME_LENGTH (UINT)64
#define NTMS_APPLICATIONNAME_LENGTH (UINT)64
#define NTMS_COMPUTERNAME_LENGTH (UINT)64
#define NTMS_I1_MESSAGE_LENGTH (UINT)127
#define NTMS_MESSAGE_LENGTH (UINT)256
#define NTMS_POOLHIERARCHY_LENGTH (UINT)512
#define NTMS_OMIDLABELID_LENGTH (UINT)255
#define NTMS_OMIDLABELTYPE_LENGTH (UINT)64
#define NTMS_OMIDLABELINFO_LENGTH (UINT)256
#define NTMS_MAXATTR_LENGTH (UINT)65536
#define NTMS_MAXATTR_NAMELEN (UINT)32
#define NTMSMLI_MAXTYPE (UINT)64
#define NTMSMLI_MAXIDSIZE (UINT)256
#define NTMSMLI_MAXAPPDESCR (UINT)256
#define TXF_LOG_RECORD_GENERIC_TYPE_COMMIT (UINT)1
#define TXF_LOG_RECORD_GENERIC_TYPE_ABORT (UINT)2
#define TXF_LOG_RECORD_GENERIC_TYPE_PREPARE (UINT)4
#define TXF_LOG_RECORD_GENERIC_TYPE_DATA (UINT)8
#define VS_VERSION_INFO (UINT)1
#define VS_USER_DEFINED (UINT)100
#define VS_FFI_SIGNATURE (INT)-17890115
#define VS_FFI_STRUCVERSION (INT)65536
#define VS_FFI_FILEFLAGSMASK (INT)63
#define WINEFS_SETUSERKEY_SET_CAPABILITIES (UINT)1
#define EFS_COMPATIBILITY_VERSION_NCRYPT_PROTECTOR (UINT)5
#define EFS_COMPATIBILITY_VERSION_PFILE_PROTECTOR (UINT)6
#define EFS_SUBVER_UNKNOWN (UINT)0
#define EFS_EFS_SUBVER_EFS_CERT (UINT)1
#define EFS_PFILE_SUBVER_RMS (UINT)2
#define EFS_PFILE_SUBVER_APPX (UINT)3
#define MAX_SID_SIZE (UINT)256
#define EFS_METADATA_ADD_USER (UINT)1
#define EFS_METADATA_REMOVE_USER (UINT)2
#define EFS_METADATA_REPLACE_USER (UINT)4
#define EFS_METADATA_GENERAL_OP (UINT)8
#define WIM_ENTRY_FLAG_NOT_ACTIVE (UINT)1
#define WIM_ENTRY_FLAG_SUSPENDED (UINT)2
#define ClfsNullRecord (BYTE)0
#define ClfsDataRecord (BYTE)1
#define ClfsRestartRecord (BYTE)2
#define ClfsClientRecord (BYTE)3
#define ClsContainerInitializing (UINT)1
#define ClsContainerInactive (UINT)2
#define ClsContainerActive (UINT)4
#define ClsContainerActivePendingDelete (UINT)8
#define ClsContainerPendingArchive (UINT)16
#define ClsContainerPendingArchiveAndDelete (UINT)32
#define ClfsContainerInitializing (UINT)1
#define ClfsContainerInactive (UINT)2
#define ClfsContainerActive (UINT)4
#define ClfsContainerActivePendingDelete (UINT)8
#define ClfsContainerPendingArchive (UINT)16
#define ClfsContainerPendingArchiveAndDelete (UINT)32
#define CLFS_MAX_CONTAINER_INFO (UINT)256
#define CLFS_SCAN_INIT (BYTE)1
#define CLFS_SCAN_FORWARD (BYTE)2
#define CLFS_SCAN_BACKWARD (BYTE)4
#define CLFS_SCAN_CLOSE (BYTE)8
#define CLFS_SCAN_INITIALIZED (BYTE)16
#define CLFS_SCAN_BUFFERED (BYTE)32

//--------------------------------------------------------------------------------
// Section: Types (489)
//--------------------------------------------------------------------------------
typedef enum {
    FIND_FIRST_EX_CASE_SENSITIVE = 1,
    FIND_FIRST_EX_LARGE_FETCH = 2,
    FIND_FIRST_EX_ON_DISK_ENTRIES_ONLY = 4,
} FIND_FIRST_EX_FLAGS;

typedef enum {
    DDD_RAW_TARGET_PATH = 1,
    DDD_REMOVE_DEFINITION = 2,
    DDD_EXACT_MATCH_ON_REMOVE = 4,
    DDD_NO_BROADCAST_SYSTEM = 8,
    DDD_LUID_BROADCAST_DRIVE = 16,
} DEFINE_DOS_DEVICE_FLAGS;

typedef enum {
    FILE_ATTRIBUTE_READONLY = 1,
    FILE_ATTRIBUTE_HIDDEN = 2,
    FILE_ATTRIBUTE_SYSTEM = 4,
    FILE_ATTRIBUTE_DIRECTORY = 16,
    FILE_ATTRIBUTE_ARCHIVE = 32,
    FILE_ATTRIBUTE_DEVICE = 64,
    FILE_ATTRIBUTE_NORMAL = 128,
    FILE_ATTRIBUTE_TEMPORARY = 256,
    FILE_ATTRIBUTE_SPARSE_FILE = 512,
    FILE_ATTRIBUTE_REPARSE_POINT = 1024,
    FILE_ATTRIBUTE_COMPRESSED = 2048,
    FILE_ATTRIBUTE_OFFLINE = 4096,
    FILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192,
    FILE_ATTRIBUTE_ENCRYPTED = 16384,
    FILE_ATTRIBUTE_INTEGRITY_STREAM = 32768,
    FILE_ATTRIBUTE_VIRTUAL = 65536,
    FILE_ATTRIBUTE_NO_SCRUB_DATA = 131072,
    FILE_ATTRIBUTE_EA = 262144,
    FILE_ATTRIBUTE_PINNED = 524288,
    FILE_ATTRIBUTE_UNPINNED = 1048576,
    FILE_ATTRIBUTE_RECALL_ON_OPEN = 262144,
    FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS = 4194304,
    FILE_FLAG_WRITE_THROUGH = 2147483648,
    FILE_FLAG_OVERLAPPED = 1073741824,
    FILE_FLAG_NO_BUFFERING = 536870912,
    FILE_FLAG_RANDOM_ACCESS = 268435456,
    FILE_FLAG_SEQUENTIAL_SCAN = 134217728,
    FILE_FLAG_DELETE_ON_CLOSE = 67108864,
    FILE_FLAG_BACKUP_SEMANTICS = 33554432,
    FILE_FLAG_POSIX_SEMANTICS = 16777216,
    FILE_FLAG_SESSION_AWARE = 8388608,
    FILE_FLAG_OPEN_REPARSE_POINT = 2097152,
    FILE_FLAG_OPEN_NO_RECALL = 1048576,
    FILE_FLAG_FIRST_PIPE_INSTANCE = 524288,
    PIPE_ACCESS_DUPLEX = 3,
    PIPE_ACCESS_INBOUND = 1,
    PIPE_ACCESS_OUTBOUND = 2,
    SECURITY_ANONYMOUS = 0,
    SECURITY_IDENTIFICATION = 65536,
    SECURITY_IMPERSONATION = 131072,
    SECURITY_DELEGATION = 196608,
    SECURITY_CONTEXT_TRACKING = 262144,
    SECURITY_EFFECTIVE_ONLY = 524288,
    SECURITY_SQOS_PRESENT = 1048576,
    SECURITY_VALID_SQOS_FLAGS = 2031616,
} FILE_FLAGS_AND_ATTRIBUTES;

typedef enum {
    FILE_READ_DATA = 1,
    FILE_LIST_DIRECTORY = 1,
    FILE_WRITE_DATA = 2,
    FILE_ADD_FILE = 2,
    FILE_APPEND_DATA = 4,
    FILE_ADD_SUBDIRECTORY = 4,
    FILE_CREATE_PIPE_INSTANCE = 4,
    FILE_READ_EA = 8,
    FILE_WRITE_EA = 16,
    FILE_EXECUTE = 32,
    FILE_TRAVERSE = 32,
    FILE_DELETE_CHILD = 64,
    FILE_READ_ATTRIBUTES = 128,
    FILE_WRITE_ATTRIBUTES = 256,
    READ_CONTROL = 131072,
    SYNCHRONIZE = 1048576,
    STANDARD_RIGHTS_REQUIRED = 983040,
    STANDARD_RIGHTS_READ = 131072,
    STANDARD_RIGHTS_WRITE = 131072,
    STANDARD_RIGHTS_EXECUTE = 131072,
    STANDARD_RIGHTS_ALL = 2031616,
    SPECIFIC_RIGHTS_ALL = 65535,
    FILE_ALL_ACCESS = 2032127,
    FILE_GENERIC_READ = 1179785,
    FILE_GENERIC_WRITE = 1179926,
    FILE_GENERIC_EXECUTE = 1179808,
} FILE_ACCESS_FLAGS;

typedef enum {
    GPT_ATTRIBUTE_PLATFORM_REQUIRED = 1,
    GPT_BASIC_DATA_ATTRIBUTE_NO_DRIVE_LETTER = 9223372036854775808,
    GPT_BASIC_DATA_ATTRIBUTE_HIDDEN = 4611686018427387904,
    GPT_BASIC_DATA_ATTRIBUTE_SHADOW_COPY = 2305843009213693952,
    GPT_BASIC_DATA_ATTRIBUTE_READ_ONLY = 1152921504606846976,
} GPT_ATTRIBUTES;

typedef enum {
    FILE_VER_GET_LOCALISED = 1,
    FILE_VER_GET_NEUTRAL = 2,
    FILE_VER_GET_PREFETCHED = 4,
} GET_FILE_VERSION_INFO_FLAGS;

typedef enum {
    VFFF_ISSHAREDFILE = 1,
} VER_FIND_FILE_FLAGS;

typedef enum {
    VFF_CURNEDEST = 1,
    VFF_FILEINUSE = 2,
    VFF_BUFFTOOSMALL = 4,
} VER_FIND_FILE_STATUS;

typedef enum {
    VIFF_FORCEINSTALL = 1,
    VIFF_DONTDELETEOLD = 2,
} VER_INSTALL_FILE_FLAGS;

typedef enum {
    VIF_TEMPFILE = 1,
    VIF_MISMATCH = 2,
    VIF_SRCOLD = 4,
    VIF_DIFFLANG = 8,
    VIF_DIFFCODEPG = 16,
    VIF_DIFFTYPE = 32,
    VIF_WRITEPROT = 64,
    VIF_FILEINUSE = 128,
    VIF_OUTOFSPACE = 256,
    VIF_ACCESSVIOLATION = 512,
    VIF_SHARINGVIOLATION = 1024,
    VIF_CANNOTCREATE = 2048,
    VIF_CANNOTDELETE = 4096,
    VIF_CANNOTRENAME = 8192,
    VIF_CANNOTDELETECUR = 16384,
    VIF_OUTOFMEMORY = 32768,
    VIF_CANNOTREADSRC = 65536,
    VIF_CANNOTREADDST = 131072,
    VIF_BUFFTOOSMALL = 262144,
    VIF_CANNOTLOADLZ32 = 524288,
    VIF_CANNOTLOADCABINET = 1048576,
} VER_INSTALL_FILE_STATUS;

typedef enum {
    VS_FF_DEBUG = 1,
    VS_FF_PRERELEASE = 2,
    VS_FF_PATCHED = 4,
    VS_FF_PRIVATEBUILD = 8,
    VS_FF_INFOINFERRED = 16,
    VS_FF_SPECIALBUILD = 32,
} VS_FIXEDFILEINFO_FILE_FLAGS;

typedef enum {
    VOS_UNKNOWN = 0,
    VOS_DOS = 65536,
    VOS_OS216 = 131072,
    VOS_OS232 = 196608,
    VOS_NT = 262144,
    VOS_WINCE = 327680,
    VOS__BASE = 0,
    VOS__WINDOWS16 = 1,
    VOS__PM16 = 2,
    VOS__PM32 = 3,
    VOS__WINDOWS32 = 4,
    VOS_DOS_WINDOWS16 = 65537,
    VOS_DOS_WINDOWS32 = 65540,
    VOS_OS216_PM16 = 131074,
    VOS_OS232_PM32 = 196611,
    VOS_NT_WINDOWS32 = 262148,
} VS_FIXEDFILEINFO_FILE_OS;

typedef enum {
    VFT_UNKNOWN = 0,
    VFT_APP = 1,
    VFT_DLL = 2,
    VFT_DRV = 3,
    VFT_FONT = 4,
    VFT_VXD = 5,
    VFT_STATIC_LIB = 7,
} VS_FIXEDFILEINFO_FILE_TYPE;

typedef enum {
    VFT2_UNKNOWN = 0,
    VFT2_DRV_PRINTER = 1,
    VFT2_DRV_KEYBOARD = 2,
    VFT2_DRV_LANGUAGE = 3,
    VFT2_DRV_DISPLAY = 4,
    VFT2_DRV_MOUSE = 5,
    VFT2_DRV_NETWORK = 6,
    VFT2_DRV_SYSTEM = 7,
    VFT2_DRV_INSTALLABLE = 8,
    VFT2_DRV_SOUND = 9,
    VFT2_DRV_COMM = 10,
    VFT2_DRV_INPUTMETHOD = 11,
    VFT2_DRV_VERSIONED_PRINTER = 12,
    VFT2_FONT_RASTER = 1,
    VFT2_FONT_VECTOR = 2,
    VFT2_FONT_TRUETYPE = 3,
} VS_FIXEDFILEINFO_FILE_SUBTYPE;

typedef enum {
    CREATE_NEW = 1,
    CREATE_ALWAYS = 2,
    OPEN_EXISTING = 3,
    OPEN_ALWAYS = 4,
    TRUNCATE_EXISTING = 5,
} FILE_CREATION_DISPOSITION;

typedef enum {
    FILE_SHARE_NONE = 0,
    FILE_SHARE_DELETE = 4,
    FILE_SHARE_READ = 1,
    FILE_SHARE_WRITE = 2,
} FILE_SHARE_MODE;

typedef enum {
    STYPE_DISKTREE = 0,
    STYPE_PRINTQ = 1,
    STYPE_DEVICE = 2,
    STYPE_IPC = 3,
    STYPE_SPECIAL = 2147483648,
    STYPE_TEMPORARY = 1073741824,
    STYPE_MASK = 255,
} SHARE_TYPE;

typedef enum {
    CLFS_FLAG_FORCE_APPEND = 1,
    CLFS_FLAG_FORCE_FLUSH = 2,
    CLFS_FLAG_NO_FLAGS = 0,
    CLFS_FLAG_USE_RESERVATION = 4,
} CLFS_FLAG;

typedef enum {
    FILE_BEGIN = 0,
    FILE_CURRENT = 1,
    FILE_END = 2,
} SET_FILE_POINTER_MOVE_METHOD;

typedef enum {
    MOVEFILE_COPY_ALLOWED = 2,
    MOVEFILE_CREATE_HARDLINK = 16,
    MOVEFILE_DELAY_UNTIL_REBOOT = 4,
    MOVEFILE_REPLACE_EXISTING = 1,
    MOVEFILE_WRITE_THROUGH = 8,
    MOVEFILE_FAIL_IF_NOT_TRACKABLE = 32,
} MOVE_FILE_FLAGS;

typedef enum {
    FILE_NAME_NORMALIZED = 0,
    FILE_NAME_OPENED = 8,
} FILE_NAME;

typedef enum {
    OF_CANCEL = 2048,
    OF_CREATE = 4096,
    OF_DELETE = 512,
    OF_EXIST = 16384,
    OF_PARSE = 256,
    OF_PROMPT = 8192,
    OF_READ = 0,
    OF_READWRITE = 2,
    OF_REOPEN = 32768,
    OF_SHARE_DENY_NONE = 64,
    OF_SHARE_DENY_READ = 48,
    OF_SHARE_DENY_WRITE = 32,
    OF_SHARE_EXCLUSIVE = 16,
    OF_WRITE = 1,
    OF_SHARE_COMPAT = 0,
    OF_VERIFY = 1024,
} LZOPENFILE_STYLE;

typedef enum {
    FILE_NOTIFY_CHANGE_FILE_NAME = 1,
    FILE_NOTIFY_CHANGE_DIR_NAME = 2,
    FILE_NOTIFY_CHANGE_ATTRIBUTES = 4,
    FILE_NOTIFY_CHANGE_SIZE = 8,
    FILE_NOTIFY_CHANGE_LAST_WRITE = 16,
    FILE_NOTIFY_CHANGE_LAST_ACCESS = 32,
    FILE_NOTIFY_CHANGE_CREATION = 64,
    FILE_NOTIFY_CHANGE_SECURITY = 256,
} FILE_NOTIFY_CHANGE;

typedef enum {
    TXFS_MINIVERSION_COMMITTED_VIEW = 0,
    TXFS_MINIVERSION_DIRTY_VIEW = 65535,
    TXFS_MINIVERSION_DEFAULT_VIEW = 65534,
} TXFS_MINIVERSION;

typedef enum {
    TAPE_ABSOLUTE_POSITION = 0,
    TAPE_LOGICAL_POSITION = 1,
} TAPE_POSITION_TYPE;

typedef enum {
    TAPE_FIXED_PARTITIONS = 0,
    TAPE_INITIATOR_PARTITIONS = 2,
    TAPE_SELECT_PARTITIONS = 1,
} CREATE_TAPE_PARTITION_METHOD;

typedef enum {
    REPLACEFILE_WRITE_THROUGH = 1,
    REPLACEFILE_IGNORE_MERGE_ERRORS = 2,
    REPLACEFILE_IGNORE_ACL_ERRORS = 4,
} REPLACE_FILE_FLAGS;

typedef enum {
    TAPE_FILEMARKS = 1,
    TAPE_LONG_FILEMARKS = 3,
    TAPE_SETMARKS = 0,
    TAPE_SHORT_FILEMARKS = 2,
} TAPEMARK_TYPE;

typedef enum {
    DISKQUOTA_USERNAME_RESOLVE_ASYNC = 2,
    DISKQUOTA_USERNAME_RESOLVE_NONE = 0,
    DISKQUOTA_USERNAME_RESOLVE_SYNC = 1,
} DISKQUOTA_USERNAME_RESOLVE;

typedef enum {
    TAPE_ABSOLUTE_BLOCK = 1,
    TAPE_LOGICAL_BLOCK = 2,
    TAPE_REWIND = 0,
    TAPE_SPACE_END_OF_DATA = 4,
    TAPE_SPACE_FILEMARKS = 6,
    TAPE_SPACE_RELATIVE_BLOCKS = 5,
    TAPE_SPACE_SEQUENTIAL_FMKS = 7,
    TAPE_SPACE_SEQUENTIAL_SMKS = 9,
    TAPE_SPACE_SETMARKS = 8,
} TAPE_POSITION_METHOD;

typedef enum {
    SET_TAPE_DRIVE_INFORMATION = 1,
    SET_TAPE_MEDIA_INFORMATION = 0,
} TAPE_INFORMATION_TYPE;

typedef enum {
    NTMS_OMID_TYPE_FILESYSTEM_INFO = 2,
    NTMS_OMID_TYPE_RAW_LABEL = 1,
} NTMS_OMID_TYPE;

typedef enum {
    LOCKFILE_EXCLUSIVE_LOCK = 2,
    LOCKFILE_FAIL_IMMEDIATELY = 1,
} LOCK_FILE_FLAGS;

typedef enum {
    CALLBACK_CHUNK_FINISHED = 0,
    CALLBACK_STREAM_SWITCH = 1,
} LPPROGRESS_ROUTINE_CALLBACK_REASON;

typedef enum {
    TAPE_FORMAT = 5,
    TAPE_LOAD = 0,
    TAPE_LOCK = 3,
    TAPE_TENSION = 2,
    TAPE_UNLOAD = 1,
    TAPE_UNLOCK = 4,
} PREPARE_TAPE_OPERATION;

typedef enum {
    GET_TAPE_DRIVE_INFORMATION = 1,
    GET_TAPE_MEDIA_INFORMATION = 0,
} GET_TAPE_DRIVE_PARAMETERS_OPERATION;

typedef enum {
    TAPE_ERASE_LONG = 1,
    TAPE_ERASE_SHORT = 0,
} ERASE_TAPE_TYPE;

typedef enum {
    FILE_ACTION_ADDED = 1,
    FILE_ACTION_REMOVED = 2,
    FILE_ACTION_MODIFIED = 3,
    FILE_ACTION_RENAMED_OLD_NAME = 4,
    FILE_ACTION_RENAMED_NEW_NAME = 5,
} FILE_ACTION;

typedef enum {
    USN_DELETE_FLAG_DELETE = 1,
    USN_DELETE_FLAG_NOTIFY = 2,
} USN_DELETE_FLAGS;

typedef enum {
    ACCESS_READ = 1,
    ACCESS_WRITE = 2,
    ACCESS_CREATE = 4,
    ACCESS_EXEC = 8,
    ACCESS_DELETE = 16,
    ACCESS_ATRIB = 32,
    ACCESS_PERM = 64,
    ACCESS_ALL = 32768,
} SHARE_INFO_PERMISSIONS;

typedef enum {
    FILE_DEVICE_CD_ROM = 2,
    FILE_DEVICE_DISK = 7,
    FILE_DEVICE_TAPE = 31,
    FILE_DEVICE_DVD = 51,
} FILE_DEVICE_TYPE;

typedef enum {
    TXFS_RM_FLAG_LOGGING_MODE = 1,
    TXFS_RM_FLAG_RENAME_RM = 2,
    TXFS_RM_FLAG_LOG_CONTAINER_COUNT_MAX = 4,
    TXFS_RM_FLAG_LOG_CONTAINER_COUNT_MIN = 8,
    TXFS_RM_FLAG_LOG_GROWTH_INCREMENT_NUM_CONTAINERS = 16,
    TXFS_RM_FLAG_LOG_GROWTH_INCREMENT_PERCENT = 32,
    TXFS_RM_FLAG_LOG_AUTO_SHRINK_PERCENTAGE = 64,
    TXFS_RM_FLAG_LOG_NO_CONTAINER_COUNT_MAX = 128,
    TXFS_RM_FLAG_LOG_NO_CONTAINER_COUNT_MIN = 256,
    TXFS_RM_FLAG_GROW_LOG = 1024,
    TXFS_RM_FLAG_SHRINK_LOG = 2048,
    TXFS_RM_FLAG_ENFORCE_MINIMUM_SIZE = 4096,
    TXFS_RM_FLAG_PRESERVE_CHANGES = 8192,
    TXFS_RM_FLAG_RESET_RM_AT_NEXT_START = 16384,
    TXFS_RM_FLAG_DO_NOT_RESET_RM_AT_NEXT_START = 32768,
    TXFS_RM_FLAG_PREFER_CONSISTENCY = 65536,
    TXFS_RM_FLAG_PREFER_AVAILABILITY = 131072,
} TXFS_RMF_LAGS;

typedef enum {
    FILESYSTEM_STATISTICS_TYPE_EXFAT = 3,
    FILESYSTEM_STATISTICS_TYPE_FAT = 2,
    FILESYSTEM_STATISTICS_TYPE_NTFS = 1,
} FILESYSTEM_STATISTICS_TYPE;

typedef enum {
    USN_SOURCE_AUXILIARY_DATA = 2,
    USN_SOURCE_DATA_MANAGEMENT = 1,
    USN_SOURCE_REPLICATION_MANAGEMENT = 4,
    USN_SOURCE_CLIENT_REPLICATION_MANAGEMENT = 8,
} USN_SOURCE_INFO_ID;

typedef enum {
    FILE_STORAGE_TIER_FLAG_NO_SEEK_PENALTY = 131072,
} FILE_STORAGE_TIER_FLAGS;

typedef enum {
    SESS_GUEST = 1,
    SESS_NOENCRYPTION = 2,
} SESSION_INFO_USER_FLAGS;

typedef enum {
    BACKUP_ALTERNATE_DATA = 4,
    BACKUP_DATA = 1,
    BACKUP_EA_DATA = 2,
    BACKUP_LINK = 5,
    BACKUP_OBJECT_ID = 7,
    BACKUP_PROPERTY_DATA = 6,
    BACKUP_REPARSE_DATA = 8,
    BACKUP_SECURITY_DATA = 3,
    BACKUP_SPARSE_BLOCK = 9,
    BACKUP_TXFS_DATA = 10,
} WIN_STREAM_ID;

typedef enum {
    TXF_LOG_RECORD_TYPE_AFFECTED_FILE = 4,
    TXF_LOG_RECORD_TYPE_TRUNCATE = 2,
    TXF_LOG_RECORD_TYPE_WRITE = 1,
} TXF_LOG_RECORD_TYPE;

typedef enum {
    PERM_FILE_READ = 1,
    PERM_FILE_WRITE = 2,
    PERM_FILE_CREATE = 4,
} FILE_INFO_FLAGS_PERMISSIONS;

typedef enum {
    SYMBOLIC_LINK_FLAG_DIRECTORY = 1,
    SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE = 2,
} SYMBOLIC_LINK_FLAGS;

typedef int MARK_HANDLE_INFO32;

typedef int FindFileHandle;

typedef int FindFileNameHandle;

typedef int FindStreamHandle;

typedef int FindChangeNotificationHandle;

typedef int FindVolumeHandle;

typedef int FindVolumeMointPointHandle;

typedef int FILE_ID_128;

typedef int FILE_NOTIFY_INFORMATION;

typedef int FILE_NOTIFY_EXTENDED_INFORMATION;

typedef int REPARSE_GUID_DATA_BUFFER;

typedef enum {
    TransactionOutcomeUndetermined = 1,
    TransactionOutcomeCommitted = 2,
    TransactionOutcomeAborted = 3,
} TRANSACTION_OUTCOME;

typedef int OVERLAPPED_ENTRY;

typedef int WIN32_FIND_DATAA;

typedef int WIN32_FIND_DATAW;

typedef enum {
    FindExInfoStandard = 0,
    FindExInfoBasic = 1,
    FindExInfoMaxInfoLevel = 2,
} FINDEX_INFO_LEVELS;

typedef enum {
    FindExSearchNameMatch = 0,
    FindExSearchLimitToDirectories = 1,
    FindExSearchLimitToDevices = 2,
    FindExSearchMaxSearchOp = 3,
} FINDEX_SEARCH_OPS;

typedef enum {
    ReadDirectoryNotifyInformation = 1,
    ReadDirectoryNotifyExtendedInformation = 2,
} READ_DIRECTORY_NOTIFY_INFORMATION_CLASS;

typedef enum {
    GetFileExInfoStandard = 0,
    GetFileExMaxInfoLevel = 1,
} GET_FILEEX_INFO_LEVELS;

typedef enum {
    FileBasicInfo = 0,
    FileStandardInfo = 1,
    FileNameInfo = 2,
    FileRenameInfo = 3,
    FileDispositionInfo = 4,
    FileAllocationInfo = 5,
    FileEndOfFileInfo = 6,
    FileStreamInfo = 7,
    FileCompressionInfo = 8,
    FileAttributeTagInfo = 9,
    FileIdBothDirectoryInfo = 10,
    FileIdBothDirectoryRestartInfo = 11,
    FileIoPriorityHintInfo = 12,
    FileRemoteProtocolInfo = 13,
    FileFullDirectoryInfo = 14,
    FileFullDirectoryRestartInfo = 15,
    FileStorageInfo = 16,
    FileAlignmentInfo = 17,
    FileIdInfo = 18,
    FileIdExtdDirectoryInfo = 19,
    FileIdExtdDirectoryRestartInfo = 20,
    FileDispositionInfoEx = 21,
    FileRenameInfoEx = 22,
    FileCaseSensitiveInfo = 23,
    FileNormalizedNameInfo = 24,
    MaximumFileInfoByHandleClass = 25,
} FILE_INFO_BY_HANDLE_CLASS;

typedef int LPOVERLAPPED_COMPLETION_ROUTINE;

typedef enum {
    PropertyStandardQuery = 0,
    PropertyExistsQuery = 1,
    PropertyMaskQuery = 2,
    PropertyQueryMaxDefined = 3,
} STORAGE_QUERY_TYPE;

typedef enum {
    StorageDeviceProperty = 0,
    StorageAdapterProperty = 1,
    StorageDeviceIdProperty = 2,
    StorageDeviceUniqueIdProperty = 3,
    StorageDeviceWriteCacheProperty = 4,
    StorageMiniportProperty = 5,
    StorageAccessAlignmentProperty = 6,
    StorageDeviceSeekPenaltyProperty = 7,
    StorageDeviceTrimProperty = 8,
    StorageDeviceWriteAggregationProperty = 9,
    StorageDeviceDeviceTelemetryProperty = 10,
    StorageDeviceLBProvisioningProperty = 11,
    StorageDevicePowerProperty = 12,
    StorageDeviceCopyOffloadProperty = 13,
    StorageDeviceResiliencyProperty = 14,
    StorageDeviceMediumProductType = 15,
    StorageAdapterRpmbProperty = 16,
    StorageAdapterCryptoProperty = 17,
    StorageDeviceIoCapabilityProperty = 48,
    StorageAdapterProtocolSpecificProperty = 49,
    StorageDeviceProtocolSpecificProperty = 50,
    StorageAdapterTemperatureProperty = 51,
    StorageDeviceTemperatureProperty = 52,
    StorageAdapterPhysicalTopologyProperty = 53,
    StorageDevicePhysicalTopologyProperty = 54,
    StorageDeviceAttributesProperty = 55,
    StorageDeviceManagementStatus = 56,
    StorageAdapterSerialNumberProperty = 57,
    StorageDeviceLocationProperty = 58,
    StorageDeviceNumaProperty = 59,
    StorageDeviceZonedDeviceProperty = 60,
    StorageDeviceUnsafeShutdownCount = 61,
    StorageDeviceEnduranceProperty = 62,
} STORAGE_PROPERTY_ID;

typedef int STORAGE_PROPERTY_QUERY;

typedef int STORAGE_DESCRIPTOR_HEADER;

typedef int STORAGE_DEVICE_DESCRIPTOR;

typedef int STORAGE_ADAPTER_DESCRIPTOR;

typedef int STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR;

typedef int STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR;

typedef enum {
    StoragePortCodeSetReserved = 0,
    StoragePortCodeSetStorport = 1,
    StoragePortCodeSetSCSIport = 2,
    StoragePortCodeSetSpaceport = 3,
    StoragePortCodeSetATAport = 4,
    StoragePortCodeSetUSBport = 5,
    StoragePortCodeSetSBP2port = 6,
    StoragePortCodeSetSDport = 7,
} STORAGE_PORT_CODE_SET;

typedef int STORAGE_MINIPORT_DESCRIPTOR;

typedef int STORAGE_DEVICE_ID_DESCRIPTOR;

typedef int DEVICE_SEEK_PENALTY_DESCRIPTOR;

typedef int DEVICE_WRITE_AGGREGATION_DESCRIPTOR;

typedef int DEVICE_TRIM_DESCRIPTOR;

typedef int DEVICE_LB_PROVISIONING_DESCRIPTOR;

typedef int DEVICE_POWER_DESCRIPTOR;

typedef int DEVICE_COPY_OFFLOAD_DESCRIPTOR;

typedef int STORAGE_DEVICE_RESILIENCY_DESCRIPTOR;

typedef enum {
    ProtocolTypeUnknown = 0,
    ProtocolTypeScsi = 1,
    ProtocolTypeAta = 2,
    ProtocolTypeNvme = 3,
    ProtocolTypeSd = 4,
    ProtocolTypeUfs = 5,
    ProtocolTypeProprietary = 126,
    ProtocolTypeMaxReserved = 127,
} STORAGE_PROTOCOL_TYPE;

typedef enum {
    NVMeDataTypeUnknown = 0,
    NVMeDataTypeIdentify = 1,
    NVMeDataTypeLogPage = 2,
    NVMeDataTypeFeature = 3,
} STORAGE_PROTOCOL_NVME_DATA_TYPE;

typedef enum {
    AtaDataTypeUnknown = 0,
    AtaDataTypeIdentify = 1,
    AtaDataTypeLogPage = 2,
} STORAGE_PROTOCOL_ATA_DATA_TYPE;

typedef int STORAGE_PROTOCOL_SPECIFIC_DATA;

typedef int STORAGE_PROTOCOL_DATA_DESCRIPTOR;

typedef int STORAGE_TEMPERATURE_INFO;

typedef int STORAGE_TEMPERATURE_DATA_DESCRIPTOR;

typedef int STORAGE_TEMPERATURE_THRESHOLD;

typedef enum {
    FormFactorUnknown = 0,
    FormFactor3_5 = 1,
    FormFactor2_5 = 2,
    FormFactor1_8 = 3,
    FormFactor1_8Less = 4,
    FormFactorEmbedded = 5,
    FormFactorMemoryCard = 6,
    FormFactormSata = 7,
    FormFactorM_2 = 8,
    FormFactorPCIeBoard = 9,
    FormFactorDimm = 10,
} STORAGE_DEVICE_FORM_FACTOR;

typedef enum {
    HealthStatusUnknown = 0,
    HealthStatusNormal = 1,
    HealthStatusThrottled = 2,
    HealthStatusWarning = 3,
    HealthStatusDisabled = 4,
    HealthStatusFailed = 5,
} STORAGE_COMPONENT_HEALTH_STATUS;

typedef int STORAGE_SPEC_VERSION;

typedef int STORAGE_PHYSICAL_DEVICE_DATA;

typedef int STORAGE_PHYSICAL_ADAPTER_DATA;

typedef int STORAGE_PHYSICAL_NODE_DATA;

typedef int STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR;

typedef int STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR;

typedef int STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR;

typedef int STORAGE_ADAPTER_SERIAL_NUMBER;

typedef enum {
    WriteCacheTypeUnknown = 0,
    WriteCacheTypeNone = 1,
    WriteCacheTypeWriteBack = 2,
    WriteCacheTypeWriteThrough = 3,
} WRITE_CACHE_TYPE;

typedef enum {
    WriteCacheEnableUnknown = 0,
    WriteCacheDisabled = 1,
    WriteCacheEnabled = 2,
} WRITE_CACHE_ENABLE;

typedef enum {
    WriteCacheChangeUnknown = 0,
    WriteCacheNotChangeable = 1,
    WriteCacheChangeable = 2,
} WRITE_CACHE_CHANGE;

typedef enum {
    WriteThroughUnknown = 0,
    WriteThroughNotSupported = 1,
    WriteThroughSupported = 2,
} WRITE_THROUGH;

typedef int STORAGE_WRITE_CACHE_PROPERTY;

typedef enum {
    StorageDevicePowerCapUnitsPercent = 0,
    StorageDevicePowerCapUnitsMilliwatts = 1,
} STORAGE_DEVICE_POWER_CAP_UNITS;

typedef int STORAGE_DEVICE_POWER_CAP;

typedef int STORAGE_HW_FIRMWARE_DOWNLOAD;

typedef int STORAGE_HW_FIRMWARE_ACTIVATE;

typedef int STORAGE_PROTOCOL_COMMAND;

typedef enum {
    Unknown = 0,
    F5_1Pt2_512 = 1,
    F3_1Pt44_512 = 2,
    F3_2Pt88_512 = 3,
    F3_20Pt8_512 = 4,
    F3_720_512 = 5,
    F5_360_512 = 6,
    F5_320_512 = 7,
    F5_320_1024 = 8,
    F5_180_512 = 9,
    F5_160_512 = 10,
    RemovableMedia = 11,
    FixedMedia = 12,
    F3_120M_512 = 13,
    F3_640_512 = 14,
    F5_640_512 = 15,
    F5_720_512 = 16,
    F3_1Pt2_512 = 17,
    F3_1Pt23_1024 = 18,
    F5_1Pt23_1024 = 19,
    F3_128Mb_512 = 20,
    F3_230Mb_512 = 21,
    F8_256_128 = 22,
    F3_200Mb_512 = 23,
    F3_240M_512 = 24,
    F3_32M_512 = 25,
} MEDIA_TYPE;

typedef int FORMAT_PARAMETERS;

typedef int FORMAT_EX_PARAMETERS;

typedef int DISK_GEOMETRY;

typedef int PARTITION_INFORMATION;

typedef int SET_PARTITION_INFORMATION;

typedef int DRIVE_LAYOUT_INFORMATION;

typedef int VERIFY_INFORMATION;

typedef int REASSIGN_BLOCKS;

typedef int REASSIGN_BLOCKS_EX;

typedef enum {
    PARTITION_STYLE_MBR = 0,
    PARTITION_STYLE_GPT = 1,
    PARTITION_STYLE_RAW = 2,
} PARTITION_STYLE;

typedef int PARTITION_INFORMATION_GPT;

typedef int PARTITION_INFORMATION_MBR;

typedef int CREATE_DISK_GPT;

typedef int CREATE_DISK_MBR;

typedef int CREATE_DISK;

typedef int GET_LENGTH_INFORMATION;

typedef int PARTITION_INFORMATION_EX;

typedef int DRIVE_LAYOUT_INFORMATION_GPT;

typedef int DRIVE_LAYOUT_INFORMATION_MBR;

typedef int DRIVE_LAYOUT_INFORMATION_EX;

typedef int DISK_INT13_INFO;

typedef int DISK_EX_INT13_INFO;

typedef int DISK_DETECTION_INFO;

typedef int DISK_PARTITION_INFO;

typedef int DISK_GEOMETRY_EX;

typedef int DISK_CACHE_INFORMATION;

typedef int DISK_GROW_PARTITION;

typedef int DISK_PERFORMANCE;

typedef int GET_DISK_ATTRIBUTES;

typedef int SET_DISK_ATTRIBUTES;

typedef int NTFS_VOLUME_DATA_BUFFER;

typedef int NTFS_EXTENDED_VOLUME_DATA;

typedef int STARTING_LCN_INPUT_BUFFER;

typedef int VOLUME_BITMAP_BUFFER;

typedef int STARTING_VCN_INPUT_BUFFER;

typedef int RETRIEVAL_POINTERS_BUFFER;

typedef int NTFS_FILE_RECORD_INPUT_BUFFER;

typedef int NTFS_FILE_RECORD_OUTPUT_BUFFER;

typedef int MOVE_FILE_DATA;

typedef int FIND_BY_SID_DATA;

typedef int FIND_BY_SID_OUTPUT;

typedef int MFT_ENUM_DATA_V0;

typedef int MFT_ENUM_DATA_V1;

typedef int CREATE_USN_JOURNAL_DATA;

typedef int READ_FILE_USN_DATA;

typedef int READ_USN_JOURNAL_DATA_V0;

typedef int READ_USN_JOURNAL_DATA_V1;

typedef int USN_TRACK_MODIFIED_RANGES;

typedef int USN_RANGE_TRACK_OUTPUT;

typedef int USN_RECORD_V2;

typedef int USN_RECORD_V3;

typedef int USN_RECORD_COMMON_HEADER;

typedef int USN_RECORD_EXTENT;

typedef int USN_RECORD_V4;

typedef int USN_RECORD_UNION;

typedef int USN_JOURNAL_DATA_V0;

typedef int USN_JOURNAL_DATA_V1;

typedef int USN_JOURNAL_DATA_V2;

typedef int DELETE_USN_JOURNAL_DATA;

typedef int MARK_HANDLE_INFO;

typedef int FILESYSTEM_STATISTICS;

typedef int FAT_STATISTICS;

typedef int EXFAT_STATISTICS;

typedef int NTFS_STATISTICS;

typedef int FILESYSTEM_STATISTICS_EX;

typedef int NTFS_STATISTICS_EX;

typedef int FILE_OBJECTID_BUFFER;

typedef int FILE_SET_SPARSE_BUFFER;

typedef int FILE_ZERO_DATA_INFORMATION;

typedef int FILE_ALLOCATED_RANGE_BUFFER;

typedef int PLEX_READ_DATA_REQUEST;

typedef int FILE_MAKE_COMPATIBLE_BUFFER;

typedef int FILE_SET_DEFECT_MGMT_BUFFER;

typedef int FILE_QUERY_SPARING_BUFFER;

typedef int FILE_QUERY_ON_DISK_VOL_INFO_BUFFER;

typedef int SHRINK_VOLUME_INFORMATION;

typedef int TXFS_MODIFY_RM;

typedef int TXFS_QUERY_RM_INFORMATION;

typedef int TXFS_GET_METADATA_INFO_OUT;

typedef int TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY;

typedef int TXFS_LIST_TRANSACTION_LOCKED_FILES;

typedef int TXFS_LIST_TRANSACTIONS_ENTRY;

typedef int TXFS_LIST_TRANSACTIONS;

typedef int TXFS_READ_BACKUP_INFORMATION_OUT;

typedef int TXFS_WRITE_BACKUP_INFORMATION;

typedef int TXFS_GET_TRANSACTED_VERSION;

typedef int TXFS_SAVEPOINT_INFORMATION;

typedef int TXFS_CREATE_MINIVERSION_INFO;

typedef int TXFS_TRANSACTION_ACTIVE_INFO;

typedef int BOOT_AREA_INFO;

typedef int RETRIEVAL_POINTER_BASE;

typedef int FILE_SYSTEM_RECOGNITION_INFORMATION;

typedef int REQUEST_OPLOCK_INPUT_BUFFER;

typedef int REQUEST_OPLOCK_OUTPUT_BUFFER;

typedef int LOOKUP_STREAM_FROM_CLUSTER_INPUT;

typedef int LOOKUP_STREAM_FROM_CLUSTER_OUTPUT;

typedef int LOOKUP_STREAM_FROM_CLUSTER_ENTRY;

typedef int CSV_NAMESPACE_INFO;

typedef enum {
    CsvControlStartRedirectFile = 2,
    CsvControlStopRedirectFile = 3,
    CsvControlQueryRedirectState = 4,
    CsvControlQueryFileRevision = 6,
    CsvControlQueryMdsPath = 8,
    CsvControlQueryFileRevisionFileId128 = 9,
    CsvControlQueryVolumeRedirectState = 10,
    CsvControlEnableUSNRangeModificationTracking = 13,
    CsvControlMarkHandleLocalVolumeMount = 14,
    CsvControlUnmarkHandleLocalVolumeMount = 15,
    CsvControlGetCsvFsMdsPathV2 = 18,
    CsvControlDisableCaching = 19,
    CsvControlEnableCaching = 20,
    CsvControlStartForceDFO = 21,
    CsvControlStopForceDFO = 22,
} CSV_CONTROL_OP;

typedef int CSV_CONTROL_PARAM;

typedef int CSV_QUERY_REDIRECT_STATE;

typedef int CSV_QUERY_FILE_REVISION;

typedef int CSV_QUERY_MDS_PATH;

typedef int CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT;

typedef int CSV_IS_OWNED_BY_CSVFS;

typedef int FILE_LEVEL_TRIM_RANGE;

typedef int FILE_LEVEL_TRIM;

typedef int FILE_LEVEL_TRIM_OUTPUT;

typedef int FSCTL_GET_INTEGRITY_INFORMATION_BUFFER;

typedef int FSCTL_SET_INTEGRITY_INFORMATION_BUFFER;

typedef int REPAIR_COPIES_INPUT;

typedef int REPAIR_COPIES_OUTPUT;

typedef enum {
    FileStorageTierMediaTypeUnspecified = 0,
    FileStorageTierMediaTypeDisk = 1,
    FileStorageTierMediaTypeSsd = 2,
    FileStorageTierMediaTypeScm = 4,
    FileStorageTierMediaTypeMax = 5,
} FILE_STORAGE_TIER_MEDIA_TYPE;

typedef int FILE_STORAGE_TIER;

typedef int FSCTL_QUERY_STORAGE_CLASSES_OUTPUT;

typedef int FSCTL_QUERY_REGION_INFO_INPUT;

typedef int FILE_STORAGE_TIER_REGION;

typedef int FSCTL_QUERY_REGION_INFO_OUTPUT;

typedef int DUPLICATE_EXTENTS_DATA;

typedef int DISK_EXTENT;

typedef int VOLUME_DISK_EXTENTS;

typedef int VOLUME_GET_GPT_ATTRIBUTES_INFORMATION;

typedef int TRANSACTION_NOTIFICATION;

typedef int TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;

typedef int TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;

typedef int TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;

typedef int TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;

typedef int TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;

typedef int KCRM_MARSHAL_HEADER;

typedef int KCRM_TRANSACTION_BLOB;

typedef int KCRM_PROTOCOL_BLOB;

typedef int DISK_SPACE_INFORMATION;

typedef int WIN32_FILE_ATTRIBUTE_DATA;

typedef int BY_HANDLE_FILE_INFORMATION;

typedef int CREATEFILE2_EXTENDED_PARAMETERS;

typedef enum {
    FindStreamInfoStandard = 0,
    FindStreamInfoMaxInfoLevel = 1,
} STREAM_INFO_LEVELS;

typedef int WIN32_FIND_STREAM_DATA;

typedef int VS_FIXEDFILEINFO;

typedef enum {
    NTMS_UNKNOWN = 0,
    NTMS_OBJECT = 1,
    NTMS_CHANGER = 2,
    NTMS_CHANGER_TYPE = 3,
    NTMS_COMPUTER = 4,
    NTMS_DRIVE = 5,
    NTMS_DRIVE_TYPE = 6,
    NTMS_IEDOOR = 7,
    NTMS_IEPORT = 8,
    NTMS_LIBRARY = 9,
    NTMS_LIBREQUEST = 10,
    NTMS_LOGICAL_MEDIA = 11,
    NTMS_MEDIA_POOL = 12,
    NTMS_MEDIA_TYPE = 13,
    NTMS_PARTITION = 14,
    NTMS_PHYSICAL_MEDIA = 15,
    NTMS_STORAGESLOT = 16,
    NTMS_OPREQUEST = 17,
    NTMS_UI_DESTINATION = 18,
    NTMS_NUMBER_OF_OBJECT_TYPES = 19,
} NtmsObjectsTypes;

typedef int NTMS_ASYNC_IO;

typedef enum {
    NTMS_ASYNCSTATE_QUEUED = 0,
    NTMS_ASYNCSTATE_WAIT_RESOURCE = 1,
    NTMS_ASYNCSTATE_WAIT_OPERATOR = 2,
    NTMS_ASYNCSTATE_INPROCESS = 3,
    NTMS_ASYNCSTATE_COMPLETE = 4,
} NtmsAsyncStatus;

typedef enum {
    NTMS_ASYNCOP_MOUNT = 1,
} NtmsAsyncOperations;

typedef enum {
    NTMS_SESSION_QUERYEXPEDITE = 1,
} NtmsSessionOptions;

typedef enum {
    NTMS_MOUNT_READ = 1,
    NTMS_MOUNT_WRITE = 2,
    NTMS_MOUNT_ERROR_NOT_AVAILABLE = 4,
    NTMS_MOUNT_ERROR_IF_UNAVAILABLE = 4,
    NTMS_MOUNT_ERROR_OFFLINE = 8,
    NTMS_MOUNT_ERROR_IF_OFFLINE = 8,
    NTMS_MOUNT_SPECIFIC_DRIVE = 16,
    NTMS_MOUNT_NOWAIT = 32,
} NtmsMountOptions;

typedef enum {
    NTMS_DISMOUNT_DEFERRED = 1,
    NTMS_DISMOUNT_IMMEDIATE = 2,
} NtmsDismountOptions;

typedef enum {
    NTMS_PRIORITY_DEFAULT = 0,
    NTMS_PRIORITY_HIGHEST = 15,
    NTMS_PRIORITY_HIGH = 7,
    NTMS_PRIORITY_NORMAL = 0,
    NTMS_PRIORITY_LOW = -7,
    NTMS_PRIORITY_LOWEST = -15,
} NtmsMountPriority;

typedef int NTMS_MOUNT_INFORMATION;

typedef enum {
    NTMS_ALLOCATE_NEW = 1,
    NTMS_ALLOCATE_NEXT = 2,
    NTMS_ALLOCATE_ERROR_IF_UNAVAILABLE = 4,
} NtmsAllocateOptions;

typedef int NTMS_ALLOCATION_INFORMATION;

typedef enum {
    NTMS_OPEN_EXISTING = 1,
    NTMS_CREATE_NEW = 2,
    NTMS_OPEN_ALWAYS = 3,
} NtmsCreateOptions;

typedef enum {
    NTMS_DRIVESTATE_DISMOUNTED = 0,
    NTMS_DRIVESTATE_MOUNTED = 1,
    NTMS_DRIVESTATE_LOADED = 2,
    NTMS_DRIVESTATE_UNLOADED = 5,
    NTMS_DRIVESTATE_BEING_CLEANED = 6,
    NTMS_DRIVESTATE_DISMOUNTABLE = 7,
} NtmsDriveState;

typedef int NTMS_DRIVEINFORMATIONA;

typedef int NTMS_DRIVEINFORMATIONW;

typedef enum {
    NTMS_LIBRARYTYPE_UNKNOWN = 0,
    NTMS_LIBRARYTYPE_OFFLINE = 1,
    NTMS_LIBRARYTYPE_ONLINE = 2,
    NTMS_LIBRARYTYPE_STANDALONE = 3,
} NtmsLibraryType;

typedef enum {
    NTMS_LIBRARYFLAG_FIXEDOFFLINE = 1,
    NTMS_LIBRARYFLAG_CLEANERPRESENT = 2,
    NTMS_LIBRARYFLAG_AUTODETECTCHANGE = 4,
    NTMS_LIBRARYFLAG_IGNORECLEANERUSESREMAINING = 8,
    NTMS_LIBRARYFLAG_RECOGNIZECLEANERBARCODE = 16,
} NtmsLibraryFlags;

typedef enum {
    NTMS_INVENTORY_NONE = 0,
    NTMS_INVENTORY_FAST = 1,
    NTMS_INVENTORY_OMID = 2,
    NTMS_INVENTORY_DEFAULT = 3,
    NTMS_INVENTORY_SLOT = 4,
    NTMS_INVENTORY_STOP = 5,
    NTMS_INVENTORY_MAX = 6,
} NtmsInventoryMethod;

typedef int NTMS_LIBRARYINFORMATION;

typedef int NTMS_CHANGERINFORMATIONA;

typedef int NTMS_CHANGERINFORMATIONW;

typedef enum {
    NTMS_SLOTSTATE_UNKNOWN = 0,
    NTMS_SLOTSTATE_FULL = 1,
    NTMS_SLOTSTATE_EMPTY = 2,
    NTMS_SLOTSTATE_NOTPRESENT = 3,
    NTMS_SLOTSTATE_NEEDSINVENTORY = 4,
} NtmsSlotState;

typedef int NTMS_STORAGESLOTINFORMATION;

typedef enum {
    NTMS_DOORSTATE_UNKNOWN = 0,
    NTMS_DOORSTATE_CLOSED = 1,
    NTMS_DOORSTATE_OPEN = 2,
} NtmsDoorState;

typedef int NTMS_IEDOORINFORMATION;

typedef enum {
    NTMS_PORTPOSITION_UNKNOWN = 0,
    NTMS_PORTPOSITION_EXTENDED = 1,
    NTMS_PORTPOSITION_RETRACTED = 2,
} NtmsPortPosition;

typedef enum {
    NTMS_PORTCONTENT_UNKNOWN = 0,
    NTMS_PORTCONTENT_FULL = 1,
    NTMS_PORTCONTENT_EMPTY = 2,
} NtmsPortContent;

typedef int NTMS_IEPORTINFORMATION;

typedef enum {
    NTMS_BARCODESTATE_OK = 1,
    NTMS_BARCODESTATE_UNREADABLE = 2,
} NtmsBarCodeState;

typedef enum {
    NTMS_MEDIASTATE_IDLE = 0,
    NTMS_MEDIASTATE_INUSE = 1,
    NTMS_MEDIASTATE_MOUNTED = 2,
    NTMS_MEDIASTATE_LOADED = 3,
    NTMS_MEDIASTATE_UNLOADED = 4,
    NTMS_MEDIASTATE_OPERROR = 5,
    NTMS_MEDIASTATE_OPREQ = 6,
} NtmsMediaState;

typedef int NTMS_PMIDINFORMATIONA;

typedef int NTMS_PMIDINFORMATIONW;

typedef int NTMS_LMIDINFORMATION;

typedef enum {
    NTMS_PARTSTATE_UNKNOWN = 0,
    NTMS_PARTSTATE_UNPREPARED = 1,
    NTMS_PARTSTATE_INCOMPATIBLE = 2,
    NTMS_PARTSTATE_DECOMMISSIONED = 3,
    NTMS_PARTSTATE_AVAILABLE = 4,
    NTMS_PARTSTATE_ALLOCATED = 5,
    NTMS_PARTSTATE_COMPLETE = 6,
    NTMS_PARTSTATE_FOREIGN = 7,
    NTMS_PARTSTATE_IMPORT = 8,
    NTMS_PARTSTATE_RESERVED = 9,
} NtmsPartitionState;

typedef int NTMS_PARTITIONINFORMATIONA;

typedef int NTMS_PARTITIONINFORMATIONW;

typedef enum {
    NTMS_POOLTYPE_UNKNOWN = 0,
    NTMS_POOLTYPE_SCRATCH = 1,
    NTMS_POOLTYPE_FOREIGN = 2,
    NTMS_POOLTYPE_IMPORT = 3,
    NTMS_POOLTYPE_APPLICATION = 1000,
} NtmsPoolType;

typedef enum {
    NTMS_ALLOCATE_FROMSCRATCH = 1,
} NtmsAllocationPolicy;

typedef enum {
    NTMS_DEALLOCATE_TOSCRATCH = 1,
} NtmsDeallocationPolicy;

typedef int NTMS_MEDIAPOOLINFORMATION;

typedef enum {
    NTMS_MEDIARW_UNKNOWN = 0,
    NTMS_MEDIARW_REWRITABLE = 1,
    NTMS_MEDIARW_WRITEONCE = 2,
    NTMS_MEDIARW_READONLY = 3,
} NtmsReadWriteCharacteristics;

typedef int NTMS_MEDIATYPEINFORMATION;

typedef int NTMS_DRIVETYPEINFORMATIONA;

typedef int NTMS_DRIVETYPEINFORMATIONW;

typedef int NTMS_CHANGERTYPEINFORMATIONA;

typedef int NTMS_CHANGERTYPEINFORMATIONW;

typedef enum {
    NTMS_LM_REMOVE = 0,
    NTMS_LM_DISABLECHANGER = 1,
    NTMS_LM_DISABLELIBRARY = 1,
    NTMS_LM_ENABLECHANGER = 2,
    NTMS_LM_ENABLELIBRARY = 2,
    NTMS_LM_DISABLEDRIVE = 3,
    NTMS_LM_ENABLEDRIVE = 4,
    NTMS_LM_DISABLEMEDIA = 5,
    NTMS_LM_ENABLEMEDIA = 6,
    NTMS_LM_UPDATEOMID = 7,
    NTMS_LM_INVENTORY = 8,
    NTMS_LM_DOORACCESS = 9,
    NTMS_LM_EJECT = 10,
    NTMS_LM_EJECTCLEANER = 11,
    NTMS_LM_INJECT = 12,
    NTMS_LM_INJECTCLEANER = 13,
    NTMS_LM_PROCESSOMID = 14,
    NTMS_LM_CLEANDRIVE = 15,
    NTMS_LM_DISMOUNT = 16,
    NTMS_LM_MOUNT = 17,
    NTMS_LM_WRITESCRATCH = 18,
    NTMS_LM_CLASSIFY = 19,
    NTMS_LM_RESERVECLEANER = 20,
    NTMS_LM_RELEASECLEANER = 21,
    NTMS_LM_MAXWORKITEM = 22,
} NtmsLmOperation;

typedef enum {
    NTMS_LM_QUEUED = 0,
    NTMS_LM_INPROCESS = 1,
    NTMS_LM_PASSED = 2,
    NTMS_LM_FAILED = 3,
    NTMS_LM_INVALID = 4,
    NTMS_LM_WAITING = 5,
    NTMS_LM_DEFERRED = 6,
    NTMS_LM_DEFFERED = 6,
    NTMS_LM_CANCELLED = 7,
    NTMS_LM_STOPPED = 8,
} NtmsLmState;

typedef int NTMS_LIBREQUESTINFORMATIONA;

typedef int NTMS_LIBREQUESTINFORMATIONW;

typedef enum {
    NTMS_OPREQ_UNKNOWN = 0,
    NTMS_OPREQ_NEWMEDIA = 1,
    NTMS_OPREQ_CLEANER = 2,
    NTMS_OPREQ_DEVICESERVICE = 3,
    NTMS_OPREQ_MOVEMEDIA = 4,
    NTMS_OPREQ_MESSAGE = 5,
} NtmsOpreqCommand;

typedef enum {
    NTMS_OPSTATE_UNKNOWN = 0,
    NTMS_OPSTATE_SUBMITTED = 1,
    NTMS_OPSTATE_ACTIVE = 2,
    NTMS_OPSTATE_INPROGRESS = 3,
    NTMS_OPSTATE_REFUSED = 4,
    NTMS_OPSTATE_COMPLETE = 5,
} NtmsOpreqState;

typedef int NTMS_OPREQUESTINFORMATIONA;

typedef int NTMS_OPREQUESTINFORMATIONW;

typedef int NTMS_COMPUTERINFORMATION;

typedef enum {
    NTMS_LIBREQFLAGS_NOAUTOPURGE = 1,
    NTMS_LIBREQFLAGS_NOFAILEDPURGE = 2,
} NtmsLibRequestFlags;

typedef enum {
    NTMS_OPREQFLAGS_NOAUTOPURGE = 1,
    NTMS_OPREQFLAGS_NOFAILEDPURGE = 2,
    NTMS_OPREQFLAGS_NOALERTS = 16,
    NTMS_OPREQFLAGS_NOTRAYICON = 32,
} NtmsOpRequestFlags;

typedef enum {
    NTMS_POOLPOLICY_PURGEOFFLINESCRATCH = 1,
    NTMS_POOLPOLICY_KEEPOFFLINEIMPORT = 2,
} NtmsMediaPoolPolicy;

typedef enum {
    NTMS_READY = 0,
    NTMS_INITIALIZING = 10,
    NTMS_NEEDS_SERVICE = 20,
    NTMS_NOT_PRESENT = 21,
} NtmsOperationalState;

typedef int NTMS_OBJECTINFORMATIONA;

typedef int NTMS_OBJECTINFORMATIONW;

typedef int NTMS_I1_LIBRARYINFORMATION;

typedef int NTMS_I1_LIBREQUESTINFORMATIONA;

typedef int NTMS_I1_LIBREQUESTINFORMATIONW;

typedef int NTMS_I1_PMIDINFORMATIONA;

typedef int NTMS_I1_PMIDINFORMATIONW;

typedef int NTMS_I1_PARTITIONINFORMATIONA;

typedef int NTMS_I1_PARTITIONINFORMATIONW;

typedef int NTMS_I1_OPREQUESTINFORMATIONA;

typedef int NTMS_I1_OPREQUESTINFORMATIONW;

typedef int NTMS_I1_OBJECTINFORMATIONA;

typedef int NTMS_I1_OBJECTINFORMATIONW;

typedef enum {
    NTMS_ERROR_ON_DUPLICATE = 1,
} NtmsCreateNtmsMediaOptions;

typedef enum {
    NTMS_ENUM_DEFAULT = 0,
    NTMS_ENUM_ROOTPOOL = 1,
} NtmsEnumerateOption;

typedef enum {
    NTMS_EJECT_START = 0,
    NTMS_EJECT_STOP = 1,
    NTMS_EJECT_QUEUE = 2,
    NTMS_EJECT_FORCE = 3,
    NTMS_EJECT_IMMEDIATE = 4,
    NTMS_EJECT_ASK_USER = 5,
} NtmsEjectOperation;

typedef enum {
    NTMS_INJECT_START = 0,
    NTMS_INJECT_STOP = 1,
    NTMS_INJECT_RETRACT = 2,
    NTMS_INJECT_STARTMANY = 3,
} NtmsInjectOperation;

typedef int NTMS_FILESYSTEM_INFO;

typedef enum {
    NTMS_UNKNOWN_DRIVE = 0,
} NtmsDriveType;

typedef enum {
    NTMS_USE_ACCESS = 1,
    NTMS_MODIFY_ACCESS = 2,
    NTMS_CONTROL_ACCESS = 4,
} NtmsAccessMask;

typedef enum {
    NTMS_UITYPE_INVALID = 0,
    NTMS_UITYPE_INFO = 1,
    NTMS_UITYPE_REQ = 2,
    NTMS_UITYPE_ERR = 3,
    NTMS_UITYPE_MAX = 4,
} NtmsUITypes;

typedef enum {
    NTMS_UIDEST_ADD = 1,
    NTMS_UIDEST_DELETE = 2,
    NTMS_UIDEST_DELETEALL = 3,
    NTMS_UIOPERATION_MAX = 4,
} NtmsUIOperations;

typedef enum {
    NTMS_OBJ_UPDATE = 1,
    NTMS_OBJ_INSERT = 2,
    NTMS_OBJ_DELETE = 3,
    NTMS_EVENT_SIGNAL = 4,
    NTMS_EVENT_COMPLETE = 5,
} NtmsNotificationOperations;

typedef int NTMS_NOTIFICATIONINFORMATION;

typedef int MediaLabelInfo;

typedef int MAXMEDIALABEL;

typedef int CLAIMMEDIALABEL;

typedef int CLAIMMEDIALABELEX;

typedef int CLS_LSN;

typedef enum {
    ClsContextNone = 0,
    ClsContextUndoNext = 1,
    ClsContextPrevious = 2,
    ClsContextForward = 3,
} CLS_CONTEXT_MODE;

typedef enum {
    ClfsContextNone = 0,
    ClfsContextUndoNext = 1,
    ClfsContextPrevious = 2,
    ClfsContextForward = 3,
} CLFS_CONTEXT_MODE;

typedef int CLFS_NODE_ID;

typedef int CLS_WRITE_ENTRY;

typedef int CLS_INFORMATION;

typedef int CLFS_LOG_NAME_INFORMATION;

typedef int CLFS_STREAM_ID_INFORMATION;

typedef int CLFS_PHYSICAL_LSN_INFORMATION;

typedef int CLS_CONTAINER_INFORMATION;

typedef enum {
    ClfsLogBasicInformation = 0,
    ClfsLogBasicInformationPhysical = 1,
    ClfsLogPhysicalNameInformation = 2,
    ClfsLogStreamIdentifierInformation = 3,
    ClfsLogSystemMarkingInformation = 4,
    ClfsLogPhysicalLsnInformation = 5,
} CLS_LOG_INFORMATION_CLASS;

typedef enum {
    ClsIoStatsDefault = 0,
    ClsIoStatsMax = 65535,
} CLS_IOSTATS_CLASS;

typedef enum {
    ClfsIoStatsDefault = 0,
    ClfsIoStatsMax = 65535,
} CLFS_IOSTATS_CLASS;

typedef int CLS_IO_STATISTICS_HEADER;

typedef int CLS_IO_STATISTICS;

typedef int CLS_SCAN_CONTEXT;

typedef int CLS_ARCHIVE_DESCRIPTOR;

typedef int CLFS_BLOCK_ALLOCATION;

typedef int CLFS_BLOCK_DEALLOCATION;

typedef enum {
    ClfsLogArchiveEnabled = 1,
    ClfsLogArchiveDisabled = 2,
} CLFS_LOG_ARCHIVE_MODE;

typedef int PCLFS_COMPLETION_ROUTINE;

typedef enum {
    ClfsMgmtPolicyMaximumSize = 0,
    ClfsMgmtPolicyMinimumSize = 1,
    ClfsMgmtPolicyNewContainerSize = 2,
    ClfsMgmtPolicyGrowthRate = 3,
    ClfsMgmtPolicyLogTail = 4,
    ClfsMgmtPolicyAutoShrink = 5,
    ClfsMgmtPolicyAutoGrow = 6,
    ClfsMgmtPolicyNewContainerPrefix = 7,
    ClfsMgmtPolicyNewContainerSuffix = 8,
    ClfsMgmtPolicyNewContainerExtension = 9,
    ClfsMgmtPolicyInvalid = 10,
} CLFS_MGMT_POLICY_TYPE;

typedef int CLFS_MGMT_POLICY;

typedef enum {
    ClfsMgmtAdvanceTailNotification = 0,
    ClfsMgmtLogFullHandlerNotification = 1,
    ClfsMgmtLogUnpinnedNotification = 2,
    ClfsMgmtLogWriteNotification = 3,
} CLFS_MGMT_NOTIFICATION_TYPE;

typedef int CLFS_MGMT_NOTIFICATION;

typedef int PLOG_TAIL_ADVANCE_CALLBACK;

typedef int PLOG_FULL_HANDLER_CALLBACK;

typedef int PLOG_UNPINNED_CALLBACK;

typedef int LOG_MANAGEMENT_CALLBACKS;

typedef int DISKQUOTA_USER_INFORMATION;

// TODO: this type is limited to platform 'windows5.1.2600'
typedef int IDiskQuotaUser;

// TODO: this type is limited to platform 'windows5.1.2600'
typedef int IEnumDiskQuotaUsers;

// TODO: this type is limited to platform 'windows5.1.2600'
typedef int IDiskQuotaUserBatch;

// TODO: this type is limited to platform 'windows5.1.2600'
typedef int IDiskQuotaControl;

// TODO: this type is limited to platform 'windows5.1.2600'
typedef int IDiskQuotaEvents;

typedef int EFS_CERTIFICATE_BLOB;

typedef int EFS_HASH_BLOB;

typedef int EFS_RPC_BLOB;

typedef int EFS_PIN_BLOB;

typedef int EFS_KEY_INFO;

typedef int EFS_COMPATIBILITY_INFO;

typedef int EFS_VERSION_INFO;

typedef int EFS_DECRYPTION_STATUS_INFO;

typedef int EFS_ENCRYPTION_STATUS_INFO;

typedef int ENCRYPTION_CERTIFICATE;

typedef int ENCRYPTION_CERTIFICATE_HASH;

typedef int ENCRYPTION_CERTIFICATE_HASH_LIST;

typedef int ENCRYPTION_CERTIFICATE_LIST;

typedef int ENCRYPTED_FILE_METADATA_SIGNATURE;

typedef int ENCRYPTION_PROTECTOR;

typedef int ENCRYPTION_PROTECTOR_LIST;

typedef int WofEnumEntryProc;

typedef int WofEnumFilesProc;

typedef int WIM_ENTRY_INFO;

typedef int WIM_EXTERNAL_FILE_INFO;

typedef int WOF_FILE_COMPRESSION_INFO_V0;

typedef int WOF_FILE_COMPRESSION_INFO_V1;

typedef int TXF_ID;

typedef int TXF_LOG_RECORD_BASE;

typedef int TXF_LOG_RECORD_WRITE;

typedef int TXF_LOG_RECORD_TRUNCATE;

typedef int TXF_LOG_RECORD_AFFECTED_FILE;

typedef int VOLUME_FAILOVER_SET;

typedef int VOLUME_NUMBER;

typedef int VOLUME_LOGICAL_OFFSET;

typedef int VOLUME_PHYSICAL_OFFSET;

typedef int VOLUME_PHYSICAL_OFFSETS;

typedef int VOLUME_READ_PLEX_INPUT;

typedef int VOLUME_SET_GPT_ATTRIBUTES_INFORMATION;

typedef int VOLUME_GET_BC_PROPERTIES_INPUT;

typedef int VOLUME_GET_BC_PROPERTIES_OUTPUT;

typedef int VOLUME_ALLOCATE_BC_STREAM_INPUT;

typedef int VOLUME_ALLOCATE_BC_STREAM_OUTPUT;

typedef int FILE_EXTENT;

typedef int VOLUME_CRITICAL_IO;

typedef int VOLUME_ALLOCATION_HINT_INPUT;

typedef int VOLUME_ALLOCATION_HINT_OUTPUT;

typedef int VOLUME_SHRINK_INFO;

typedef int SHARE_INFO_0;

typedef int SHARE_INFO_1;

typedef int SHARE_INFO_2;

typedef int SHARE_INFO_501;

typedef int SHARE_INFO_502;

typedef int SHARE_INFO_503;

typedef int SHARE_INFO_1004;

typedef int SHARE_INFO_1005;

typedef int SHARE_INFO_1006;

typedef int SHARE_INFO_1501;

typedef int SHARE_INFO_1503;

typedef int SERVER_ALIAS_INFO_0;

typedef int SESSION_INFO_0;

typedef int SESSION_INFO_1;

typedef int SESSION_INFO_2;

typedef int SESSION_INFO_10;

typedef int SESSION_INFO_502;

typedef int CONNECTION_INFO_0;

typedef int CONNECTION_INFO_1;

typedef int FILE_INFO_2;

typedef int FILE_INFO_3;

typedef enum {
    QUIC = 0,
} SERVER_CERTIFICATE_TYPE;

typedef int SERVER_CERTIFICATE_INFO_0;

typedef int STAT_WORKSTATION_0;

typedef int STAT_SERVER_0;

typedef int PFN_IO_COMPLETION;

typedef int FH_OVERLAPPED;

typedef int FIO_CONTEXT;

typedef int FCACHE_CREATE_CALLBACK;

typedef int FCACHE_RICHCREATE_CALLBACK;

typedef int CACHE_KEY_COMPARE;

typedef int CACHE_KEY_HASH;

typedef int CACHE_READ_CALLBACK;

typedef int CACHE_DESTROY_CALLBACK;

typedef int CACHE_ACCESS_CHECK;

typedef int NAME_CACHE_CONTEXT;

typedef int OFSTRUCT;

typedef int PFE_EXPORT_FUNC;

typedef int PFE_IMPORT_FUNC;

typedef int WIN32_STREAM_ID;

typedef int LPPROGRESS_ROUTINE;

typedef enum {
    COPYFILE2_CALLBACK_NONE = 0,
    COPYFILE2_CALLBACK_CHUNK_STARTED = 1,
    COPYFILE2_CALLBACK_CHUNK_FINISHED = 2,
    COPYFILE2_CALLBACK_STREAM_STARTED = 3,
    COPYFILE2_CALLBACK_STREAM_FINISHED = 4,
    COPYFILE2_CALLBACK_POLL_CONTINUE = 5,
    COPYFILE2_CALLBACK_ERROR = 6,
    COPYFILE2_CALLBACK_MAX = 7,
} COPYFILE2_MESSAGE_TYPE;

typedef enum {
    COPYFILE2_PROGRESS_CONTINUE = 0,
    COPYFILE2_PROGRESS_CANCEL = 1,
    COPYFILE2_PROGRESS_STOP = 2,
    COPYFILE2_PROGRESS_QUIET = 3,
    COPYFILE2_PROGRESS_PAUSE = 4,
} COPYFILE2_MESSAGE_ACTION;

typedef enum {
    COPYFILE2_PHASE_NONE = 0,
    COPYFILE2_PHASE_PREPARE_SOURCE = 1,
    COPYFILE2_PHASE_PREPARE_DEST = 2,
    COPYFILE2_PHASE_READ_SOURCE = 3,
    COPYFILE2_PHASE_WRITE_DESTINATION = 4,
    COPYFILE2_PHASE_SERVER_COPY = 5,
    COPYFILE2_PHASE_NAMEGRAFT_COPY = 6,
    COPYFILE2_PHASE_MAX = 7,
} COPYFILE2_COPY_PHASE;

typedef int COPYFILE2_MESSAGE;

typedef int PCOPYFILE2_PROGRESS_ROUTINE;

typedef int COPYFILE2_EXTENDED_PARAMETERS;

typedef int FILE_BASIC_INFO;

typedef int FILE_STANDARD_INFO;

typedef int FILE_NAME_INFO;

typedef int FILE_RENAME_INFO;

typedef int FILE_ALLOCATION_INFO;

typedef int FILE_END_OF_FILE_INFO;

typedef int FILE_STREAM_INFO;

typedef int FILE_COMPRESSION_INFO;

typedef int FILE_ATTRIBUTE_TAG_INFO;

typedef int FILE_DISPOSITION_INFO;

typedef int FILE_ID_BOTH_DIR_INFO;

typedef int FILE_FULL_DIR_INFO;

typedef enum {
    IoPriorityHintVeryLow = 0,
    IoPriorityHintLow = 1,
    IoPriorityHintNormal = 2,
    MaximumIoPriorityHintType = 3,
} PRIORITY_HINT;

typedef int FILE_IO_PRIORITY_HINT_INFO;

typedef int FILE_ALIGNMENT_INFO;

typedef int FILE_STORAGE_INFO;

typedef int FILE_ID_INFO;

typedef int FILE_ID_EXTD_DIR_INFO;

typedef int FILE_REMOTE_PROTOCOL_INFO;

typedef enum {
    FileIdType = 0,
    ObjectIdType = 1,
    ExtendedFileIdType = 2,
    MaximumFileIdType = 3,
} FILE_ID_TYPE;

typedef int FILE_ID_DESCRIPTOR;


//--------------------------------------------------------------------------------
// Section: Functions (402)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void SearchPathW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void SearchPathA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void CompareFileTime();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CreateDirectoryA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CreateDirectoryW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*HANDLE*/void CreateFileA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*HANDLE*/void CreateFileW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void DefineDosDeviceW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void DeleteFileA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void DeleteFileW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void DeleteVolumeMountPointW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void FileTimeToLocalFileTime();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void FindClose();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void FindCloseChangeNotification();

// TODO: this type is limited to platform 'windows5.1.2600'
/*FindChangeNotificationHandle*/void FindFirstChangeNotificationA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*FindChangeNotificationHandle*/void FindFirstChangeNotificationW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*FindFileHandle*/void FindFirstFileA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*FindFileHandle*/void FindFirstFileW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*FindFileHandle*/void FindFirstFileExA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*FindFileHandle*/void FindFirstFileExW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*FindVolumeHandle*/void FindFirstVolumeW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void FindNextChangeNotification();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void FindNextFileA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void FindNextFileW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void FindNextVolumeW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void FindVolumeClose();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void FlushFileBuffers();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void GetDiskFreeSpaceA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void GetDiskFreeSpaceW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void GetDiskFreeSpaceExA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void GetDiskFreeSpaceExW();

/*HRESULT*/void GetDiskSpaceInformationA();

/*HRESULT*/void GetDiskSpaceInformationW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetDriveTypeA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetDriveTypeW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetFileAttributesA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetFileAttributesW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void GetFileAttributesExA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void GetFileAttributesExW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void GetFileInformationByHandle();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetFileSize();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void GetFileSizeEx();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetFileType();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetFinalPathNameByHandleA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetFinalPathNameByHandleW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void GetFileTime();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetFullPathNameW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetFullPathNameA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetLogicalDrives();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetLogicalDriveStringsW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetLongPathNameA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetLongPathNameW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetShortPathNameW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetTempFileNameW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void GetVolumeInformationByHandleW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void GetVolumeInformationW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void GetVolumePathNameW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void LocalFileTimeToFileTime();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void LockFile();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void LockFileEx();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void QueryDosDeviceW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void ReadFile();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void ReadFileEx();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void ReadFileScatter();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void RemoveDirectoryA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void RemoveDirectoryW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void SetEndOfFile();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void SetFileAttributesA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void SetFileAttributesW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void SetFileInformationByHandle();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void SetFilePointer();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void SetFilePointerEx();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void SetFileTime();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void SetFileValidData();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void UnlockFile();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void UnlockFileEx();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void WriteFile();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void WriteFileEx();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void WriteFileGather();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetTempPathW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void GetVolumeNameForVolumeMountPointW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void GetVolumePathNamesForVolumeNameW();

// TODO: this type is limited to platform 'windows8.0'
/*HANDLE*/void CreateFile2();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void SetFileIoOverlappedRange();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetCompressedFileSizeA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetCompressedFileSizeW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*FindStreamHandle*/void FindFirstStreamW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void FindNextStreamW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void AreFileApisANSI();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetTempPathA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*FindFileNameHandle*/void FindFirstFileNameW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void FindNextFileNameW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void GetVolumeInformationA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetTempFileNameA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*void*/void SetFileApisToOEM();

// TODO: this type is limited to platform 'windows5.1.2600'
/*void*/void SetFileApisToANSI();

/*BOOL*/void CopyFileFromAppW();

/*BOOL*/void CreateDirectoryFromAppW();

/*HANDLE*/void CreateFileFromAppW();

/*HANDLE*/void CreateFile2FromAppW();

/*BOOL*/void DeleteFileFromAppW();

/*HANDLE*/void FindFirstFileExFromAppW();

/*BOOL*/void GetFileAttributesExFromAppW();

/*BOOL*/void MoveFileFromAppW();

/*BOOL*/void RemoveDirectoryFromAppW();

/*BOOL*/void ReplaceFileFromAppW();

/*BOOL*/void SetFileAttributesFromAppW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*HANDLE*/void CreateIoCompletionPort();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void GetQueuedCompletionStatus();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void GetQueuedCompletionStatusEx();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void PostQueuedCompletionStatus();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void CancelIoEx();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CancelIo();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void CancelSynchronousIo();

// TODO: this type is limited to platform 'windows5.0'
/*VER_FIND_FILE_STATUS*/void VerFindFileA();

// TODO: this type is limited to platform 'windows5.0'
/*VER_FIND_FILE_STATUS*/void VerFindFileW();

// TODO: this type is limited to platform 'windows5.0'
/*VER_INSTALL_FILE_STATUS*/void VerInstallFileA();

// TODO: this type is limited to platform 'windows5.0'
/*VER_INSTALL_FILE_STATUS*/void VerInstallFileW();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void GetFileVersionInfoSizeA();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void GetFileVersionInfoSizeW();

// TODO: this type is limited to platform 'windows5.0'
/*BOOL*/void GetFileVersionInfoA();

// TODO: this type is limited to platform 'windows5.0'
/*BOOL*/void GetFileVersionInfoW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetFileVersionInfoSizeExA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetFileVersionInfoSizeExW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void GetFileVersionInfoExA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void GetFileVersionInfoExW();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void VerLanguageNameA();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void VerLanguageNameW();

// TODO: this type is limited to platform 'windows5.0'
/*BOOL*/void VerQueryValueA();

// TODO: this type is limited to platform 'windows5.0'
/*BOOL*/void VerQueryValueW();

/*BOOLEAN*/void LsnEqual();

/*BOOLEAN*/void LsnLess();

/*BOOLEAN*/void LsnGreater();

/*BOOLEAN*/void LsnNull();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void LsnContainer();

// TODO: this type is limited to platform 'windows6.0.6000'
/*CLS_LSN*/void LsnCreate();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void LsnBlockOffset();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void LsnRecordSequence();

/*BOOLEAN*/void LsnInvalid();

/*CLS_LSN*/void LsnIncrement();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HANDLE*/void CreateLogFile();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void DeleteLogByHandle();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void DeleteLogFile();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void AddLogContainer();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void AddLogContainerSet();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void RemoveLogContainer();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void RemoveLogContainerSet();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void SetLogArchiveTail();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void SetEndOfLog();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void TruncateLog();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void CreateLogContainerScanContext();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void ScanLogContainers();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void AlignReservedLog();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void AllocReservedLog();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void FreeReservedLog();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void GetLogFileInformation();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void SetLogArchiveMode();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void ReadLogRestartArea();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void ReadPreviousLogRestartArea();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WriteLogRestartArea();

/*BOOL*/void GetLogReservationInfo();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void AdvanceLogBase();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void CloseAndResetLogFile();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void CreateLogMarshallingArea();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void DeleteLogMarshallingArea();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void ReserveAndAppendLog();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void ReserveAndAppendLogAligned();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void FlushLogBuffers();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void FlushLogToLsn();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void ReadLogRecord();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void ReadNextLogRecord();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void TerminateReadLog();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void PrepareLogArchive();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void ReadLogArchiveMetadata();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void GetNextLogArchiveExtent();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void TerminateLogArchive();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void ValidateLog();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void GetLogContainerName();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void GetLogIoStatistics();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void RegisterManageableLogClient();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void DeregisterManageableLogClient();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void ReadLogNotification();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void InstallLogPolicy();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void RemoveLogPolicy();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void QueryLogPolicy();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void SetLogFileSizeWithPolicy();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void HandleLogFull();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void LogTailAdvanceFailure();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void RegisterForLogWriteNotification();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void QueryUsersOnEncryptedFile();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void QueryRecoveryAgentsOnEncryptedFile();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void RemoveUsersFromEncryptedFile();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void AddUsersToEncryptedFile();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void SetUserFileEncryptionKey();

/*u32*/void SetUserFileEncryptionKeyEx();

// TODO: this type is limited to platform 'windows5.1.2600'
/*void*/void FreeEncryptionCertificateHashList();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void EncryptionDisable();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void DuplicateEncryptionInfoFile();

/*u32*/void GetEncryptedFileMetadata();

/*u32*/void SetEncryptedFileMetadata();

/*void*/void FreeEncryptedFileMetadata();

/*i32*/void LZStart();

/*void*/void LZDone();

/*i32*/void CopyLZFile();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void LZCopy();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void LZInit();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void GetExpandedNameA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void GetExpandedNameW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void LZOpenFileA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void LZOpenFileW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void LZSeek();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void LZRead();

// TODO: this type is limited to platform 'windows5.1.2600'
/*void*/void LZClose();

/*BOOL*/void WofShouldCompressBinaries();

/*HRESULT*/void WofGetDriverVersion();

/*HRESULT*/void WofSetFileDataLocation();

/*HRESULT*/void WofIsExternalFile();

/*HRESULT*/void WofEnumEntries();

/*HRESULT*/void WofWimAddEntry();

/*HRESULT*/void WofWimEnumFiles();

/*HRESULT*/void WofWimSuspendEntry();

/*HRESULT*/void WofWimRemoveEntry();

/*HRESULT*/void WofWimUpdateEntry();

/*HRESULT*/void WofFileEnumFiles();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void TxfLogCreateFileReadContext();

/*BOOL*/void TxfLogCreateRangeReadContext();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void TxfLogDestroyReadContext();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void TxfLogReadRecords();

/*BOOL*/void TxfReadMetadataInfo();

/*BOOL*/void TxfLogRecordGetFileName();

/*BOOL*/void TxfLogRecordGetGenericType();

/*void*/void TxfSetThreadMiniVersionForCreate();

/*void*/void TxfGetThreadMiniVersionForCreate();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HANDLE*/void CreateTransaction();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HANDLE*/void OpenTransaction();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void CommitTransaction();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void CommitTransactionAsync();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void RollbackTransaction();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void RollbackTransactionAsync();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void GetTransactionId();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void GetTransactionInformation();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void SetTransactionInformation();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HANDLE*/void CreateTransactionManager();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HANDLE*/void OpenTransactionManager();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HANDLE*/void OpenTransactionManagerById();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void RenameTransactionManager();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void RollforwardTransactionManager();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void RecoverTransactionManager();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void GetCurrentClockTransactionManager();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void GetTransactionManagerId();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HANDLE*/void CreateResourceManager();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HANDLE*/void OpenResourceManager();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void RecoverResourceManager();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void GetNotificationResourceManager();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void GetNotificationResourceManagerAsync();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void SetResourceManagerCompletionPort();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HANDLE*/void CreateEnlistment();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HANDLE*/void OpenEnlistment();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void RecoverEnlistment();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void GetEnlistmentRecoveryInformation();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void GetEnlistmentId();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void SetEnlistmentRecoveryInformation();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void PrepareEnlistment();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void PrePrepareEnlistment();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void CommitEnlistment();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void RollbackEnlistment();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void PrePrepareComplete();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void PrepareComplete();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void ReadOnlyEnlistment();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void CommitComplete();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void RollbackComplete();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void SinglePhaseReject();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void NetShareAdd();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void NetShareEnum();

/*u32*/void NetShareEnumSticky();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void NetShareGetInfo();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void NetShareSetInfo();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void NetShareDel();

/*u32*/void NetShareDelSticky();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void NetShareCheck();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void NetShareDelEx();

/*u32*/void NetServerAliasAdd();

/*u32*/void NetServerAliasDel();

/*u32*/void NetServerAliasEnum();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void NetSessionEnum();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void NetSessionDel();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void NetSessionGetInfo();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void NetConnectionEnum();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void NetFileClose();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void NetFileEnum();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void NetFileGetInfo();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void NetStatisticsGet();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void Wow64DisableWow64FsRedirection();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void Wow64RevertWow64FsRedirection();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void GetBinaryTypeA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void GetBinaryTypeW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetShortPathNameA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetLongPathNameTransactedA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetLongPathNameTransactedW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void SetFileCompletionNotificationModes();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void SetFileShortNameA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void SetFileShortNameW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void SetTapePosition();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetTapePosition();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void PrepareTape();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void EraseTape();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void CreateTapePartition();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void WriteTapemark();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetTapeStatus();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetTapeParameters();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void SetTapeParameters();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void EncryptFileA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void EncryptFileW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void DecryptFileA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void DecryptFileW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void FileEncryptionStatusA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void FileEncryptionStatusW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void OpenEncryptedFileRawA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void OpenEncryptedFileRawW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void ReadEncryptedFileRaw();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void WriteEncryptedFileRaw();

// TODO: this type is limited to platform 'windows5.1.2600'
/*void*/void CloseEncryptedFileRaw();

// TODO: this type is limited to platform 'windows5.1.2600'
/*i32*/void OpenFile();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void BackupRead();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void BackupSeek();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void BackupWrite();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetLogicalDriveStringsA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOLEAN*/void Wow64EnableWow64FsRedirection();

// TODO: this type is limited to platform 'windows6.1'
/*BOOL*/void SetSearchPathMode();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CreateDirectoryExA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CreateDirectoryExW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void CreateDirectoryTransactedA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void CreateDirectoryTransactedW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void RemoveDirectoryTransactedA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void RemoveDirectoryTransactedW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetFullPathNameTransactedA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetFullPathNameTransactedW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void DefineDosDeviceA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void QueryDosDeviceA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HANDLE*/void CreateFileTransactedA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HANDLE*/void CreateFileTransactedW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HANDLE*/void ReOpenFile();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void SetFileAttributesTransactedA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void SetFileAttributesTransactedW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void GetFileAttributesTransactedA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void GetFileAttributesTransactedW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetCompressedFileSizeTransactedA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetCompressedFileSizeTransactedW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void DeleteFileTransactedA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void DeleteFileTransactedW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void CheckNameLegalDOS8Dot3A();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void CheckNameLegalDOS8Dot3W();

// TODO: this type is limited to platform 'windows6.0.6000'
/*FindFileHandle*/void FindFirstFileTransactedA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*FindFileHandle*/void FindFirstFileTransactedW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CopyFileA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CopyFileW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CopyFileExA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CopyFileExW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void CopyFileTransactedA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void CopyFileTransactedW();

// TODO: this type is limited to platform 'windows8.0'
/*HRESULT*/void CopyFile2();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void MoveFileA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void MoveFileW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void MoveFileExA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void MoveFileExW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void MoveFileWithProgressA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void MoveFileWithProgressW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void MoveFileTransactedA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void MoveFileTransactedW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void ReplaceFileA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void ReplaceFileW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CreateHardLinkA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CreateHardLinkW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void CreateHardLinkTransactedA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void CreateHardLinkTransactedW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*FindStreamHandle*/void FindFirstStreamTransactedW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*FindFileNameHandle*/void FindFirstFileNameTransactedW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void SetVolumeLabelA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void SetVolumeLabelW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void SetFileBandwidthReservation();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void GetFileBandwidthReservation();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void ReadDirectoryChangesW();

// TODO: this type is limited to platform 'windows10.0.16299'
/*BOOL*/void ReadDirectoryChangesExW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*FindVolumeHandle*/void FindFirstVolumeA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void FindNextVolumeA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*FindVolumeMointPointHandle*/void FindFirstVolumeMountPointA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*FindVolumeMointPointHandle*/void FindFirstVolumeMountPointW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void FindNextVolumeMountPointA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void FindNextVolumeMountPointW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void FindVolumeMountPointClose();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void SetVolumeMountPointA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void SetVolumeMountPointW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void DeleteVolumeMountPointA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void GetVolumeNameForVolumeMountPointA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void GetVolumePathNameA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void GetVolumePathNamesForVolumeNameA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void GetFileInformationByHandleEx();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HANDLE*/void OpenFileById();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOLEAN*/void CreateSymbolicLinkA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOLEAN*/void CreateSymbolicLinkW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOLEAN*/void CreateSymbolicLinkTransactedA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOLEAN*/void CreateSymbolicLinkTransactedW();

