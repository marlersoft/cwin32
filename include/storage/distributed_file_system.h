// NOTE: this file is autogenerated, DO NOT MODIFY
#include "../bootstrap.h"
//--------------------------------------------------------------------------------
// Section: Constants (33)
//--------------------------------------------------------------------------------
#define FSCTL_DFS_BASE (UINT)6
#define DFS_VOLUME_STATES (UINT)15
#define DFS_VOLUME_STATE_OK (UINT)1
#define DFS_VOLUME_STATE_INCONSISTENT (UINT)2
#define DFS_VOLUME_STATE_OFFLINE (UINT)3
#define DFS_VOLUME_STATE_ONLINE (UINT)4
#define DFS_VOLUME_STATE_RESYNCHRONIZE (UINT)16
#define DFS_VOLUME_STATE_STANDBY (UINT)32
#define DFS_VOLUME_STATE_FORCE_SYNC (UINT)64
#define DFS_VOLUME_FLAVORS (UINT)768
#define DFS_VOLUME_FLAVOR_UNUSED1 (UINT)0
#define DFS_VOLUME_FLAVOR_STANDALONE (UINT)256
#define DFS_VOLUME_FLAVOR_AD_BLOB (UINT)512
#define DFS_STORAGE_FLAVOR_UNUSED2 (UINT)768
#define DFS_STORAGE_STATES (UINT)15
#define DFS_STORAGE_STATE_OFFLINE (UINT)1
#define DFS_STORAGE_STATE_ONLINE (UINT)2
#define DFS_STORAGE_STATE_ACTIVE (UINT)4
#define DFS_PROPERTY_FLAG_INSITE_REFERRALS (UINT)1
#define DFS_PROPERTY_FLAG_ROOT_SCALABILITY (UINT)2
#define DFS_PROPERTY_FLAG_SITE_COSTING (UINT)4
#define DFS_PROPERTY_FLAG_TARGET_FAILBACK (UINT)8
#define DFS_PROPERTY_FLAG_CLUSTER_ENABLED (UINT)16
#define DFS_PROPERTY_FLAG_ABDE (UINT)32
#define DFS_ADD_VOLUME (UINT)1
#define DFS_RESTORE_VOLUME (UINT)2
#define NET_DFS_SETDC_FLAGS (UINT)0
#define NET_DFS_SETDC_TIMEOUT (UINT)1
#define NET_DFS_SETDC_INITPKT (UINT)2
#define DFS_SITE_PRIMARY (UINT)1
#define DFS_MOVE_FLAG_REPLACE_IF_EXISTS (UINT)1
#define DFS_FORCE_REMOVE (UINT)2147483648
#define FSCTL_DFS_GET_PKT_ENTRY_STATE (UINT)401340

//--------------------------------------------------------------------------------
// Section: Types (35)
//--------------------------------------------------------------------------------
typedef int DFS_INFO_1_32;

typedef int DFS_INFO_2_32;

typedef int DFS_STORAGE_INFO_0_32;

typedef int DFS_INFO_3_32;

typedef int DFS_INFO_4_32;

typedef enum {
    DfsInvalidPriorityClass = -1,
    DfsSiteCostNormalPriorityClass = 0,
    DfsGlobalHighPriorityClass = 1,
    DfsSiteCostHighPriorityClass = 2,
    DfsSiteCostLowPriorityClass = 3,
    DfsGlobalLowPriorityClass = 4,
} DFS_TARGET_PRIORITY_CLASS;

typedef int DFS_TARGET_PRIORITY;

typedef int DFS_INFO_1;

typedef int DFS_INFO_2;

typedef int DFS_STORAGE_INFO;

typedef int DFS_STORAGE_INFO_1;

typedef int DFS_INFO_3;

typedef int DFS_INFO_4;

typedef int DFS_INFO_5;

typedef int DFS_INFO_6;

typedef int DFS_INFO_7;

typedef int DFS_INFO_8;

typedef int DFS_INFO_9;

typedef int DFS_INFO_50;

typedef int DFS_INFO_100;

typedef int DFS_INFO_101;

typedef int DFS_INFO_102;

typedef int DFS_INFO_103;

typedef int DFS_INFO_104;

typedef int DFS_INFO_105;

typedef int DFS_INFO_106;

typedef int DFS_INFO_107;

typedef int DFS_INFO_150;

typedef int DFS_INFO_200;

typedef int DFS_INFO_300;

typedef int DFS_SITENAME_INFO;

typedef int DFS_SITELIST_INFO;

typedef enum {
    DFS_NAMESPACE_VERSION_ORIGIN_COMBINED = 0,
    DFS_NAMESPACE_VERSION_ORIGIN_SERVER = 1,
    DFS_NAMESPACE_VERSION_ORIGIN_DOMAIN = 2,
} DFS_NAMESPACE_VERSION_ORIGIN;

typedef int DFS_SUPPORTED_NAMESPACE_VERSION_INFO;

typedef int DFS_GET_PKT_ENTRY_STATE_ARG;


//--------------------------------------------------------------------------------
// Section: Functions (22)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void NetDfsAdd();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void NetDfsAddStdRoot();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void NetDfsRemoveStdRoot();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void NetDfsAddFtRoot();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void NetDfsRemoveFtRoot();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void NetDfsRemoveFtRootForced();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void NetDfsRemove();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void NetDfsEnum();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void NetDfsGetInfo();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void NetDfsSetInfo();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void NetDfsGetClientInfo();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void NetDfsSetClientInfo();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void NetDfsMove();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void NetDfsAddRootTarget();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void NetDfsRemoveRootTarget();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void NetDfsGetSecurity();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void NetDfsSetSecurity();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void NetDfsGetStdContainerSecurity();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void NetDfsSetStdContainerSecurity();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void NetDfsGetFtContainerSecurity();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void NetDfsSetFtContainerSecurity();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void NetDfsGetSupportedNamespaceVersion();

