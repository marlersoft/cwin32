// NOTE: this file is autogenerated, DO NOT MODIFY
#include "../bootstrap.h"
//--------------------------------------------------------------------------------
// Section: Constants (2)
//--------------------------------------------------------------------------------
#define VSS_ASSOC_NO_MAX_SPACE (INT)-1
#define VSS_ASSOC_REMOVE (UINT)0

//--------------------------------------------------------------------------------
// Section: Types (70)
//--------------------------------------------------------------------------------
typedef int IVssExamineWriterMetadata;

typedef enum {
    VSS_OBJECT_UNKNOWN = 0,
    VSS_OBJECT_NONE = 1,
    VSS_OBJECT_SNAPSHOT_SET = 2,
    VSS_OBJECT_SNAPSHOT = 3,
    VSS_OBJECT_PROVIDER = 4,
    VSS_OBJECT_TYPE_COUNT = 5,
} VSS_OBJECT_TYPE;

typedef enum {
    VSS_SS_UNKNOWN = 0,
    VSS_SS_PREPARING = 1,
    VSS_SS_PROCESSING_PREPARE = 2,
    VSS_SS_PREPARED = 3,
    VSS_SS_PROCESSING_PRECOMMIT = 4,
    VSS_SS_PRECOMMITTED = 5,
    VSS_SS_PROCESSING_COMMIT = 6,
    VSS_SS_COMMITTED = 7,
    VSS_SS_PROCESSING_POSTCOMMIT = 8,
    VSS_SS_PROCESSING_PREFINALCOMMIT = 9,
    VSS_SS_PREFINALCOMMITTED = 10,
    VSS_SS_PROCESSING_POSTFINALCOMMIT = 11,
    VSS_SS_CREATED = 12,
    VSS_SS_ABORTED = 13,
    VSS_SS_DELETED = 14,
    VSS_SS_POSTCOMMITTED = 15,
    VSS_SS_COUNT = 16,
} VSS_SNAPSHOT_STATE;

typedef enum {
    VSS_VOLSNAP_ATTR_PERSISTENT = 1,
    VSS_VOLSNAP_ATTR_NO_AUTORECOVERY = 2,
    VSS_VOLSNAP_ATTR_CLIENT_ACCESSIBLE = 4,
    VSS_VOLSNAP_ATTR_NO_AUTO_RELEASE = 8,
    VSS_VOLSNAP_ATTR_NO_WRITERS = 16,
    VSS_VOLSNAP_ATTR_TRANSPORTABLE = 32,
    VSS_VOLSNAP_ATTR_NOT_SURFACED = 64,
    VSS_VOLSNAP_ATTR_NOT_TRANSACTED = 128,
    VSS_VOLSNAP_ATTR_HARDWARE_ASSISTED = 65536,
    VSS_VOLSNAP_ATTR_DIFFERENTIAL = 131072,
    VSS_VOLSNAP_ATTR_PLEX = 262144,
    VSS_VOLSNAP_ATTR_IMPORTED = 524288,
    VSS_VOLSNAP_ATTR_EXPOSED_LOCALLY = 1048576,
    VSS_VOLSNAP_ATTR_EXPOSED_REMOTELY = 2097152,
    VSS_VOLSNAP_ATTR_AUTORECOVER = 4194304,
    VSS_VOLSNAP_ATTR_ROLLBACK_RECOVERY = 8388608,
    VSS_VOLSNAP_ATTR_DELAYED_POSTSNAPSHOT = 16777216,
    VSS_VOLSNAP_ATTR_TXF_RECOVERY = 33554432,
    VSS_VOLSNAP_ATTR_FILE_SHARE = 67108864,
} VSS_VOLUME_SNAPSHOT_ATTRIBUTES;

typedef enum {
    VSS_CTX_BACKUP = 0,
    VSS_CTX_FILE_SHARE_BACKUP = 16,
    VSS_CTX_NAS_ROLLBACK = 25,
    VSS_CTX_APP_ROLLBACK = 9,
    VSS_CTX_CLIENT_ACCESSIBLE = 29,
    VSS_CTX_CLIENT_ACCESSIBLE_WRITERS = 13,
    VSS_CTX_ALL = -1,
} VSS_SNAPSHOT_CONTEXT;

typedef enum {
    VSS_PRV_CAPABILITY_LEGACY = 1,
    VSS_PRV_CAPABILITY_COMPLIANT = 2,
    VSS_PRV_CAPABILITY_LUN_REPOINT = 4,
    VSS_PRV_CAPABILITY_LUN_RESYNC = 8,
    VSS_PRV_CAPABILITY_OFFLINE_CREATION = 16,
    VSS_PRV_CAPABILITY_MULTIPLE_IMPORT = 32,
    VSS_PRV_CAPABILITY_RECYCLING = 64,
    VSS_PRV_CAPABILITY_PLEX = 128,
    VSS_PRV_CAPABILITY_DIFFERENTIAL = 256,
    VSS_PRV_CAPABILITY_CLUSTERED = 512,
} VSS_PROVIDER_CAPABILITIES;

typedef enum {
    VSS_BREAKEX_FLAG_MASK_LUNS = 1,
    VSS_BREAKEX_FLAG_MAKE_READ_WRITE = 2,
    VSS_BREAKEX_FLAG_REVERT_IDENTITY_ALL = 4,
    VSS_BREAKEX_FLAG_REVERT_IDENTITY_NONE = 8,
    VSS_ONLUNSTATECHANGE_NOTIFY_READ_WRITE = 256,
    VSS_ONLUNSTATECHANGE_NOTIFY_LUN_PRE_RECOVERY = 512,
    VSS_ONLUNSTATECHANGE_NOTIFY_LUN_POST_RECOVERY = 1024,
    VSS_ONLUNSTATECHANGE_DO_MASK_LUNS = 2048,
} VSS_HARDWARE_OPTIONS;

typedef enum {
    VSS_RECOVERY_REVERT_IDENTITY_ALL = 256,
    VSS_RECOVERY_NO_VOLUME_CHECK = 512,
} VSS_RECOVERY_OPTIONS;

typedef enum {
    VSS_WS_UNKNOWN = 0,
    VSS_WS_STABLE = 1,
    VSS_WS_WAITING_FOR_FREEZE = 2,
    VSS_WS_WAITING_FOR_THAW = 3,
    VSS_WS_WAITING_FOR_POST_SNAPSHOT = 4,
    VSS_WS_WAITING_FOR_BACKUP_COMPLETE = 5,
    VSS_WS_FAILED_AT_IDENTIFY = 6,
    VSS_WS_FAILED_AT_PREPARE_BACKUP = 7,
    VSS_WS_FAILED_AT_PREPARE_SNAPSHOT = 8,
    VSS_WS_FAILED_AT_FREEZE = 9,
    VSS_WS_FAILED_AT_THAW = 10,
    VSS_WS_FAILED_AT_POST_SNAPSHOT = 11,
    VSS_WS_FAILED_AT_BACKUP_COMPLETE = 12,
    VSS_WS_FAILED_AT_PRE_RESTORE = 13,
    VSS_WS_FAILED_AT_POST_RESTORE = 14,
    VSS_WS_FAILED_AT_BACKUPSHUTDOWN = 15,
    VSS_WS_COUNT = 16,
} VSS_WRITER_STATE;

typedef enum {
    VSS_BT_UNDEFINED = 0,
    VSS_BT_FULL = 1,
    VSS_BT_INCREMENTAL = 2,
    VSS_BT_DIFFERENTIAL = 3,
    VSS_BT_LOG = 4,
    VSS_BT_COPY = 5,
    VSS_BT_OTHER = 6,
} VSS_BACKUP_TYPE;

typedef enum {
    VSS_RTYPE_UNDEFINED = 0,
    VSS_RTYPE_BY_COPY = 1,
    VSS_RTYPE_IMPORT = 2,
    VSS_RTYPE_OTHER = 3,
} VSS_RESTORE_TYPE;

typedef enum {
    VSS_RF_UNDEFINED = 0,
    VSS_RF_NONE = 1,
    VSS_RF_ALL = 2,
    VSS_RF_PARTIAL = 3,
} VSS_ROLLFORWARD_TYPE;

typedef enum {
    VSS_PROV_UNKNOWN = 0,
    VSS_PROV_SYSTEM = 1,
    VSS_PROV_SOFTWARE = 2,
    VSS_PROV_HARDWARE = 3,
    VSS_PROV_FILESHARE = 4,
} VSS_PROVIDER_TYPE;

typedef enum {
    VSS_APP_UNKNOWN = 0,
    VSS_APP_SYSTEM = 1,
    VSS_APP_BACK_END = 2,
    VSS_APP_FRONT_END = 3,
    VSS_APP_SYSTEM_RM = 4,
    VSS_APP_AUTO = -1,
} VSS_APPLICATION_LEVEL;

typedef enum {
    VSS_SC_DISABLE_DEFRAG = 1,
    VSS_SC_DISABLE_CONTENTINDEX = 2,
} VSS_SNAPSHOT_COMPATIBILITY;

typedef enum {
    VSS_SPROPID_UNKNOWN = 0,
    VSS_SPROPID_SNAPSHOT_ID = 1,
    VSS_SPROPID_SNAPSHOT_SET_ID = 2,
    VSS_SPROPID_SNAPSHOTS_COUNT = 3,
    VSS_SPROPID_SNAPSHOT_DEVICE = 4,
    VSS_SPROPID_ORIGINAL_VOLUME = 5,
    VSS_SPROPID_ORIGINATING_MACHINE = 6,
    VSS_SPROPID_SERVICE_MACHINE = 7,
    VSS_SPROPID_EXPOSED_NAME = 8,
    VSS_SPROPID_EXPOSED_PATH = 9,
    VSS_SPROPID_PROVIDER_ID = 10,
    VSS_SPROPID_SNAPSHOT_ATTRIBUTES = 11,
    VSS_SPROPID_CREATION_TIMESTAMP = 12,
    VSS_SPROPID_STATUS = 13,
} VSS_SNAPSHOT_PROPERTY_ID;

typedef enum {
    VSS_FSBT_FULL_BACKUP_REQUIRED = 1,
    VSS_FSBT_DIFFERENTIAL_BACKUP_REQUIRED = 2,
    VSS_FSBT_INCREMENTAL_BACKUP_REQUIRED = 4,
    VSS_FSBT_LOG_BACKUP_REQUIRED = 8,
    VSS_FSBT_FULL_SNAPSHOT_REQUIRED = 256,
    VSS_FSBT_DIFFERENTIAL_SNAPSHOT_REQUIRED = 512,
    VSS_FSBT_INCREMENTAL_SNAPSHOT_REQUIRED = 1024,
    VSS_FSBT_LOG_SNAPSHOT_REQUIRED = 2048,
    VSS_FSBT_CREATED_DURING_BACKUP = 65536,
    VSS_FSBT_ALL_BACKUP_REQUIRED = 15,
    VSS_FSBT_ALL_SNAPSHOT_REQUIRED = 3840,
} VSS_FILE_SPEC_BACKUP_TYPE;

typedef enum {
    VSS_BS_UNDEFINED = 0,
    VSS_BS_DIFFERENTIAL = 1,
    VSS_BS_INCREMENTAL = 2,
    VSS_BS_EXCLUSIVE_INCREMENTAL_DIFFERENTIAL = 4,
    VSS_BS_LOG = 8,
    VSS_BS_COPY = 16,
    VSS_BS_TIMESTAMPED = 32,
    VSS_BS_LAST_MODIFY = 64,
    VSS_BS_LSN = 128,
    VSS_BS_WRITER_SUPPORTS_NEW_TARGET = 256,
    VSS_BS_WRITER_SUPPORTS_RESTORE_WITH_MOVE = 512,
    VSS_BS_INDEPENDENT_SYSTEM_STATE = 1024,
    VSS_BS_ROLLFORWARD_RESTORE = 4096,
    VSS_BS_RESTORE_RENAME = 8192,
    VSS_BS_AUTHORITATIVE_RESTORE = 16384,
    VSS_BS_WRITER_SUPPORTS_PARALLEL_RESTORES = 32768,
} VSS_BACKUP_SCHEMA;

typedef int VSS_SNAPSHOT_PROP;

typedef int VSS_PROVIDER_PROP;

typedef int VSS_OBJECT_UNION;

typedef int VSS_OBJECT_PROP;

// TODO: this type is limited to platform 'windows5.1.2600'
typedef int IVssEnumObject;

// TODO: this type is limited to platform 'windows5.1.2600'
typedef int IVssAsync;

typedef enum {
    VSS_UT_UNDEFINED = 0,
    VSS_UT_BOOTABLESYSTEMSTATE = 1,
    VSS_UT_SYSTEMSERVICE = 2,
    VSS_UT_USERDATA = 3,
    VSS_UT_OTHER = 4,
} VSS_USAGE_TYPE;

typedef enum {
    VSS_ST_UNDEFINED = 0,
    VSS_ST_TRANSACTEDDB = 1,
    VSS_ST_NONTRANSACTEDDB = 2,
    VSS_ST_OTHER = 3,
} VSS_SOURCE_TYPE;

typedef enum {
    VSS_RME_UNDEFINED = 0,
    VSS_RME_RESTORE_IF_NOT_THERE = 1,
    VSS_RME_RESTORE_IF_CAN_REPLACE = 2,
    VSS_RME_STOP_RESTORE_START = 3,
    VSS_RME_RESTORE_TO_ALTERNATE_LOCATION = 4,
    VSS_RME_RESTORE_AT_REBOOT = 5,
    VSS_RME_RESTORE_AT_REBOOT_IF_CANNOT_REPLACE = 6,
    VSS_RME_CUSTOM = 7,
    VSS_RME_RESTORE_STOP_START = 8,
} VSS_RESTOREMETHOD_ENUM;

typedef enum {
    VSS_WRE_UNDEFINED = 0,
    VSS_WRE_NEVER = 1,
    VSS_WRE_IF_REPLACE_FAILS = 2,
    VSS_WRE_ALWAYS = 3,
} VSS_WRITERRESTORE_ENUM;

typedef enum {
    VSS_CT_UNDEFINED = 0,
    VSS_CT_DATABASE = 1,
    VSS_CT_FILEGROUP = 2,
} VSS_COMPONENT_TYPE;

typedef enum {
    VSS_AWS_UNDEFINED = 0,
    VSS_AWS_NO_ALTERNATE_WRITER = 1,
    VSS_AWS_ALTERNATE_WRITER_EXISTS = 2,
    VSS_AWS_THIS_IS_ALTERNATE_WRITER = 3,
} VSS_ALTERNATE_WRITER_STATE;

typedef enum {
    VSS_SM_POST_SNAPSHOT_FLAG = 1,
    VSS_SM_BACKUP_EVENTS_FLAG = 2,
    VSS_SM_RESTORE_EVENTS_FLAG = 4,
    VSS_SM_IO_THROTTLING_FLAG = 8,
    VSS_SM_ALL_FLAGS = -1,
} VSS_SUBSCRIBE_MASK;

typedef enum {
    VSS_RT_UNDEFINED = 0,
    VSS_RT_ORIGINAL = 1,
    VSS_RT_ALTERNATE = 2,
    VSS_RT_DIRECTED = 3,
    VSS_RT_ORIGINAL_LOCATION = 4,
} VSS_RESTORE_TARGET;

typedef enum {
    VSS_RS_UNDEFINED = 0,
    VSS_RS_NONE = 1,
    VSS_RS_ALL = 2,
    VSS_RS_FAILED = 3,
} VSS_FILE_RESTORE_STATUS;

typedef enum {
    VSS_CF_BACKUP_RECOVERY = 1,
    VSS_CF_APP_ROLLBACK_RECOVERY = 2,
    VSS_CF_NOT_SYSTEM_STATE = 4,
} VSS_COMPONENT_FLAGS;

typedef int IVssWMFiledesc;

typedef int IVssWMDependency;

typedef int IVssComponent;

typedef int IVssWriterComponents;

typedef int IVssComponentEx;

typedef int IVssComponentEx2;

typedef int IVssCreateWriterMetadata;

typedef int IVssCreateWriterMetadataEx;

typedef int IVssWriterImpl;

typedef int IVssCreateExpressWriterMetadata;

typedef int IVssExpressWriter;

typedef int VssSnapshotMgmt;

typedef enum {
    VSS_MGMT_OBJECT_UNKNOWN = 0,
    VSS_MGMT_OBJECT_VOLUME = 1,
    VSS_MGMT_OBJECT_DIFF_VOLUME = 2,
    VSS_MGMT_OBJECT_DIFF_AREA = 3,
} VSS_MGMT_OBJECT_TYPE;

typedef int VSS_VOLUME_PROP;

typedef int VSS_DIFF_VOLUME_PROP;

typedef int VSS_DIFF_AREA_PROP;

typedef int VSS_MGMT_OBJECT_UNION;

typedef int VSS_MGMT_OBJECT_PROP;

typedef enum {
    VSS_PROTECTION_LEVEL_ORIGINAL_VOLUME = 0,
    VSS_PROTECTION_LEVEL_SNAPSHOT = 1,
} VSS_PROTECTION_LEVEL;

typedef enum {
    VSS_PROTECTION_FAULT_NONE = 0,
    VSS_PROTECTION_FAULT_DIFF_AREA_MISSING = 1,
    VSS_PROTECTION_FAULT_IO_FAILURE_DURING_ONLINE = 2,
    VSS_PROTECTION_FAULT_META_DATA_CORRUPTION = 3,
    VSS_PROTECTION_FAULT_MEMORY_ALLOCATION_FAILURE = 4,
    VSS_PROTECTION_FAULT_MAPPED_MEMORY_FAILURE = 5,
    VSS_PROTECTION_FAULT_COW_READ_FAILURE = 6,
    VSS_PROTECTION_FAULT_COW_WRITE_FAILURE = 7,
    VSS_PROTECTION_FAULT_DIFF_AREA_FULL = 8,
    VSS_PROTECTION_FAULT_GROW_TOO_SLOW = 9,
    VSS_PROTECTION_FAULT_GROW_FAILED = 10,
    VSS_PROTECTION_FAULT_DESTROY_ALL_SNAPSHOTS = 11,
    VSS_PROTECTION_FAULT_FILE_SYSTEM_FAILURE = 12,
    VSS_PROTECTION_FAULT_IO_FAILURE = 13,
    VSS_PROTECTION_FAULT_DIFF_AREA_REMOVED = 14,
    VSS_PROTECTION_FAULT_EXTERNAL_WRITER_TO_DIFF_AREA = 15,
    VSS_PROTECTION_FAULT_MOUNT_DURING_CLUSTER_OFFLINE = 16,
} VSS_PROTECTION_FAULT;

typedef int VSS_VOLUME_PROTECTION_INFO;

// TODO: this type is limited to platform 'windows6.0.6000'
typedef int IVssSnapshotMgmt;

// TODO: this type is limited to platform 'windows6.0.6000'
typedef int IVssSnapshotMgmt2;

// TODO: this type is limited to platform 'windows6.0.6000'
typedef int IVssDifferentialSoftwareSnapshotMgmt;

// TODO: this type is limited to platform 'windows6.0.6000'
typedef int IVssDifferentialSoftwareSnapshotMgmt2;

// TODO: this type is limited to platform 'windows6.0.6000'
typedef int IVssDifferentialSoftwareSnapshotMgmt3;

// TODO: this type is limited to platform 'windows6.0.6000'
typedef int IVssEnumMgmtObject;

typedef int VSSCoordinator;

// TODO: this type is limited to platform 'windows6.0.6000'
typedef int IVssAdmin;

typedef int IVssAdminEx;

// TODO: this type is limited to platform 'windows6.0.6000'
typedef int IVssSoftwareSnapshotProvider;

// TODO: this type is limited to platform 'windows6.0.6000'
typedef int IVssProviderCreateSnapshotSet;

// TODO: this type is limited to platform 'windows6.0.6000'
typedef int IVssProviderNotifications;

// TODO: this type is limited to platform 'windowsServer2003'
typedef int IVssHardwareSnapshotProvider;

// TODO: this type is limited to platform 'windowsServer2008'
typedef int IVssHardwareSnapshotProviderEx;

// TODO: this type is limited to platform 'windows8.1'
typedef int IVssFileShareSnapshotProvider;


//--------------------------------------------------------------------------------
// Section: Functions (1)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void CreateVssExpressWriterInternal();

