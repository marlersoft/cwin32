// NOTE: this file is autogenerated, DO NOT MODIFY
#include "../bootstrap.h"
//--------------------------------------------------------------------------------
// Section: Constants (166)
//--------------------------------------------------------------------------------
#define IOCTL_SCSI_BASE (UINT)4
#define ScsiRawInterfaceGuid GUID { "53f56309-b6bf-11d0-94f2-00a0c91efb8b" }
#define WmiScsiAddressGuid GUID { "53f5630f-b6bf-11d0-94f2-00a0c91efb8b" }
#define FILE_DEVICE_SCSI (UINT)27
#define IOCTL_SCSI_PASS_THROUGH (UINT)315396
#define IOCTL_SCSI_MINIPORT (UINT)315400
#define IOCTL_SCSI_GET_INQUIRY_DATA (UINT)266252
#define IOCTL_SCSI_GET_CAPABILITIES (UINT)266256
#define IOCTL_SCSI_PASS_THROUGH_DIRECT (UINT)315412
#define IOCTL_SCSI_GET_ADDRESS (UINT)266264
#define IOCTL_SCSI_RESCAN_BUS (UINT)266268
#define IOCTL_SCSI_GET_DUMP_POINTERS (UINT)266272
#define IOCTL_SCSI_FREE_DUMP_POINTERS (UINT)266276
#define IOCTL_IDE_PASS_THROUGH (UINT)315432
#define IOCTL_ATA_PASS_THROUGH (UINT)315436
#define IOCTL_ATA_PASS_THROUGH_DIRECT (UINT)315440
#define IOCTL_ATA_MINIPORT (UINT)315444
#define IOCTL_MINIPORT_PROCESS_SERVICE_IRP (UINT)315448
#define IOCTL_MPIO_PASS_THROUGH_PATH (UINT)315452
#define IOCTL_MPIO_PASS_THROUGH_PATH_DIRECT (UINT)315456
#define IOCTL_SCSI_PASS_THROUGH_EX (UINT)315460
#define IOCTL_SCSI_PASS_THROUGH_DIRECT_EX (UINT)315464
#define IOCTL_MPIO_PASS_THROUGH_PATH_EX (UINT)315468
#define IOCTL_MPIO_PASS_THROUGH_PATH_DIRECT_EX (UINT)315472
#define ATA_FLAGS_DRDY_REQUIRED (UINT)1
#define ATA_FLAGS_DATA_IN (UINT)2
#define ATA_FLAGS_DATA_OUT (UINT)4
#define ATA_FLAGS_48BIT_COMMAND (UINT)8
#define ATA_FLAGS_USE_DMA (UINT)16
#define ATA_FLAGS_NO_MULTIPLE (UINT)32
#define NRB_FUNCTION_NVCACHE_INFO (UINT)236
#define NRB_FUNCTION_SPINDLE_STATUS (UINT)229
#define NRB_FUNCTION_NVCACHE_POWER_MODE_SET (UINT)0
#define NRB_FUNCTION_NVCACHE_POWER_MODE_RETURN (UINT)1
#define NRB_FUNCTION_FLUSH_NVCACHE (UINT)20
#define NRB_FUNCTION_QUERY_PINNED_SET (UINT)18
#define NRB_FUNCTION_QUERY_CACHE_MISS (UINT)19
#define NRB_FUNCTION_ADD_LBAS_PINNED_SET (UINT)16
#define NRB_FUNCTION_REMOVE_LBAS_PINNED_SET (UINT)17
#define NRB_FUNCTION_QUERY_ASCENDER_STATUS (UINT)208
#define NRB_FUNCTION_QUERY_HYBRID_DISK_STATUS (UINT)209
#define NRB_FUNCTION_PASS_HINT_PAYLOAD (UINT)224
#define NRB_FUNCTION_NVSEPARATED_INFO (UINT)192
#define NRB_FUNCTION_NVSEPARATED_FLUSH (UINT)193
#define NRB_FUNCTION_NVSEPARATED_WB_DISABLE (UINT)194
#define NRB_FUNCTION_NVSEPARATED_WB_REVERT_DEFAULT (UINT)195
#define NRB_SUCCESS (UINT)0
#define NRB_ILLEGAL_REQUEST (UINT)1
#define NRB_INVALID_PARAMETER (UINT)2
#define NRB_INPUT_DATA_OVERRUN (UINT)3
#define NRB_INPUT_DATA_UNDERRUN (UINT)4
#define NRB_OUTPUT_DATA_OVERRUN (UINT)5
#define NRB_OUTPUT_DATA_UNDERRUN (UINT)6
#define NV_SEP_CACHE_PARAMETER_VERSION_1 (UINT)1
#define STORAGE_DIAGNOSTIC_STATUS_SUCCESS (UINT)0
#define STORAGE_DIAGNOSTIC_STATUS_BUFFER_TOO_SMALL (UINT)1
#define STORAGE_DIAGNOSTIC_STATUS_UNSUPPORTED_VERSION (UINT)2
#define STORAGE_DIAGNOSTIC_STATUS_INVALID_PARAMETER (UINT)3
#define STORAGE_DIAGNOSTIC_STATUS_INVALID_SIGNATURE (UINT)4
#define STORAGE_DIAGNOSTIC_STATUS_INVALID_TARGET_TYPE (UINT)5
#define STORAGE_DIAGNOSTIC_STATUS_MORE_DATA (UINT)6
#define MINIPORT_DSM_NOTIFICATION_VERSION_1 (UINT)1
#define MINIPORT_DSM_PROFILE_UNKNOWN (UINT)0
#define MINIPORT_DSM_PROFILE_PAGE_FILE (UINT)1
#define MINIPORT_DSM_PROFILE_HIBERNATION_FILE (UINT)2
#define MINIPORT_DSM_PROFILE_CRASHDUMP_FILE (UINT)3
#define MINIPORT_DSM_NOTIFY_FLAG_BEGIN (UINT)1
#define MINIPORT_DSM_NOTIFY_FLAG_END (UINT)2
#define HYBRID_FUNCTION_GET_INFO (UINT)1
#define HYBRID_FUNCTION_DISABLE_CACHING_MEDIUM (UINT)16
#define HYBRID_FUNCTION_ENABLE_CACHING_MEDIUM (UINT)17
#define HYBRID_FUNCTION_SET_DIRTY_THRESHOLD (UINT)18
#define HYBRID_FUNCTION_DEMOTE_BY_SIZE (UINT)19
#define HYBRID_STATUS_SUCCESS (UINT)0
#define HYBRID_STATUS_ILLEGAL_REQUEST (UINT)1
#define HYBRID_STATUS_INVALID_PARAMETER (UINT)2
#define HYBRID_STATUS_OUTPUT_BUFFER_TOO_SMALL (UINT)3
#define HYBRID_STATUS_ENABLE_REFCOUNT_HOLD (UINT)16
#define HYBRID_REQUEST_BLOCK_STRUCTURE_VERSION (UINT)1
#define HYBRID_REQUEST_INFO_STRUCTURE_VERSION (UINT)1
#define FIRMWARE_FUNCTION_GET_INFO (UINT)1
#define FIRMWARE_FUNCTION_DOWNLOAD (UINT)2
#define FIRMWARE_FUNCTION_ACTIVATE (UINT)3
#define FIRMWARE_STATUS_SUCCESS (UINT)0
#define FIRMWARE_STATUS_ERROR (UINT)1
#define FIRMWARE_STATUS_ILLEGAL_REQUEST (UINT)2
#define FIRMWARE_STATUS_INVALID_PARAMETER (UINT)3
#define FIRMWARE_STATUS_INPUT_BUFFER_TOO_BIG (UINT)4
#define FIRMWARE_STATUS_OUTPUT_BUFFER_TOO_SMALL (UINT)5
#define FIRMWARE_STATUS_INVALID_SLOT (UINT)6
#define FIRMWARE_STATUS_INVALID_IMAGE (UINT)7
#define FIRMWARE_STATUS_CONTROLLER_ERROR (UINT)16
#define FIRMWARE_STATUS_POWER_CYCLE_REQUIRED (UINT)32
#define FIRMWARE_STATUS_DEVICE_ERROR (UINT)64
#define FIRMWARE_STATUS_INTERFACE_CRC_ERROR (UINT)128
#define FIRMWARE_STATUS_UNCORRECTABLE_DATA_ERROR (UINT)129
#define FIRMWARE_STATUS_MEDIA_CHANGE (UINT)130
#define FIRMWARE_STATUS_ID_NOT_FOUND (UINT)131
#define FIRMWARE_STATUS_MEDIA_CHANGE_REQUEST (UINT)132
#define FIRMWARE_STATUS_COMMAND_ABORT (UINT)133
#define FIRMWARE_STATUS_END_OF_MEDIA (UINT)134
#define FIRMWARE_STATUS_ILLEGAL_LENGTH (UINT)135
#define FIRMWARE_REQUEST_BLOCK_STRUCTURE_VERSION (UINT)1
#define FIRMWARE_REQUEST_FLAG_CONTROLLER (UINT)1
#define FIRMWARE_REQUEST_FLAG_LAST_SEGMENT (UINT)2
#define FIRMWARE_REQUEST_FLAG_FIRST_SEGMENT (UINT)4
#define FIRMWARE_REQUEST_FLAG_SWITCH_TO_EXISTING_FIRMWARE (UINT)2147483648
#define STORAGE_FIRMWARE_INFO_STRUCTURE_VERSION (UINT)1
#define STORAGE_FIRMWARE_INFO_STRUCTURE_VERSION_V2 (UINT)2
#define STORAGE_FIRMWARE_INFO_INVALID_SLOT (UINT)255
#define STORAGE_FIRMWARE_SLOT_INFO_V2_REVISION_LENGTH (UINT)16
#define STORAGE_FIRMWARE_DOWNLOAD_STRUCTURE_VERSION (UINT)1
#define STORAGE_FIRMWARE_DOWNLOAD_STRUCTURE_VERSION_V2 (UINT)2
#define STORAGE_FIRMWARE_ACTIVATE_STRUCTURE_VERSION (UINT)1
#define DUMP_POINTERS_VERSION_1 (UINT)1
#define DUMP_POINTERS_VERSION_2 (UINT)2
#define DUMP_POINTERS_VERSION_3 (UINT)3
#define DUMP_POINTERS_VERSION_4 (UINT)4
#define DUMP_DRIVER_NAME_LENGTH (UINT)15
#define DUMP_EX_FLAG_SUPPORT_64BITMEMORY (UINT)1
#define DUMP_EX_FLAG_SUPPORT_DD_TELEMETRY (UINT)2
#define DUMP_EX_FLAG_RESUME_SUPPORT (UINT)4
#define DUMP_EX_FLAG_DRIVER_FULL_PATH_SUPPORT (UINT)8
#define SCSI_IOCTL_DATA_OUT (UINT)0
#define SCSI_IOCTL_DATA_IN (UINT)1
#define SCSI_IOCTL_DATA_UNSPECIFIED (UINT)2
#define SCSI_IOCTL_DATA_BIDIRECTIONAL (UINT)3
#define MPIO_IOCTL_FLAG_USE_PATHID (UINT)1
#define MPIO_IOCTL_FLAG_USE_SCSIADDRESS (UINT)2
#define MPIO_IOCTL_FLAG_INVOLVE_DSM (UINT)4
#define MAX_ISCSI_HBANAME_LEN (UINT)256
#define MAX_ISCSI_NAME_LEN (UINT)223
#define MAX_ISCSI_ALIAS_LEN (UINT)255
#define MAX_ISCSI_PORTAL_NAME_LEN (UINT)256
#define MAX_ISCSI_PORTAL_ALIAS_LEN (UINT)256
#define MAX_ISCSI_TEXT_ADDRESS_LEN (UINT)256
#define MAX_ISCSI_DISCOVERY_DOMAIN_LEN (UINT)256
#define MAX_RADIUS_ADDRESS_LEN (UINT)41
#define ISCSI_SECURITY_FLAG_TUNNEL_MODE_PREFERRED (UINT)64
#define ISCSI_SECURITY_FLAG_TRANSPORT_MODE_PREFERRED (UINT)32
#define ISCSI_SECURITY_FLAG_PFS_ENABLED (UINT)16
#define ISCSI_SECURITY_FLAG_AGGRESSIVE_MODE_ENABLED (UINT)8
#define ISCSI_SECURITY_FLAG_MAIN_MODE_ENABLED (UINT)4
#define ISCSI_SECURITY_FLAG_IKE_IPSEC_ENABLED (UINT)2
#define ISCSI_SECURITY_FLAG_VALID (UINT)1
#define ISCSI_LOGIN_FLAG_REQUIRE_IPSEC (UINT)1
#define ISCSI_LOGIN_FLAG_MULTIPATH_ENABLED (UINT)2
#define ISCSI_LOGIN_FLAG_RESERVED1 (UINT)4
#define ISCSI_LOGIN_FLAG_ALLOW_PORTAL_HOPPING (UINT)8
#define ISCSI_LOGIN_FLAG_USE_RADIUS_RESPONSE (UINT)16
#define ISCSI_LOGIN_FLAG_USE_RADIUS_VERIFICATION (UINT)32
#define ISCSI_LOGIN_OPTIONS_HEADER_DIGEST (UINT)1
#define ISCSI_LOGIN_OPTIONS_DATA_DIGEST (UINT)2
#define ISCSI_LOGIN_OPTIONS_MAXIMUM_CONNECTIONS (UINT)4
#define ISCSI_LOGIN_OPTIONS_DEFAULT_TIME_2_WAIT (UINT)8
#define ISCSI_LOGIN_OPTIONS_DEFAULT_TIME_2_RETAIN (UINT)16
#define ISCSI_LOGIN_OPTIONS_USERNAME (UINT)32
#define ISCSI_LOGIN_OPTIONS_PASSWORD (UINT)64
#define ISCSI_LOGIN_OPTIONS_AUTH_TYPE (UINT)128
#define ISCSI_LOGIN_OPTIONS_VERSION (UINT)0
#define ISCSI_TARGET_FLAG_HIDE_STATIC_TARGET (UINT)2
#define ISCSI_TARGET_FLAG_MERGE_TARGET_INFORMATION (UINT)4
#define ID_IPV4_ADDR (UINT)1
#define ID_FQDN (UINT)2
#define ID_USER_FQDN (UINT)3
#define ID_IPV6_ADDR (UINT)5

//--------------------------------------------------------------------------------
// Section: Types (94)
//--------------------------------------------------------------------------------
typedef int SCSI_PASS_THROUGH32;

typedef int SCSI_PASS_THROUGH_DIRECT32;

typedef int SCSI_PASS_THROUGH32_EX;

typedef int SCSI_PASS_THROUGH_DIRECT32_EX;

typedef int ATA_PASS_THROUGH_EX32;

typedef int ATA_PASS_THROUGH_DIRECT32;

typedef int MPIO_PASS_THROUGH_PATH32;

typedef int MPIO_PASS_THROUGH_PATH_DIRECT32;

typedef int MPIO_PASS_THROUGH_PATH32_EX;

typedef int MPIO_PASS_THROUGH_PATH_DIRECT32_EX;

typedef int _ADAPTER_OBJECT;

typedef int SCSI_PASS_THROUGH;

typedef int SCSI_PASS_THROUGH_DIRECT;

typedef int SCSI_PASS_THROUGH_EX;

typedef int SCSI_PASS_THROUGH_DIRECT_EX;

typedef int ATA_PASS_THROUGH_EX;

typedef int ATA_PASS_THROUGH_DIRECT;

typedef int IDE_IO_CONTROL;

typedef int MPIO_PASS_THROUGH_PATH;

typedef int MPIO_PASS_THROUGH_PATH_DIRECT;

typedef int MPIO_PASS_THROUGH_PATH_EX;

typedef int MPIO_PASS_THROUGH_PATH_DIRECT_EX;

typedef int SCSI_BUS_DATA;

typedef int SCSI_ADAPTER_BUS_INFO;

typedef int SCSI_INQUIRY_DATA;

typedef int SRB_IO_CONTROL;

typedef int NVCACHE_REQUEST_BLOCK;

typedef int NV_FEATURE_PARAMETER;

typedef int NVCACHE_HINT_PAYLOAD;

typedef int NV_SEP_CACHE_PARAMETER;

typedef enum {
    NVSEPWriteCacheTypeUnknown = 0,
    NVSEPWriteCacheTypeNone = 1,
    NVSEPWriteCacheTypeWriteBack = 2,
    NVSEPWriteCacheTypeWriteThrough = 3,
} NV_SEP_WRITE_CACHE_TYPE;

typedef enum {
    MpStorageDiagnosticLevelDefault = 0,
    MpStorageDiagnosticLevelMax = 1,
} MP_STORAGE_DIAGNOSTIC_LEVEL;

typedef enum {
    MpStorageDiagnosticTargetTypeUndefined = 0,
    MpStorageDiagnosticTargetTypeMiniport = 2,
    MpStorageDiagnosticTargetTypeHbaFirmware = 3,
    MpStorageDiagnosticTargetTypeMax = 4,
} MP_STORAGE_DIAGNOSTIC_TARGET_TYPE;

typedef int STORAGE_DIAGNOSTIC_MP_REQUEST;

typedef int MP_DEVICE_DATA_SET_RANGE;

typedef int DSM_NOTIFICATION_REQUEST_BLOCK;

typedef int HYBRID_REQUEST_BLOCK;

typedef enum {
    NvCacheTypeUnknown = 0,
    NvCacheTypeNone = 1,
    NvCacheTypeWriteBack = 2,
    NvCacheTypeWriteThrough = 3,
} NVCACHE_TYPE;

typedef enum {
    NvCacheStatusUnknown = 0,
    NvCacheStatusDisabling = 1,
    NvCacheStatusDisabled = 2,
    NvCacheStatusEnabled = 3,
} NVCACHE_STATUS;

typedef int NVCACHE_PRIORITY_LEVEL_DESCRIPTOR;

typedef int HYBRID_INFORMATION;

typedef int HYBRID_DIRTY_THRESHOLDS;

typedef int HYBRID_DEMOTE_BY_SIZE;

typedef int FIRMWARE_REQUEST_BLOCK;

typedef int STORAGE_FIRMWARE_SLOT_INFO;

typedef int STORAGE_FIRMWARE_SLOT_INFO_V2;

typedef int STORAGE_FIRMWARE_INFO;

typedef int STORAGE_FIRMWARE_INFO_V2;

typedef int STORAGE_FIRMWARE_DOWNLOAD;

typedef int STORAGE_FIRMWARE_DOWNLOAD_V2;

typedef int STORAGE_FIRMWARE_ACTIVATE;

typedef int IO_SCSI_CAPABILITIES;

typedef int SCSI_ADDRESS;

typedef int DUMP_DEVICE_POWERON_ROUTINE;

typedef int PDUMP_DEVICE_POWERON_ROUTINE;

typedef int DUMP_POINTERS_VERSION;

typedef int DUMP_POINTERS;

typedef int DUMP_POINTERS_EX;

typedef int DUMP_DRIVER;

typedef int NTSCSI_UNICODE_STRING;

typedef int DUMP_DRIVER_EX;

typedef int STORAGE_ENDURANCE_INFO;

typedef int STORAGE_ENDURANCE_DATA_DESCRIPTOR;

typedef enum {
    ISCSI_DIGEST_TYPE_NONE = 0,
    ISCSI_DIGEST_TYPE_CRC32C = 1,
} ISCSI_DIGEST_TYPES;

typedef enum {
    ISCSI_NO_AUTH_TYPE = 0,
    ISCSI_CHAP_AUTH_TYPE = 1,
    ISCSI_MUTUAL_CHAP_AUTH_TYPE = 2,
} ISCSI_AUTH_TYPES;

typedef int ISCSI_LOGIN_OPTIONS;

typedef enum {
    IKE_AUTHENTICATION_PRESHARED_KEY_METHOD = 1,
} IKE_AUTHENTICATION_METHOD;

typedef int IKE_AUTHENTICATION_PRESHARED_KEY;

typedef int IKE_AUTHENTICATION_INFORMATION;

typedef int ISCSI_UNIQUE_SESSION_ID;

typedef int SCSI_LUN_LIST;

typedef int ISCSI_TARGET_MAPPINGW;

typedef int ISCSI_TARGET_MAPPINGA;

typedef int ISCSI_TARGET_PORTALW;

typedef int ISCSI_TARGET_PORTALA;

typedef int ISCSI_TARGET_PORTAL_INFOW;

typedef int ISCSI_TARGET_PORTAL_INFOA;

typedef int ISCSI_TARGET_PORTAL_INFO_EXW;

typedef int ISCSI_TARGET_PORTAL_INFO_EXA;

typedef int ISCSI_TARGET_PORTAL_GROUPW;

typedef int ISCSI_TARGET_PORTAL_GROUPA;

typedef int ISCSI_CONNECTION_INFOW;

typedef int ISCSI_SESSION_INFOW;

typedef int ISCSI_CONNECTION_INFOA;

typedef int ISCSI_SESSION_INFOA;

typedef int ISCSI_CONNECTION_INFO_EX;

typedef int ISCSI_SESSION_INFO_EX;

typedef int ISCSI_DEVICE_ON_SESSIONW;

typedef int ISCSI_DEVICE_ON_SESSIONA;

typedef int PERSISTENT_ISCSI_LOGIN_INFOW;

typedef int PERSISTENT_ISCSI_LOGIN_INFOA;

typedef enum {
    ISCSI_TCP_PROTOCOL_TYPE = 0,
} TARGETPROTOCOLTYPE;

typedef enum {
    ProtocolType = 0,
    TargetAlias = 1,
    DiscoveryMechanisms = 2,
    PortalGroups = 3,
    PersistentTargetMappings = 4,
    InitiatorName = 5,
    TargetFlags = 6,
    LoginOptions = 7,
} TARGET_INFORMATION_CLASS;

typedef int ISCSI_VERSION_INFO;


//--------------------------------------------------------------------------------
// Section: Functions (79)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetIScsiVersionInformation();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetIScsiTargetInformationW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetIScsiTargetInformationA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void AddIScsiConnectionW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void AddIScsiConnectionA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void RemoveIScsiConnection();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void ReportIScsiTargetsW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void ReportIScsiTargetsA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void AddIScsiStaticTargetW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void AddIScsiStaticTargetA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void RemoveIScsiStaticTargetW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void RemoveIScsiStaticTargetA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void AddIScsiSendTargetPortalW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void AddIScsiSendTargetPortalA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void RemoveIScsiSendTargetPortalW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void RemoveIScsiSendTargetPortalA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void RefreshIScsiSendTargetPortalW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void RefreshIScsiSendTargetPortalA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void ReportIScsiSendTargetPortalsW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void ReportIScsiSendTargetPortalsA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void ReportIScsiSendTargetPortalsExW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void ReportIScsiSendTargetPortalsExA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void LoginIScsiTargetW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void LoginIScsiTargetA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void ReportIScsiPersistentLoginsW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void ReportIScsiPersistentLoginsA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void LogoutIScsiTarget();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void RemoveIScsiPersistentTargetW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void RemoveIScsiPersistentTargetA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void SendScsiInquiry();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void SendScsiReadCapacity();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void SendScsiReportLuns();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void ReportIScsiInitiatorListW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void ReportIScsiInitiatorListA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void ReportActiveIScsiTargetMappingsW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void ReportActiveIScsiTargetMappingsA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void SetIScsiTunnelModeOuterAddressW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void SetIScsiTunnelModeOuterAddressA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void SetIScsiIKEInfoW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void SetIScsiIKEInfoA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetIScsiIKEInfoW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetIScsiIKEInfoA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void SetIScsiGroupPresharedKey();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void SetIScsiInitiatorCHAPSharedSecret();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void SetIScsiInitiatorRADIUSSharedSecret();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void SetIScsiInitiatorNodeNameW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void SetIScsiInitiatorNodeNameA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetIScsiInitiatorNodeNameW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetIScsiInitiatorNodeNameA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void AddISNSServerW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void AddISNSServerA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void RemoveISNSServerW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void RemoveISNSServerA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void RefreshISNSServerW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void RefreshISNSServerA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void ReportISNSServerListW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void ReportISNSServerListA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetIScsiSessionListW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetIScsiSessionListA();

/*u32*/void GetIScsiSessionListEx();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetDevicesForIScsiSessionW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetDevicesForIScsiSessionA();

/*u32*/void SetupPersistentIScsiVolumes();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void SetupPersistentIScsiDevices();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void AddPersistentIScsiDeviceW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void AddPersistentIScsiDeviceA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void RemovePersistentIScsiDeviceW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void RemovePersistentIScsiDeviceA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void ClearPersistentIScsiDevices();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void ReportPersistentIScsiDevicesW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void ReportPersistentIScsiDevicesA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void ReportIScsiTargetPortalsW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void ReportIScsiTargetPortalsA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void AddRadiusServerW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void AddRadiusServerA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void RemoveRadiusServerW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void RemoveRadiusServerA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void ReportRadiusServerListW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void ReportRadiusServerListA();

