// NOTE: this file is autogenerated, DO NOT MODIFY
#include "../bootstrap.h"
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (31)
//--------------------------------------------------------------------------------
typedef enum {
    RID_HEADER = 268435461,
    RID_INPUT = 268435459,
} RAW_INPUT_DATA_COMMAND_FLAGS;

typedef enum {
    MOD_ALT = 1,
    MOD_CONTROL = 2,
    MOD_NOREPEAT = 16384,
    MOD_SHIFT = 4,
    MOD_WIN = 8,
} HOT_KEY_MODIFIERS;

typedef enum {
    RIDI_PREPARSEDDATA = 536870917,
    RIDI_DEVICENAME = 536870919,
    RIDI_DEVICEINFO = 536870923,
} RAW_INPUT_DEVICE_INFO_COMMAND;

typedef enum {
    KLF_REORDER = 8,
    KLF_RESET = 1073741824,
    KLF_SETFORPROCESS = 256,
    KLF_SHIFTLOCK = 65536,
    KLF_ACTIVATE = 1,
    KLF_NOTELLSHELL = 128,
    KLF_REPLACELANG = 16,
    KLF_SUBSTITUTE_OK = 2,
} ACTIVATE_KEYBOARD_LAYOUT_FLAGS;

typedef enum {
    GMMP_USE_DISPLAY_POINTS = 1,
    GMMP_USE_HIGH_RESOLUTION_POINTS = 2,
} GET_MOUSE_MOVE_POINTS_EX_RESOLUTION;

typedef enum {
    KEYEVENTF_EXTENDEDKEY = 1,
    KEYEVENTF_KEYUP = 2,
    KEYEVENTF_SCANCODE = 8,
    KEYEVENTF_UNICODE = 4,
} KEYBD_EVENT_FLAGS;

typedef enum {
    MOUSEEVENTF_ABSOLUTE = 32768,
    MOUSEEVENTF_LEFTDOWN = 2,
    MOUSEEVENTF_LEFTUP = 4,
    MOUSEEVENTF_MIDDLEDOWN = 32,
    MOUSEEVENTF_MIDDLEUP = 64,
    MOUSEEVENTF_MOVE = 1,
    MOUSEEVENTF_RIGHTDOWN = 8,
    MOUSEEVENTF_RIGHTUP = 16,
    MOUSEEVENTF_WHEEL = 2048,
    MOUSEEVENTF_XDOWN = 128,
    MOUSEEVENTF_XUP = 256,
    MOUSEEVENTF_HWHEEL = 4096,
    MOUSEEVENTF_MOVE_NOCOALESCE = 8192,
    MOUSEEVENTF_VIRTUALDESK = 16384,
} MOUSE_EVENT_FLAGS;

typedef enum {
    RIM_TYPEMOUSE = 0,
    RIM_TYPEKEYBOARD = 1,
    RIM_TYPEHID = 2,
} RID_DEVICE_INFO_TYPE;

typedef enum {
    RIDEV_REMOVE = 1,
    RIDEV_EXCLUDE = 16,
    RIDEV_PAGEONLY = 32,
    RIDEV_NOLEGACY = 48,
    RIDEV_INPUTSINK = 256,
    RIDEV_CAPTUREMOUSE = 512,
    RIDEV_NOHOTKEYS = 512,
    RIDEV_APPKEYS = 1024,
    RIDEV_EXINPUTSINK = 4096,
    RIDEV_DEVNOTIFY = 8192,
} RAWINPUTDEVICE_FLAGS;

typedef enum {
    INPUT_MOUSE = 0,
    INPUT_KEYBOARD = 1,
    INPUT_HARDWARE = 2,
} INPUT_TYPE;

typedef enum {
    TME_CANCEL = 2147483648,
    TME_HOVER = 1,
    TME_LEAVE = 2,
    TME_NONCLIENT = 16,
    TME_QUERY = 1073741824,
} TRACKMOUSEEVENT_FLAGS;

typedef enum {
    VK_0 = 48,
    VK_1 = 49,
    VK_2 = 50,
    VK_3 = 51,
    VK_4 = 52,
    VK_5 = 53,
    VK_6 = 54,
    VK_7 = 55,
    VK_8 = 56,
    VK_9 = 57,
    VK_A = 65,
    VK_B = 66,
    VK_C = 67,
    VK_D = 68,
    VK_E = 69,
    VK_F = 70,
    VK_G = 71,
    VK_H = 72,
    VK_I = 73,
    VK_J = 74,
    VK_K = 75,
    VK_L = 76,
    VK_M = 77,
    VK_N = 78,
    VK_O = 79,
    VK_P = 80,
    VK_Q = 81,
    VK_R = 82,
    VK_S = 83,
    VK_T = 84,
    VK_U = 85,
    VK_V = 86,
    VK_W = 87,
    VK_X = 88,
    VK_Y = 89,
    VK_Z = 90,
    VK_LBUTTON = 1,
    VK_RBUTTON = 2,
    VK_CANCEL = 3,
    VK_MBUTTON = 4,
    VK_XBUTTON1 = 5,
    VK_XBUTTON2 = 6,
    VK_BACK = 8,
    VK_TAB = 9,
    VK_CLEAR = 12,
    VK_RETURN = 13,
    VK_SHIFT = 16,
    VK_CONTROL = 17,
    VK_MENU = 18,
    VK_PAUSE = 19,
    VK_CAPITAL = 20,
    VK_KANA = 21,
    VK_HANGEUL = 21,
    VK_HANGUL = 21,
    VK_JUNJA = 23,
    VK_FINAL = 24,
    VK_HANJA = 25,
    VK_KANJI = 25,
    VK_ESCAPE = 27,
    VK_CONVERT = 28,
    VK_NONCONVERT = 29,
    VK_ACCEPT = 30,
    VK_MODECHANGE = 31,
    VK_SPACE = 32,
    VK_PRIOR = 33,
    VK_NEXT = 34,
    VK_END = 35,
    VK_HOME = 36,
    VK_LEFT = 37,
    VK_UP = 38,
    VK_RIGHT = 39,
    VK_DOWN = 40,
    VK_SELECT = 41,
    VK_PRINT = 42,
    VK_EXECUTE = 43,
    VK_SNAPSHOT = 44,
    VK_INSERT = 45,
    VK_DELETE = 46,
    VK_HELP = 47,
    VK_LWIN = 91,
    VK_RWIN = 92,
    VK_APPS = 93,
    VK_SLEEP = 95,
    VK_NUMPAD0 = 96,
    VK_NUMPAD1 = 97,
    VK_NUMPAD2 = 98,
    VK_NUMPAD3 = 99,
    VK_NUMPAD4 = 100,
    VK_NUMPAD5 = 101,
    VK_NUMPAD6 = 102,
    VK_NUMPAD7 = 103,
    VK_NUMPAD8 = 104,
    VK_NUMPAD9 = 105,
    VK_MULTIPLY = 106,
    VK_ADD = 107,
    VK_SEPARATOR = 108,
    VK_SUBTRACT = 109,
    VK_DECIMAL = 110,
    VK_DIVIDE = 111,
    VK_F1 = 112,
    VK_F2 = 113,
    VK_F3 = 114,
    VK_F4 = 115,
    VK_F5 = 116,
    VK_F6 = 117,
    VK_F7 = 118,
    VK_F8 = 119,
    VK_F9 = 120,
    VK_F10 = 121,
    VK_F11 = 122,
    VK_F12 = 123,
    VK_F13 = 124,
    VK_F14 = 125,
    VK_F15 = 126,
    VK_F16 = 127,
    VK_F17 = 128,
    VK_F18 = 129,
    VK_F19 = 130,
    VK_F20 = 131,
    VK_F21 = 132,
    VK_F22 = 133,
    VK_F23 = 134,
    VK_F24 = 135,
    VK_NAVIGATION_VIEW = 136,
    VK_NAVIGATION_MENU = 137,
    VK_NAVIGATION_UP = 138,
    VK_NAVIGATION_DOWN = 139,
    VK_NAVIGATION_LEFT = 140,
    VK_NAVIGATION_RIGHT = 141,
    VK_NAVIGATION_ACCEPT = 142,
    VK_NAVIGATION_CANCEL = 143,
    VK_NUMLOCK = 144,
    VK_SCROLL = 145,
    VK_OEM_NEC_EQUAL = 146,
    VK_OEM_FJ_JISHO = 146,
    VK_OEM_FJ_MASSHOU = 147,
    VK_OEM_FJ_TOUROKU = 148,
    VK_OEM_FJ_LOYA = 149,
    VK_OEM_FJ_ROYA = 150,
    VK_LSHIFT = 160,
    VK_RSHIFT = 161,
    VK_LCONTROL = 162,
    VK_RCONTROL = 163,
    VK_LMENU = 164,
    VK_RMENU = 165,
    VK_BROWSER_BACK = 166,
    VK_BROWSER_FORWARD = 167,
    VK_BROWSER_REFRESH = 168,
    VK_BROWSER_STOP = 169,
    VK_BROWSER_SEARCH = 170,
    VK_BROWSER_FAVORITES = 171,
    VK_BROWSER_HOME = 172,
    VK_VOLUME_MUTE = 173,
    VK_VOLUME_DOWN = 174,
    VK_VOLUME_UP = 175,
    VK_MEDIA_NEXT_TRACK = 176,
    VK_MEDIA_PREV_TRACK = 177,
    VK_MEDIA_STOP = 178,
    VK_MEDIA_PLAY_PAUSE = 179,
    VK_LAUNCH_MAIL = 180,
    VK_LAUNCH_MEDIA_SELECT = 181,
    VK_LAUNCH_APP1 = 182,
    VK_LAUNCH_APP2 = 183,
    VK_OEM_1 = 186,
    VK_OEM_PLUS = 187,
    VK_OEM_COMMA = 188,
    VK_OEM_MINUS = 189,
    VK_OEM_PERIOD = 190,
    VK_OEM_2 = 191,
    VK_OEM_3 = 192,
    VK_GAMEPAD_A = 195,
    VK_GAMEPAD_B = 196,
    VK_GAMEPAD_X = 197,
    VK_GAMEPAD_Y = 198,
    VK_GAMEPAD_RIGHT_SHOULDER = 199,
    VK_GAMEPAD_LEFT_SHOULDER = 200,
    VK_GAMEPAD_LEFT_TRIGGER = 201,
    VK_GAMEPAD_RIGHT_TRIGGER = 202,
    VK_GAMEPAD_DPAD_UP = 203,
    VK_GAMEPAD_DPAD_DOWN = 204,
    VK_GAMEPAD_DPAD_LEFT = 205,
    VK_GAMEPAD_DPAD_RIGHT = 206,
    VK_GAMEPAD_MENU = 207,
    VK_GAMEPAD_VIEW = 208,
    VK_GAMEPAD_LEFT_THUMBSTICK_BUTTON = 209,
    VK_GAMEPAD_RIGHT_THUMBSTICK_BUTTON = 210,
    VK_GAMEPAD_LEFT_THUMBSTICK_UP = 211,
    VK_GAMEPAD_LEFT_THUMBSTICK_DOWN = 212,
    VK_GAMEPAD_LEFT_THUMBSTICK_RIGHT = 213,
    VK_GAMEPAD_LEFT_THUMBSTICK_LEFT = 214,
    VK_GAMEPAD_RIGHT_THUMBSTICK_UP = 215,
    VK_GAMEPAD_RIGHT_THUMBSTICK_DOWN = 216,
    VK_GAMEPAD_RIGHT_THUMBSTICK_RIGHT = 217,
    VK_GAMEPAD_RIGHT_THUMBSTICK_LEFT = 218,
    VK_OEM_4 = 219,
    VK_OEM_5 = 220,
    VK_OEM_6 = 221,
    VK_OEM_7 = 222,
    VK_OEM_8 = 223,
    VK_OEM_AX = 225,
    VK_OEM_102 = 226,
    VK_ICO_HELP = 227,
    VK_ICO_00 = 228,
    VK_PROCESSKEY = 229,
    VK_ICO_CLEAR = 230,
    VK_PACKET = 231,
    VK_OEM_RESET = 233,
    VK_OEM_JUMP = 234,
    VK_OEM_PA1 = 235,
    VK_OEM_PA2 = 236,
    VK_OEM_PA3 = 237,
    VK_OEM_WSCTRL = 238,
    VK_OEM_CUSEL = 239,
    VK_OEM_ATTN = 240,
    VK_OEM_FINISH = 241,
    VK_OEM_COPY = 242,
    VK_OEM_AUTO = 243,
    VK_OEM_ENLW = 244,
    VK_OEM_BACKTAB = 245,
    VK_ATTN = 246,
    VK_CRSEL = 247,
    VK_EXSEL = 248,
    VK_EREOF = 249,
    VK_PLAY = 250,
    VK_ZOOM = 251,
    VK_NONAME = 252,
    VK_PA1 = 253,
    VK_OEM_CLEAR = 254,
} VIRTUAL_KEY;

typedef int HRAWINPUT;

typedef int MOUSEMOVEPOINT;

typedef int TRACKMOUSEEVENT;

typedef int MOUSEINPUT;

typedef int KEYBDINPUT;

typedef int HARDWAREINPUT;

typedef int INPUT;

typedef int LASTINPUTINFO;

typedef int RAWINPUTHEADER;

typedef int RAWMOUSE;

typedef int RAWKEYBOARD;

typedef int RAWHID;

typedef int RAWINPUT;

typedef int RID_DEVICE_INFO_MOUSE;

typedef int RID_DEVICE_INFO_KEYBOARD;

typedef int RID_DEVICE_INFO_HID;

typedef int RID_DEVICE_INFO;

typedef int RAWINPUTDEVICE;

typedef int RAWINPUTDEVICELIST;


//--------------------------------------------------------------------------------
// Section: Functions (60)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.0'
/*BOOL*/void _TrackMouseEvent();

// TODO: this type is limited to platform 'windows5.0'
/*HKL*/void LoadKeyboardLayoutA();

// TODO: this type is limited to platform 'windows5.0'
/*HKL*/void LoadKeyboardLayoutW();

// TODO: this type is limited to platform 'windows5.0'
/*HKL*/void ActivateKeyboardLayout();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void ToUnicodeEx();

// TODO: this type is limited to platform 'windows5.0'
/*BOOL*/void UnloadKeyboardLayout();

// TODO: this type is limited to platform 'windows5.0'
/*BOOL*/void GetKeyboardLayoutNameA();

// TODO: this type is limited to platform 'windows5.0'
/*BOOL*/void GetKeyboardLayoutNameW();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void GetKeyboardLayoutList();

// TODO: this type is limited to platform 'windows5.0'
/*HKL*/void GetKeyboardLayout();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void GetMouseMovePointsEx();

// TODO: this type is limited to platform 'windows5.0'
/*BOOL*/void TrackMouseEvent();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void RegisterHotKey();

// TODO: this type is limited to platform 'windows5.0'
/*BOOL*/void UnregisterHotKey();

// TODO: this type is limited to platform 'windows5.0'
/*BOOL*/void SwapMouseButton();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void GetDoubleClickTime();

// TODO: this type is limited to platform 'windows5.0'
/*BOOL*/void SetDoubleClickTime();

// TODO: this type is limited to platform 'windows5.0'
/*HWND*/void SetFocus();

// TODO: this type is limited to platform 'windows5.0'
/*HWND*/void GetActiveWindow();

// TODO: this type is limited to platform 'windows5.0'
/*HWND*/void GetFocus();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void GetKBCodePage();

// TODO: this type is limited to platform 'windows5.0'
/*i16*/void GetKeyState();

// TODO: this type is limited to platform 'windows5.0'
/*i16*/void GetAsyncKeyState();

// TODO: this type is limited to platform 'windows5.0'
/*BOOL*/void GetKeyboardState();

// TODO: this type is limited to platform 'windows5.0'
/*BOOL*/void SetKeyboardState();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void GetKeyNameTextA();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void GetKeyNameTextW();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void GetKeyboardType();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void ToAscii();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void ToAsciiEx();

// TODO: this type is limited to platform 'windows5.0'
/*i32*/void ToUnicode();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void OemKeyScan();

// TODO: this type is limited to platform 'windows5.0'
/*i16*/void VkKeyScanA();

// TODO: this type is limited to platform 'windows5.0'
/*i16*/void VkKeyScanW();

// TODO: this type is limited to platform 'windows5.0'
/*i16*/void VkKeyScanExA();

// TODO: this type is limited to platform 'windows5.0'
/*i16*/void VkKeyScanExW();

// TODO: this type is limited to platform 'windows5.0'
/*void*/void keybd_event();

// TODO: this type is limited to platform 'windows5.0'
/*void*/void mouse_event();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void SendInput();

// TODO: this type is limited to platform 'windows5.0'
/*BOOL*/void GetLastInputInfo();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void MapVirtualKeyA();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void MapVirtualKeyW();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void MapVirtualKeyExA();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void MapVirtualKeyExW();

// TODO: this type is limited to platform 'windows5.0'
/*HWND*/void GetCapture();

// TODO: this type is limited to platform 'windows5.0'
/*HWND*/void SetCapture();

// TODO: this type is limited to platform 'windows5.0'
/*BOOL*/void ReleaseCapture();

// TODO: this type is limited to platform 'windows5.0'
/*BOOL*/void EnableWindow();

// TODO: this type is limited to platform 'windows5.0'
/*BOOL*/void IsWindowEnabled();

// TODO: this type is limited to platform 'windows5.0'
/*BOOL*/void DragDetect();

// TODO: this type is limited to platform 'windows5.0'
/*HWND*/void SetActiveWindow();

// TODO: this type is limited to platform 'windows5.0'
/*BOOL*/void BlockInput();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetRawInputData();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetRawInputDeviceInfoA();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetRawInputDeviceInfoW();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetRawInputBuffer();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void RegisterRawInputDevices();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetRegisteredRawInputDevices();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetRawInputDeviceList();

// TODO: this type is limited to platform 'windows5.1.2600'
/*LRESULT*/void DefRawInputProc();

