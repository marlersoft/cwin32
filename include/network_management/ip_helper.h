// NOTE: this file is autogenerated, DO NOT MODIFY
#include "../bootstrap.h"
//--------------------------------------------------------------------------------
// Section: Constants (430)
//--------------------------------------------------------------------------------
#define NET_IF_OPER_STATUS_DOWN_NOT_AUTHENTICATED (UINT)1
#define NET_IF_OPER_STATUS_DOWN_NOT_MEDIA_CONNECTED (UINT)2
#define NET_IF_OPER_STATUS_DORMANT_PAUSED (UINT)4
#define NET_IF_OPER_STATUS_DORMANT_LOW_POWER (UINT)8
#define NET_IF_OID_IF_ALIAS (UINT)1
#define NET_IF_OID_COMPARTMENT_ID (UINT)2
#define NET_IF_OID_NETWORK_GUID (UINT)3
#define NET_IF_OID_IF_ENTRY (UINT)4
#define NET_SITEID_UNSPECIFIED (UINT)0
#define NET_SITEID_MAXUSER (UINT)134217727
#define NET_SITEID_MAXSYSTEM (UINT)268435455
#define NET_IFLUID_UNSPECIFIED (UINT)0
#define NIIF_HARDWARE_INTERFACE (UINT)1
#define NIIF_FILTER_INTERFACE (UINT)2
#define NIIF_NDIS_RESERVED1 (UINT)4
#define NIIF_NDIS_RESERVED2 (UINT)8
#define NIIF_NDIS_RESERVED3 (UINT)16
#define NIIF_NDIS_WDM_INTERFACE (UINT)32
#define NIIF_NDIS_ENDPOINT_INTERFACE (UINT)64
#define NIIF_NDIS_ISCSI_INTERFACE (UINT)128
#define NIIF_NDIS_RESERVED4 (UINT)256
#define IF_MAX_STRING_SIZE (UINT)256
#define IF_MAX_PHYS_ADDRESS_LENGTH (UINT)32
#define ANY_SIZE (UINT)1
#define MAXLEN_PHYSADDR (UINT)8
#define MAXLEN_IFDESCR (UINT)256
#define MAX_INTERFACE_NAME_LEN (UINT)256
#define MIN_IF_TYPE (UINT)1
#define IF_TYPE_OTHER (UINT)1
#define IF_TYPE_REGULAR_1822 (UINT)2
#define IF_TYPE_HDH_1822 (UINT)3
#define IF_TYPE_DDN_X25 (UINT)4
#define IF_TYPE_RFC877_X25 (UINT)5
#define IF_TYPE_ETHERNET_CSMACD (UINT)6
#define IF_TYPE_IS088023_CSMACD (UINT)7
#define IF_TYPE_ISO88024_TOKENBUS (UINT)8
#define IF_TYPE_ISO88025_TOKENRING (UINT)9
#define IF_TYPE_ISO88026_MAN (UINT)10
#define IF_TYPE_STARLAN (UINT)11
#define IF_TYPE_PROTEON_10MBIT (UINT)12
#define IF_TYPE_PROTEON_80MBIT (UINT)13
#define IF_TYPE_HYPERCHANNEL (UINT)14
#define IF_TYPE_FDDI (UINT)15
#define IF_TYPE_LAP_B (UINT)16
#define IF_TYPE_SDLC (UINT)17
#define IF_TYPE_DS1 (UINT)18
#define IF_TYPE_E1 (UINT)19
#define IF_TYPE_BASIC_ISDN (UINT)20
#define IF_TYPE_PRIMARY_ISDN (UINT)21
#define IF_TYPE_PROP_POINT2POINT_SERIAL (UINT)22
#define IF_TYPE_PPP (UINT)23
#define IF_TYPE_SOFTWARE_LOOPBACK (UINT)24
#define IF_TYPE_EON (UINT)25
#define IF_TYPE_ETHERNET_3MBIT (UINT)26
#define IF_TYPE_NSIP (UINT)27
#define IF_TYPE_SLIP (UINT)28
#define IF_TYPE_ULTRA (UINT)29
#define IF_TYPE_DS3 (UINT)30
#define IF_TYPE_SIP (UINT)31
#define IF_TYPE_FRAMERELAY (UINT)32
#define IF_TYPE_RS232 (UINT)33
#define IF_TYPE_PARA (UINT)34
#define IF_TYPE_ARCNET (UINT)35
#define IF_TYPE_ARCNET_PLUS (UINT)36
#define IF_TYPE_ATM (UINT)37
#define IF_TYPE_MIO_X25 (UINT)38
#define IF_TYPE_SONET (UINT)39
#define IF_TYPE_X25_PLE (UINT)40
#define IF_TYPE_ISO88022_LLC (UINT)41
#define IF_TYPE_LOCALTALK (UINT)42
#define IF_TYPE_SMDS_DXI (UINT)43
#define IF_TYPE_FRAMERELAY_SERVICE (UINT)44
#define IF_TYPE_V35 (UINT)45
#define IF_TYPE_HSSI (UINT)46
#define IF_TYPE_HIPPI (UINT)47
#define IF_TYPE_MODEM (UINT)48
#define IF_TYPE_AAL5 (UINT)49
#define IF_TYPE_SONET_PATH (UINT)50
#define IF_TYPE_SONET_VT (UINT)51
#define IF_TYPE_SMDS_ICIP (UINT)52
#define IF_TYPE_PROP_VIRTUAL (UINT)53
#define IF_TYPE_PROP_MULTIPLEXOR (UINT)54
#define IF_TYPE_IEEE80212 (UINT)55
#define IF_TYPE_FIBRECHANNEL (UINT)56
#define IF_TYPE_HIPPIINTERFACE (UINT)57
#define IF_TYPE_FRAMERELAY_INTERCONNECT (UINT)58
#define IF_TYPE_AFLANE_8023 (UINT)59
#define IF_TYPE_AFLANE_8025 (UINT)60
#define IF_TYPE_CCTEMUL (UINT)61
#define IF_TYPE_FASTETHER (UINT)62
#define IF_TYPE_ISDN (UINT)63
#define IF_TYPE_V11 (UINT)64
#define IF_TYPE_V36 (UINT)65
#define IF_TYPE_G703_64K (UINT)66
#define IF_TYPE_G703_2MB (UINT)67
#define IF_TYPE_QLLC (UINT)68
#define IF_TYPE_FASTETHER_FX (UINT)69
#define IF_TYPE_CHANNEL (UINT)70
#define IF_TYPE_IEEE80211 (UINT)71
#define IF_TYPE_IBM370PARCHAN (UINT)72
#define IF_TYPE_ESCON (UINT)73
#define IF_TYPE_DLSW (UINT)74
#define IF_TYPE_ISDN_S (UINT)75
#define IF_TYPE_ISDN_U (UINT)76
#define IF_TYPE_LAP_D (UINT)77
#define IF_TYPE_IPSWITCH (UINT)78
#define IF_TYPE_RSRB (UINT)79
#define IF_TYPE_ATM_LOGICAL (UINT)80
#define IF_TYPE_DS0 (UINT)81
#define IF_TYPE_DS0_BUNDLE (UINT)82
#define IF_TYPE_BSC (UINT)83
#define IF_TYPE_ASYNC (UINT)84
#define IF_TYPE_CNR (UINT)85
#define IF_TYPE_ISO88025R_DTR (UINT)86
#define IF_TYPE_EPLRS (UINT)87
#define IF_TYPE_ARAP (UINT)88
#define IF_TYPE_PROP_CNLS (UINT)89
#define IF_TYPE_HOSTPAD (UINT)90
#define IF_TYPE_TERMPAD (UINT)91
#define IF_TYPE_FRAMERELAY_MPI (UINT)92
#define IF_TYPE_X213 (UINT)93
#define IF_TYPE_ADSL (UINT)94
#define IF_TYPE_RADSL (UINT)95
#define IF_TYPE_SDSL (UINT)96
#define IF_TYPE_VDSL (UINT)97
#define IF_TYPE_ISO88025_CRFPRINT (UINT)98
#define IF_TYPE_MYRINET (UINT)99
#define IF_TYPE_VOICE_EM (UINT)100
#define IF_TYPE_VOICE_FXO (UINT)101
#define IF_TYPE_VOICE_FXS (UINT)102
#define IF_TYPE_VOICE_ENCAP (UINT)103
#define IF_TYPE_VOICE_OVERIP (UINT)104
#define IF_TYPE_ATM_DXI (UINT)105
#define IF_TYPE_ATM_FUNI (UINT)106
#define IF_TYPE_ATM_IMA (UINT)107
#define IF_TYPE_PPPMULTILINKBUNDLE (UINT)108
#define IF_TYPE_IPOVER_CDLC (UINT)109
#define IF_TYPE_IPOVER_CLAW (UINT)110
#define IF_TYPE_STACKTOSTACK (UINT)111
#define IF_TYPE_VIRTUALIPADDRESS (UINT)112
#define IF_TYPE_MPC (UINT)113
#define IF_TYPE_IPOVER_ATM (UINT)114
#define IF_TYPE_ISO88025_FIBER (UINT)115
#define IF_TYPE_TDLC (UINT)116
#define IF_TYPE_GIGABITETHERNET (UINT)117
#define IF_TYPE_HDLC (UINT)118
#define IF_TYPE_LAP_F (UINT)119
#define IF_TYPE_V37 (UINT)120
#define IF_TYPE_X25_MLP (UINT)121
#define IF_TYPE_X25_HUNTGROUP (UINT)122
#define IF_TYPE_TRANSPHDLC (UINT)123
#define IF_TYPE_INTERLEAVE (UINT)124
#define IF_TYPE_FAST (UINT)125
#define IF_TYPE_IP (UINT)126
#define IF_TYPE_DOCSCABLE_MACLAYER (UINT)127
#define IF_TYPE_DOCSCABLE_DOWNSTREAM (UINT)128
#define IF_TYPE_DOCSCABLE_UPSTREAM (UINT)129
#define IF_TYPE_A12MPPSWITCH (UINT)130
#define IF_TYPE_TUNNEL (UINT)131
#define IF_TYPE_COFFEE (UINT)132
#define IF_TYPE_CES (UINT)133
#define IF_TYPE_ATM_SUBINTERFACE (UINT)134
#define IF_TYPE_L2_VLAN (UINT)135
#define IF_TYPE_L3_IPVLAN (UINT)136
#define IF_TYPE_L3_IPXVLAN (UINT)137
#define IF_TYPE_DIGITALPOWERLINE (UINT)138
#define IF_TYPE_MEDIAMAILOVERIP (UINT)139
#define IF_TYPE_DTM (UINT)140
#define IF_TYPE_DCN (UINT)141
#define IF_TYPE_IPFORWARD (UINT)142
#define IF_TYPE_MSDSL (UINT)143
#define IF_TYPE_IEEE1394 (UINT)144
#define IF_TYPE_IF_GSN (UINT)145
#define IF_TYPE_DVBRCC_MACLAYER (UINT)146
#define IF_TYPE_DVBRCC_DOWNSTREAM (UINT)147
#define IF_TYPE_DVBRCC_UPSTREAM (UINT)148
#define IF_TYPE_ATM_VIRTUAL (UINT)149
#define IF_TYPE_MPLS_TUNNEL (UINT)150
#define IF_TYPE_SRP (UINT)151
#define IF_TYPE_VOICEOVERATM (UINT)152
#define IF_TYPE_VOICEOVERFRAMERELAY (UINT)153
#define IF_TYPE_IDSL (UINT)154
#define IF_TYPE_COMPOSITELINK (UINT)155
#define IF_TYPE_SS7_SIGLINK (UINT)156
#define IF_TYPE_PROP_WIRELESS_P2P (UINT)157
#define IF_TYPE_FR_FORWARD (UINT)158
#define IF_TYPE_RFC1483 (UINT)159
#define IF_TYPE_USB (UINT)160
#define IF_TYPE_IEEE8023AD_LAG (UINT)161
#define IF_TYPE_BGP_POLICY_ACCOUNTING (UINT)162
#define IF_TYPE_FRF16_MFR_BUNDLE (UINT)163
#define IF_TYPE_H323_GATEKEEPER (UINT)164
#define IF_TYPE_H323_PROXY (UINT)165
#define IF_TYPE_MPLS (UINT)166
#define IF_TYPE_MF_SIGLINK (UINT)167
#define IF_TYPE_HDSL2 (UINT)168
#define IF_TYPE_SHDSL (UINT)169
#define IF_TYPE_DS1_FDL (UINT)170
#define IF_TYPE_POS (UINT)171
#define IF_TYPE_DVB_ASI_IN (UINT)172
#define IF_TYPE_DVB_ASI_OUT (UINT)173
#define IF_TYPE_PLC (UINT)174
#define IF_TYPE_NFAS (UINT)175
#define IF_TYPE_TR008 (UINT)176
#define IF_TYPE_GR303_RDT (UINT)177
#define IF_TYPE_GR303_IDT (UINT)178
#define IF_TYPE_ISUP (UINT)179
#define IF_TYPE_PROP_DOCS_WIRELESS_MACLAYER (UINT)180
#define IF_TYPE_PROP_DOCS_WIRELESS_DOWNSTREAM (UINT)181
#define IF_TYPE_PROP_DOCS_WIRELESS_UPSTREAM (UINT)182
#define IF_TYPE_HIPERLAN2 (UINT)183
#define IF_TYPE_PROP_BWA_P2MP (UINT)184
#define IF_TYPE_SONET_OVERHEAD_CHANNEL (UINT)185
#define IF_TYPE_DIGITAL_WRAPPER_OVERHEAD_CHANNEL (UINT)186
#define IF_TYPE_AAL2 (UINT)187
#define IF_TYPE_RADIO_MAC (UINT)188
#define IF_TYPE_ATM_RADIO (UINT)189
#define IF_TYPE_IMT (UINT)190
#define IF_TYPE_MVL (UINT)191
#define IF_TYPE_REACH_DSL (UINT)192
#define IF_TYPE_FR_DLCI_ENDPT (UINT)193
#define IF_TYPE_ATM_VCI_ENDPT (UINT)194
#define IF_TYPE_OPTICAL_CHANNEL (UINT)195
#define IF_TYPE_OPTICAL_TRANSPORT (UINT)196
#define IF_TYPE_IEEE80216_WMAN (UINT)237
#define IF_TYPE_WWANPP (UINT)243
#define IF_TYPE_WWANPP2 (UINT)244
#define IF_TYPE_IEEE802154 (UINT)259
#define IF_TYPE_XBOX_WIRELESS (UINT)281
#define MAX_IF_TYPE (UINT)281
#define IF_CHECK_NONE (UINT)0
#define IF_CHECK_MCAST (UINT)1
#define IF_CHECK_SEND (UINT)2
#define IF_CONNECTION_DEDICATED (UINT)1
#define IF_CONNECTION_PASSIVE (UINT)2
#define IF_CONNECTION_DEMAND (UINT)3
#define IF_ADMIN_STATUS_UP (UINT)1
#define IF_ADMIN_STATUS_DOWN (UINT)2
#define IF_ADMIN_STATUS_TESTING (UINT)3
#define MIB_IF_TYPE_OTHER (UINT)1
#define MIB_IF_TYPE_ETHERNET (UINT)6
#define MIB_IF_TYPE_TOKENRING (UINT)9
#define MIB_IF_TYPE_FDDI (UINT)15
#define MIB_IF_TYPE_PPP (UINT)23
#define MIB_IF_TYPE_LOOPBACK (UINT)24
#define MIB_IF_TYPE_SLIP (UINT)28
#define MIB_IF_ADMIN_STATUS_UP (UINT)1
#define MIB_IF_ADMIN_STATUS_DOWN (UINT)2
#define MIB_IF_ADMIN_STATUS_TESTING (UINT)3
#define MIB_IPADDR_PRIMARY (UINT)1
#define MIB_IPADDR_DYNAMIC (UINT)4
#define MIB_IPADDR_DISCONNECTED (UINT)8
#define MIB_IPADDR_DELETED (UINT)64
#define MIB_IPADDR_TRANSIENT (UINT)128
#define MIB_IPADDR_DNS_ELIGIBLE (UINT)256
#define MIB_IPROUTE_METRIC_UNUSED (UINT)4294967295
#define MIB_USE_CURRENT_TTL (UINT)4294967295
#define MIB_USE_CURRENT_FORWARDING (UINT)4294967295
#define ICMP6_INFOMSG_MASK (UINT)128
#define IPRTRMGR_PID (UINT)10000
#define IF_NUMBER (UINT)0
#define IF_TABLE (UINT)1
#define IF_ROW (UINT)2
#define IP_STATS (UINT)3
#define IP_ADDRTABLE (UINT)4
#define IP_ADDRROW (UINT)5
#define IP_FORWARDNUMBER (UINT)6
#define IP_FORWARDTABLE (UINT)7
#define IP_FORWARDROW (UINT)8
#define IP_NETTABLE (UINT)9
#define IP_NETROW (UINT)10
#define ICMP_STATS (UINT)11
#define TCP_STATS (UINT)12
#define TCP_TABLE (UINT)13
#define TCP_ROW (UINT)14
#define UDP_STATS (UINT)15
#define UDP_TABLE (UINT)16
#define UDP_ROW (UINT)17
#define MCAST_MFE (UINT)18
#define MCAST_MFE_STATS (UINT)19
#define BEST_IF (UINT)20
#define BEST_ROUTE (UINT)21
#define PROXY_ARP (UINT)22
#define MCAST_IF_ENTRY (UINT)23
#define MCAST_GLOBAL (UINT)24
#define IF_STATUS (UINT)25
#define MCAST_BOUNDARY (UINT)26
#define MCAST_SCOPE (UINT)27
#define DEST_MATCHING (UINT)28
#define DEST_LONGER (UINT)29
#define DEST_SHORTER (UINT)30
#define ROUTE_MATCHING (UINT)31
#define ROUTE_LONGER (UINT)32
#define ROUTE_SHORTER (UINT)33
#define ROUTE_STATE (UINT)34
#define MCAST_MFE_STATS_EX (UINT)35
#define IP6_STATS (UINT)36
#define UDP6_STATS (UINT)37
#define TCP6_STATS (UINT)38
#define NUMBER_OF_EXPORTED_VARIABLES (UINT)39
#define MAX_SCOPE_NAME_LEN (UINT)255
#define MAX_MIB_OFFSET (UINT)8
#define MIB_INVALID_TEREDO_PORT_NUMBER (UINT)0
#define DNS_SETTINGS_VERSION1 (UINT)1
#define DNS_INTERFACE_SETTINGS_VERSION1 (UINT)1
#define DNS_INTERFACE_SETTINGS_VERSION2 (UINT)2
#define DNS_SETTING_IPV6 (UINT)1
#define DNS_SETTING_NAMESERVER (UINT)2
#define DNS_SETTING_SEARCHLIST (UINT)4
#define DNS_SETTING_REGISTRATION_ENABLED (UINT)8
#define DNS_SETTING_REGISTER_ADAPTER_NAME (UINT)16
#define DNS_SETTING_DOMAIN (UINT)32
#define DNS_SETTING_HOSTNAME (UINT)64
#define DNS_SETTINGS_ENABLE_LLMNR (UINT)128
#define DNS_SETTINGS_QUERY_ADAPTER_NAME (UINT)256
#define DNS_SETTING_PROFILE_NAMESERVER (UINT)512
#define DNS_SETTING_DISABLE_UNCONSTRAINED_QUERIES (UINT)1024
#define DNS_SETTING_SUPPLEMENTAL_SEARCH_LIST (UINT)2048
#define TCPIP_OWNING_MODULE_SIZE (UINT)16
#define FD_FLAGS_NOSYN (UINT)1
#define LB_SRC_ADDR_USE_SRCADDR_FLAG (UINT)1
#define LB_SRC_ADDR_USE_DSTADDR_FLAG (UINT)2
#define LB_DST_ADDR_USE_SRCADDR_FLAG (UINT)4
#define LB_DST_ADDR_USE_DSTADDR_FLAG (UINT)8
#define LB_SRC_MASK_LATE_FLAG (UINT)16
#define LB_DST_MASK_LATE_FLAG (UINT)32
#define ERROR_BASE (UINT)23000
#define PFERROR_NO_PF_INTERFACE (UINT)23000
#define PFERROR_NO_FILTERS_GIVEN (UINT)23001
#define PFERROR_BUFFER_TOO_SMALL (UINT)23002
#define ERROR_IPV6_NOT_IMPLEMENTED (UINT)23003
#define IP_EXPORT_INCLUDED (UINT)1
#define MAX_ADAPTER_NAME (UINT)128
#define IP_STATUS_BASE (UINT)11000
#define IP_SUCCESS (UINT)0
#define IP_BUF_TOO_SMALL (UINT)11001
#define IP_DEST_NET_UNREACHABLE (UINT)11002
#define IP_DEST_HOST_UNREACHABLE (UINT)11003
#define IP_DEST_PROT_UNREACHABLE (UINT)11004
#define IP_DEST_PORT_UNREACHABLE (UINT)11005
#define IP_NO_RESOURCES (UINT)11006
#define IP_BAD_OPTION (UINT)11007
#define IP_HW_ERROR (UINT)11008
#define IP_PACKET_TOO_BIG (UINT)11009
#define IP_REQ_TIMED_OUT (UINT)11010
#define IP_BAD_REQ (UINT)11011
#define IP_BAD_ROUTE (UINT)11012
#define IP_TTL_EXPIRED_TRANSIT (UINT)11013
#define IP_TTL_EXPIRED_REASSEM (UINT)11014
#define IP_PARAM_PROBLEM (UINT)11015
#define IP_SOURCE_QUENCH (UINT)11016
#define IP_OPTION_TOO_BIG (UINT)11017
#define IP_BAD_DESTINATION (UINT)11018
#define IP_DEST_NO_ROUTE (UINT)11002
#define IP_DEST_ADDR_UNREACHABLE (UINT)11003
#define IP_DEST_PROHIBITED (UINT)11004
#define IP_HOP_LIMIT_EXCEEDED (UINT)11013
#define IP_REASSEMBLY_TIME_EXCEEDED (UINT)11014
#define IP_PARAMETER_PROBLEM (UINT)11015
#define IP_DEST_UNREACHABLE (UINT)11040
#define IP_TIME_EXCEEDED (UINT)11041
#define IP_BAD_HEADER (UINT)11042
#define IP_UNRECOGNIZED_NEXT_HEADER (UINT)11043
#define IP_ICMP_ERROR (UINT)11044
#define IP_DEST_SCOPE_MISMATCH (UINT)11045
#define IP_ADDR_DELETED (UINT)11019
#define IP_SPEC_MTU_CHANGE (UINT)11020
#define IP_MTU_CHANGE (UINT)11021
#define IP_UNLOAD (UINT)11022
#define IP_ADDR_ADDED (UINT)11023
#define IP_MEDIA_CONNECT (UINT)11024
#define IP_MEDIA_DISCONNECT (UINT)11025
#define IP_BIND_ADAPTER (UINT)11026
#define IP_UNBIND_ADAPTER (UINT)11027
#define IP_DEVICE_DOES_NOT_EXIST (UINT)11028
#define IP_DUPLICATE_ADDRESS (UINT)11029
#define IP_INTERFACE_METRIC_CHANGE (UINT)11030
#define IP_RECONFIG_SECFLTR (UINT)11031
#define IP_NEGOTIATING_IPSEC (UINT)11032
#define IP_INTERFACE_WOL_CAPABILITY_CHANGE (UINT)11033
#define IP_DUPLICATE_IPADD (UINT)11034
#define IP_GENERAL_FAILURE (UINT)11050
#define IP_PENDING (UINT)11255
#define IP_FLAG_REVERSE (UINT)1
#define IP_FLAG_DF (UINT)2
#define MAX_OPT_SIZE (UINT)40
#define IOCTL_IP_RTCHANGE_NOTIFY_REQUEST (UINT)101
#define IOCTL_IP_ADDCHANGE_NOTIFY_REQUEST (UINT)102
#define IOCTL_ARP_SEND_REQUEST (UINT)103
#define IOCTL_IP_INTERFACE_INFO (UINT)104
#define IOCTL_IP_GET_BEST_INTERFACE (UINT)105
#define IOCTL_IP_UNIDIRECTIONAL_ADAPTER_ADDRESS (UINT)106
#define INTERFACE_TIMESTAMP_CAPABILITIES_VERSION_1 (UINT)1
#define INTERFACE_HARDWARE_CROSSTIMESTAMP_VERSION_1 (UINT)1
#define NET_STRING_IPV4_ADDRESS (UINT)1
#define NET_STRING_IPV4_SERVICE (UINT)2
#define NET_STRING_IPV4_NETWORK (UINT)4
#define NET_STRING_IPV6_ADDRESS (UINT)8
#define NET_STRING_IPV6_ADDRESS_NO_SCOPE (UINT)16
#define NET_STRING_IPV6_SERVICE (UINT)32
#define NET_STRING_IPV6_SERVICE_NO_SCOPE (UINT)64
#define NET_STRING_IPV6_NETWORK (UINT)128
#define NET_STRING_NAMED_ADDRESS (UINT)256
#define NET_STRING_NAMED_SERVICE (UINT)512
#define MAX_ADAPTER_DESCRIPTION_LENGTH (UINT)128
#define MAX_ADAPTER_NAME_LENGTH (UINT)256
#define MAX_ADAPTER_ADDRESS_LENGTH (UINT)8
#define DEFAULT_MINIMUM_ENTITIES (UINT)32
#define MAX_HOSTNAME_LEN (UINT)128
#define MAX_DOMAIN_NAME_LEN (UINT)128
#define MAX_SCOPE_ID_LEN (UINT)256
#define MAX_DHCPV6_DUID_LENGTH (UINT)130
#define MAX_DNS_SUFFIX_STRING_LENGTH (UINT)256
#define BROADCAST_NODETYPE (UINT)1
#define PEER_TO_PEER_NODETYPE (UINT)2
#define MIXED_NODETYPE (UINT)4
#define HYBRID_NODETYPE (UINT)8
#define IP_ADAPTER_ADDRESS_DNS_ELIGIBLE (UINT)1
#define IP_ADAPTER_ADDRESS_TRANSIENT (UINT)2
#define IP_ADAPTER_DDNS_ENABLED (UINT)1
#define IP_ADAPTER_REGISTER_ADAPTER_SUFFIX (UINT)2
#define IP_ADAPTER_DHCP_ENABLED (UINT)4
#define IP_ADAPTER_RECEIVE_ONLY (UINT)8
#define IP_ADAPTER_NO_MULTICAST (UINT)16
#define IP_ADAPTER_IPV6_OTHER_STATEFUL_CONFIG (UINT)32
#define IP_ADAPTER_NETBIOS_OVER_TCPIP_ENABLED (UINT)64
#define IP_ADAPTER_IPV4_ENABLED (UINT)128
#define IP_ADAPTER_IPV6_ENABLED (UINT)256
#define IP_ADAPTER_IPV6_MANAGE_ADDRESS_CONFIG (UINT)512
#define GAA_FLAG_SKIP_DNS_INFO (UINT)2048

//--------------------------------------------------------------------------------
// Section: Types (214)
//--------------------------------------------------------------------------------
typedef enum {
    AF_INET = 2,
    AF_INET6 = 23,
    AF_UNSPEC = 0,
} ADDRESS_FAMILY;

typedef enum {
    GAA_FLAG_SKIP_UNICAST = 1,
    GAA_FLAG_SKIP_ANYCAST = 2,
    GAA_FLAG_SKIP_MULTICAST = 4,
    GAA_FLAG_SKIP_DNS_SERVER = 8,
    GAA_FLAG_INCLUDE_PREFIX = 16,
    GAA_FLAG_SKIP_FRIENDLY_NAME = 32,
    GAA_FLAG_INCLUDE_WINS_INFO = 64,
    GAA_FLAG_INCLUDE_GATEWAYS = 128,
    GAA_FLAG_INCLUDE_ALL_INTERFACES = 256,
    GAA_FLAG_INCLUDE_ALL_COMPARTMENTS = 512,
    GAA_FLAG_INCLUDE_TUNNEL_BINDINGORDER = 1024,
} GET_ADAPTERS_ADDRESSES_FLAGS;

typedef int ip_option_information32;

typedef int icmp_echo_reply32;

typedef int IcmpHandle;

typedef int HIFTIMESTAMPCHANGE;

typedef int ip_option_information;

typedef int icmp_echo_reply;

typedef int IPV6_ADDRESS_EX;

typedef int icmpv6_echo_reply_lh;

typedef int arp_send_reply;

typedef int tcp_reserve_port_range;

typedef int IP_ADAPTER_INDEX_MAP;

typedef int IP_INTERFACE_INFO;

typedef int IP_UNIDIRECTIONAL_ADAPTER_ADDRESS;

typedef int IP_ADAPTER_ORDER_MAP;

typedef int IP_MCAST_COUNTER_INFO;

typedef enum {
    IF_ACCESS_LOOPBACK = 1,
    IF_ACCESS_BROADCAST = 2,
    IF_ACCESS_POINT_TO_POINT = 3,
    IF_ACCESS_POINTTOPOINT = 3,
    IF_ACCESS_POINT_TO_MULTI_POINT = 4,
    IF_ACCESS_POINTTOMULTIPOINT = 4,
} IF_ACCESS_TYPE;

typedef enum {
    IF_OPER_STATUS_NON_OPERATIONAL = 0,
    IF_OPER_STATUS_UNREACHABLE = 1,
    IF_OPER_STATUS_DISCONNECTED = 2,
    IF_OPER_STATUS_CONNECTING = 3,
    IF_OPER_STATUS_CONNECTED = 4,
    IF_OPER_STATUS_OPERATIONAL = 5,
} INTERNAL_IF_OPER_STATUS;

typedef enum {
    NET_IF_OPER_STATUS_UP = 1,
    NET_IF_OPER_STATUS_DOWN = 2,
    NET_IF_OPER_STATUS_TESTING = 3,
    NET_IF_OPER_STATUS_UNKNOWN = 4,
    NET_IF_OPER_STATUS_DORMANT = 5,
    NET_IF_OPER_STATUS_NOT_PRESENT = 6,
    NET_IF_OPER_STATUS_LOWER_LAYER_DOWN = 7,
} NET_IF_OPER_STATUS;

typedef enum {
    NET_IF_ADMIN_STATUS_UP = 1,
    NET_IF_ADMIN_STATUS_DOWN = 2,
    NET_IF_ADMIN_STATUS_TESTING = 3,
} NET_IF_ADMIN_STATUS;

typedef enum {
    NET_IF_RCV_ADDRESS_TYPE_OTHER = 1,
    NET_IF_RCV_ADDRESS_TYPE_VOLATILE = 2,
    NET_IF_RCV_ADDRESS_TYPE_NON_VOLATILE = 3,
} NET_IF_RCV_ADDRESS_TYPE;

typedef int NET_IF_RCV_ADDRESS_LH;

typedef int NET_IF_ALIAS_LH;

typedef int NET_LUID_LH;

typedef enum {
    NET_IF_CONNECTION_DEDICATED = 1,
    NET_IF_CONNECTION_PASSIVE = 2,
    NET_IF_CONNECTION_DEMAND = 3,
    NET_IF_CONNECTION_MAXIMUM = 4,
} NET_IF_CONNECTION_TYPE;

typedef enum {
    TUNNEL_TYPE_NONE = 0,
    TUNNEL_TYPE_OTHER = 1,
    TUNNEL_TYPE_DIRECT = 2,
    TUNNEL_TYPE_6TO4 = 11,
    TUNNEL_TYPE_ISATAP = 13,
    TUNNEL_TYPE_TEREDO = 14,
    TUNNEL_TYPE_IPHTTPS = 15,
} TUNNEL_TYPE;

typedef enum {
    NET_IF_ACCESS_LOOPBACK = 1,
    NET_IF_ACCESS_BROADCAST = 2,
    NET_IF_ACCESS_POINT_TO_POINT = 3,
    NET_IF_ACCESS_POINT_TO_MULTI_POINT = 4,
    NET_IF_ACCESS_MAXIMUM = 5,
} NET_IF_ACCESS_TYPE;

typedef enum {
    NET_IF_DIRECTION_SENDRECEIVE = 0,
    NET_IF_DIRECTION_SENDONLY = 1,
    NET_IF_DIRECTION_RECEIVEONLY = 2,
    NET_IF_DIRECTION_MAXIMUM = 3,
} NET_IF_DIRECTION_TYPE;

typedef enum {
    MediaConnectStateUnknown = 0,
    MediaConnectStateConnected = 1,
    MediaConnectStateDisconnected = 2,
} NET_IF_MEDIA_CONNECT_STATE;

typedef enum {
    MediaDuplexStateUnknown = 0,
    MediaDuplexStateHalf = 1,
    MediaDuplexStateFull = 2,
} NET_IF_MEDIA_DUPLEX_STATE;

typedef int NET_PHYSICAL_LOCATION_LH;

typedef int IF_COUNTED_STRING_LH;

typedef int IF_PHYSICAL_ADDRESS_LH;

typedef enum {
    IF_ADMINISTRATIVE_DISABLED = 0,
    IF_ADMINISTRATIVE_ENABLED = 1,
    IF_ADMINISTRATIVE_DEMANDDIAL = 2,
} IF_ADMINISTRATIVE_STATE;

typedef enum {
    IfOperStatusUp = 1,
    IfOperStatusDown = 2,
    IfOperStatusTesting = 3,
    IfOperStatusUnknown = 4,
    IfOperStatusDormant = 5,
    IfOperStatusNotPresent = 6,
    IfOperStatusLowerLayerDown = 7,
} IF_OPER_STATUS;

typedef int NDIS_INTERFACE_INFORMATION;

typedef enum {
    MibParameterNotification = 0,
    MibAddInstance = 1,
    MibDeleteInstance = 2,
    MibInitialNotification = 3,
} MIB_NOTIFICATION_TYPE;

typedef int MIB_IF_ROW2;

typedef int MIB_IF_TABLE2;

typedef enum {
    MibIfEntryNormal = 0,
    MibIfEntryNormalWithoutStatistics = 2,
} MIB_IF_ENTRY_LEVEL;

typedef enum {
    MibIfTableNormal = 0,
    MibIfTableRaw = 1,
    MibIfTableNormalWithoutStatistics = 2,
} MIB_IF_TABLE_LEVEL;

typedef int MIB_IPINTERFACE_ROW;

typedef int MIB_IPINTERFACE_TABLE;

typedef int MIB_IFSTACK_ROW;

typedef int MIB_INVERTEDIFSTACK_ROW;

typedef int MIB_IFSTACK_TABLE;

typedef int MIB_INVERTEDIFSTACK_TABLE;

typedef int PIPINTERFACE_CHANGE_CALLBACK;

typedef int MIB_IP_NETWORK_CONNECTION_BANDWIDTH_ESTIMATES;

typedef int MIB_UNICASTIPADDRESS_ROW;

typedef int MIB_UNICASTIPADDRESS_TABLE;

typedef int PUNICAST_IPADDRESS_CHANGE_CALLBACK;

typedef int PSTABLE_UNICAST_IPADDRESS_TABLE_CALLBACK;

typedef int MIB_ANYCASTIPADDRESS_ROW;

typedef int MIB_ANYCASTIPADDRESS_TABLE;

typedef int MIB_MULTICASTIPADDRESS_ROW;

typedef int MIB_MULTICASTIPADDRESS_TABLE;

typedef int IP_ADDRESS_PREFIX;

typedef int MIB_IPFORWARD_ROW2;

typedef int MIB_IPFORWARD_TABLE2;

typedef int PIPFORWARD_CHANGE_CALLBACK;

typedef int MIB_IPPATH_ROW;

typedef int MIB_IPPATH_TABLE;

typedef int MIB_IPNET_ROW2;

typedef int MIB_IPNET_TABLE2;

typedef int PTEREDO_PORT_CHANGE_CALLBACK;

typedef int DNS_SETTINGS;

typedef int DNS_INTERFACE_SETTINGS;

typedef int DNS_INTERFACE_SETTINGS_EX;

typedef int PNETWORK_CONNECTIVITY_HINT_CHANGE_CALLBACK;

typedef int MIB_OPAQUE_QUERY;

typedef int MIB_IFNUMBER;

typedef int MIB_IFROW;

typedef int MIB_IFTABLE;

typedef int MIB_IPADDRROW_XP;

typedef int MIB_IPADDRROW_W2K;

typedef int MIB_IPADDRTABLE;

typedef int MIB_IPFORWARDNUMBER;

typedef enum {
    MIB_IPROUTE_TYPE_OTHER = 1,
    MIB_IPROUTE_TYPE_INVALID = 2,
    MIB_IPROUTE_TYPE_DIRECT = 3,
    MIB_IPROUTE_TYPE_INDIRECT = 4,
} MIB_IPFORWARD_TYPE;
// TODO: enum 'MIB_IPFORWARD_TYPE' has known issues with its value aliases

typedef int MIB_IPFORWARDROW;

typedef int MIB_IPFORWARDTABLE;

typedef enum {
    MIB_IPNET_TYPE_OTHER = 1,
    MIB_IPNET_TYPE_INVALID = 2,
    MIB_IPNET_TYPE_DYNAMIC = 3,
    MIB_IPNET_TYPE_STATIC = 4,
} MIB_IPNET_TYPE;

typedef int MIB_IPNETROW_LH;

typedef int MIB_IPNETROW_W2K;

typedef int MIB_IPNETTABLE;

typedef enum {
    MIB_IP_FORWARDING = 1,
    MIB_IP_NOT_FORWARDING = 2,
} MIB_IPSTATS_FORWARDING;

typedef int MIB_IPSTATS_LH;

typedef int MIB_IPSTATS_W2K;

typedef int MIBICMPSTATS;

typedef int MIBICMPINFO;

typedef int MIB_ICMP;

typedef int MIBICMPSTATS_EX_XPSP1;

typedef int MIB_ICMP_EX_XPSP1;

typedef enum {
    ICMP6_DST_UNREACH = 1,
    ICMP6_PACKET_TOO_BIG = 2,
    ICMP6_TIME_EXCEEDED = 3,
    ICMP6_PARAM_PROB = 4,
    ICMP6_ECHO_REQUEST = 128,
    ICMP6_ECHO_REPLY = 129,
    ICMP6_MEMBERSHIP_QUERY = 130,
    ICMP6_MEMBERSHIP_REPORT = 131,
    ICMP6_MEMBERSHIP_REDUCTION = 132,
    ND_ROUTER_SOLICIT = 133,
    ND_ROUTER_ADVERT = 134,
    ND_NEIGHBOR_SOLICIT = 135,
    ND_NEIGHBOR_ADVERT = 136,
    ND_REDIRECT = 137,
    ICMP6_V2_MEMBERSHIP_REPORT = 143,
} ICMP6_TYPE;

typedef enum {
    ICMP4_ECHO_REPLY = 0,
    ICMP4_DST_UNREACH = 3,
    ICMP4_SOURCE_QUENCH = 4,
    ICMP4_REDIRECT = 5,
    ICMP4_ECHO_REQUEST = 8,
    ICMP4_ROUTER_ADVERT = 9,
    ICMP4_ROUTER_SOLICIT = 10,
    ICMP4_TIME_EXCEEDED = 11,
    ICMP4_PARAM_PROB = 12,
    ICMP4_TIMESTAMP_REQUEST = 13,
    ICMP4_TIMESTAMP_REPLY = 14,
    ICMP4_MASK_REQUEST = 17,
    ICMP4_MASK_REPLY = 18,
} ICMP4_TYPE;

typedef int MIB_IPMCAST_OIF_XP;

typedef int MIB_IPMCAST_OIF_W2K;

typedef int MIB_IPMCAST_MFE;

typedef int MIB_MFE_TABLE;

typedef int MIB_IPMCAST_OIF_STATS_LH;

typedef int MIB_IPMCAST_OIF_STATS_W2K;

typedef int MIB_IPMCAST_MFE_STATS;

typedef int MIB_MFE_STATS_TABLE;

typedef int MIB_IPMCAST_MFE_STATS_EX_XP;

typedef int MIB_MFE_STATS_TABLE_EX_XP;

typedef int MIB_IPMCAST_GLOBAL;

typedef int MIB_IPMCAST_IF_ENTRY;

typedef int MIB_IPMCAST_IF_TABLE;

typedef enum {
    MIB_TCP_STATE_CLOSED = 1,
    MIB_TCP_STATE_LISTEN = 2,
    MIB_TCP_STATE_SYN_SENT = 3,
    MIB_TCP_STATE_SYN_RCVD = 4,
    MIB_TCP_STATE_ESTAB = 5,
    MIB_TCP_STATE_FIN_WAIT1 = 6,
    MIB_TCP_STATE_FIN_WAIT2 = 7,
    MIB_TCP_STATE_CLOSE_WAIT = 8,
    MIB_TCP_STATE_CLOSING = 9,
    MIB_TCP_STATE_LAST_ACK = 10,
    MIB_TCP_STATE_TIME_WAIT = 11,
    MIB_TCP_STATE_DELETE_TCB = 12,
    MIB_TCP_STATE_RESERVED = 100,
} MIB_TCP_STATE;

typedef enum {
    TcpConnectionOffloadStateInHost = 0,
    TcpConnectionOffloadStateOffloading = 1,
    TcpConnectionOffloadStateOffloaded = 2,
    TcpConnectionOffloadStateUploading = 3,
    TcpConnectionOffloadStateMax = 4,
} TCP_CONNECTION_OFFLOAD_STATE;

typedef int MIB_TCPROW_LH;

typedef int MIB_TCPROW_W2K;

typedef int MIB_TCPTABLE;

typedef int MIB_TCPROW2;

typedef int MIB_TCPTABLE2;

typedef int MIB_TCPROW_OWNER_PID;

typedef int MIB_TCPTABLE_OWNER_PID;

typedef int MIB_TCPROW_OWNER_MODULE;

typedef int MIB_TCPTABLE_OWNER_MODULE;

typedef int MIB_TCP6ROW;

typedef int MIB_TCP6TABLE;

typedef int MIB_TCP6ROW2;

typedef int MIB_TCP6TABLE2;

typedef int MIB_TCP6ROW_OWNER_PID;

typedef int MIB_TCP6TABLE_OWNER_PID;

typedef int MIB_TCP6ROW_OWNER_MODULE;

typedef int MIB_TCP6TABLE_OWNER_MODULE;

typedef enum {
    TcpRtoAlgorithmOther = 1,
    TcpRtoAlgorithmConstant = 2,
    TcpRtoAlgorithmRsre = 3,
    TcpRtoAlgorithmVanj = 4,
    MIB_TCP_RTO_OTHER = 1,
    MIB_TCP_RTO_CONSTANT = 2,
    MIB_TCP_RTO_RSRE = 3,
    MIB_TCP_RTO_VANJ = 4,
} TCP_RTO_ALGORITHM;

typedef int MIB_TCPSTATS_LH;

typedef int MIB_TCPSTATS_W2K;

typedef int MIB_TCPSTATS2;

typedef int MIB_UDPROW;

typedef int MIB_UDPTABLE;

typedef int MIB_UDPROW_OWNER_PID;

typedef int MIB_UDPTABLE_OWNER_PID;

typedef int MIB_UDPROW_OWNER_MODULE;

typedef int MIB_UDPTABLE_OWNER_MODULE;

typedef int MIB_UDP6ROW;

typedef int MIB_UDP6TABLE;

typedef int MIB_UDP6ROW_OWNER_PID;

typedef int MIB_UDP6TABLE_OWNER_PID;

typedef int MIB_UDP6ROW_OWNER_MODULE;

typedef int MIB_UDP6TABLE_OWNER_MODULE;

typedef int MIB_UDPSTATS;

typedef int MIB_UDPSTATS2;

typedef enum {
    TCP_TABLE_BASIC_LISTENER = 0,
    TCP_TABLE_BASIC_CONNECTIONS = 1,
    TCP_TABLE_BASIC_ALL = 2,
    TCP_TABLE_OWNER_PID_LISTENER = 3,
    TCP_TABLE_OWNER_PID_CONNECTIONS = 4,
    TCP_TABLE_OWNER_PID_ALL = 5,
    TCP_TABLE_OWNER_MODULE_LISTENER = 6,
    TCP_TABLE_OWNER_MODULE_CONNECTIONS = 7,
    TCP_TABLE_OWNER_MODULE_ALL = 8,
} TCP_TABLE_CLASS;

typedef enum {
    UDP_TABLE_BASIC = 0,
    UDP_TABLE_OWNER_PID = 1,
    UDP_TABLE_OWNER_MODULE = 2,
} UDP_TABLE_CLASS;

typedef enum {
    TCPIP_OWNER_MODULE_INFO_BASIC = 0,
} TCPIP_OWNER_MODULE_INFO_CLASS;

typedef int TCPIP_OWNER_MODULE_BASIC_INFO;

typedef int MIB_IPMCAST_BOUNDARY;

typedef int MIB_IPMCAST_BOUNDARY_TABLE;

typedef int MIB_BOUNDARYROW;

typedef int MIB_MCAST_LIMIT_ROW;

typedef int MIB_IPMCAST_SCOPE;

typedef int MIB_IPDESTROW;

typedef int MIB_IPDESTTABLE;

typedef int MIB_BEST_IF;

typedef int MIB_PROXYARP;

typedef int MIB_IFSTATUS;

typedef int MIB_ROUTESTATE;

typedef int MIB_OPAQUE_INFO;

typedef int IP_ADDRESS_STRING;

typedef int IP_ADDR_STRING;

typedef int IP_ADAPTER_INFO;

typedef int IP_ADAPTER_UNICAST_ADDRESS_LH;

typedef int IP_ADAPTER_UNICAST_ADDRESS_XP;

typedef int IP_ADAPTER_ANYCAST_ADDRESS_XP;

typedef int IP_ADAPTER_MULTICAST_ADDRESS_XP;

typedef int IP_ADAPTER_DNS_SERVER_ADDRESS_XP;

typedef int IP_ADAPTER_WINS_SERVER_ADDRESS_LH;

typedef int IP_ADAPTER_GATEWAY_ADDRESS_LH;

typedef int IP_ADAPTER_PREFIX_XP;

typedef int IP_ADAPTER_DNS_SUFFIX;

typedef int IP_ADAPTER_ADDRESSES_LH;

typedef int IP_ADAPTER_ADDRESSES_XP;

typedef int IP_PER_ADAPTER_INFO_W2KSP1;

typedef int FIXED_INFO_W2KSP1;

typedef int ip_interface_name_info_w2ksp1;

typedef enum {
    TcpConnectionEstatsSynOpts = 0,
    TcpConnectionEstatsData = 1,
    TcpConnectionEstatsSndCong = 2,
    TcpConnectionEstatsPath = 3,
    TcpConnectionEstatsSendBuff = 4,
    TcpConnectionEstatsRec = 5,
    TcpConnectionEstatsObsRec = 6,
    TcpConnectionEstatsBandwidth = 7,
    TcpConnectionEstatsFineRtt = 8,
    TcpConnectionEstatsMaximum = 9,
} TCP_ESTATS_TYPE;

typedef enum {
    TcpBoolOptDisabled = 0,
    TcpBoolOptEnabled = 1,
    TcpBoolOptUnchanged = -1,
} TCP_BOOLEAN_OPTIONAL;

typedef int TCP_ESTATS_SYN_OPTS_ROS_v0;

typedef enum {
    TcpErrorNone = 0,
    TcpErrorBelowDataWindow = 1,
    TcpErrorAboveDataWindow = 2,
    TcpErrorBelowAckWindow = 3,
    TcpErrorAboveAckWindow = 4,
    TcpErrorBelowTsWindow = 5,
    TcpErrorAboveTsWindow = 6,
    TcpErrorDataChecksumError = 7,
    TcpErrorDataLengthError = 8,
    TcpErrorMaxSoftError = 9,
} TCP_SOFT_ERROR;

typedef int TCP_ESTATS_DATA_ROD_v0;

typedef int TCP_ESTATS_DATA_RW_v0;

typedef int TCP_ESTATS_SND_CONG_ROD_v0;

typedef int TCP_ESTATS_SND_CONG_ROS_v0;

typedef int TCP_ESTATS_SND_CONG_RW_v0;

typedef int TCP_ESTATS_PATH_ROD_v0;

typedef int TCP_ESTATS_PATH_RW_v0;

typedef int TCP_ESTATS_SEND_BUFF_ROD_v0;

typedef int TCP_ESTATS_SEND_BUFF_RW_v0;

typedef int TCP_ESTATS_REC_ROD_v0;

typedef int TCP_ESTATS_REC_RW_v0;

typedef int TCP_ESTATS_OBS_REC_ROD_v0;

typedef int TCP_ESTATS_OBS_REC_RW_v0;

typedef int TCP_ESTATS_BANDWIDTH_RW_v0;

typedef int TCP_ESTATS_BANDWIDTH_ROD_v0;

typedef int TCP_ESTATS_FINE_RTT_RW_v0;

typedef int TCP_ESTATS_FINE_RTT_ROD_v0;

typedef int INTERFACE_TIMESTAMP_CAPABILITY_FLAGS;

typedef int INTERFACE_TIMESTAMP_CAPABILITIES;

typedef int INTERFACE_HARDWARE_CROSSTIMESTAMP;

typedef int PINTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK;

typedef enum {
    NET_ADDRESS_FORMAT_UNSPECIFIED = 0,
    NET_ADDRESS_DNS_NAME = 1,
    NET_ADDRESS_IPV4 = 2,
    NET_ADDRESS_IPV6 = 3,
} NET_ADDRESS_FORMAT;

typedef enum {
    GF_FRAGMENTS = 2,
    GF_STRONGHOST = 8,
    GF_FRAGCACHE = 9,
} GLOBAL_FILTER;

typedef enum {
    PF_ACTION_FORWARD = 0,
    PF_ACTION_DROP = 1,
} PFFORWARD_ACTION;

typedef enum {
    PF_IPV4 = 0,
    PF_IPV6 = 1,
} PFADDRESSTYPE;

typedef int PF_FILTER_DESCRIPTOR;

typedef int PF_FILTER_STATS;

typedef int PF_INTERFACE_STATS;

typedef int PF_LATEBIND_INFO;

typedef enum {
    PFFT_FILTER = 1,
    PFFT_FRAG = 2,
    PFFT_SPOOF = 3,
} PFFRAMETYPE;

typedef int PFLOGFRAME;


//--------------------------------------------------------------------------------
// Section: Functions (196)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void GetIfEntry2();

// TODO: this type is limited to platform 'windows10.0.15063'
/*NTSTATUS*/void GetIfEntry2Ex();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void GetIfTable2();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void GetIfTable2Ex();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void GetIfStackTable();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void GetInvertedIfStackTable();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void GetIpInterfaceEntry();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void GetIpInterfaceTable();

// TODO: this type is limited to platform 'windows6.0.6000'
/*void*/void InitializeIpInterfaceEntry();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void NotifyIpInterfaceChange();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void SetIpInterfaceEntry();

// TODO: this type is limited to platform 'windows8.0'
/*NTSTATUS*/void GetIpNetworkConnectionBandwidthEstimates();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void CreateUnicastIpAddressEntry();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void DeleteUnicastIpAddressEntry();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void GetUnicastIpAddressEntry();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void GetUnicastIpAddressTable();

// TODO: this type is limited to platform 'windows6.0.6000'
/*void*/void InitializeUnicastIpAddressEntry();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void NotifyUnicastIpAddressChange();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void NotifyStableUnicastIpAddressTable();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void SetUnicastIpAddressEntry();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void CreateAnycastIpAddressEntry();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void DeleteAnycastIpAddressEntry();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void GetAnycastIpAddressEntry();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void GetAnycastIpAddressTable();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void GetMulticastIpAddressEntry();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void GetMulticastIpAddressTable();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void CreateIpForwardEntry2();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void DeleteIpForwardEntry2();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void GetBestRoute2();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void GetIpForwardEntry2();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void GetIpForwardTable2();

// TODO: this type is limited to platform 'windows6.0.6000'
/*void*/void InitializeIpForwardEntry();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void NotifyRouteChange2();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void SetIpForwardEntry2();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void FlushIpPathTable();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void GetIpPathEntry();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void GetIpPathTable();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void CreateIpNetEntry2();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void DeleteIpNetEntry2();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void FlushIpNetTable2();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void GetIpNetEntry2();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void GetIpNetTable2();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void ResolveIpNetEntry2();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void SetIpNetEntry2();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void NotifyTeredoPortChange();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void GetTeredoPort();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void CancelMibChangeNotify2();

// TODO: this type is limited to platform 'windows6.0.6000'
/*void*/void FreeMibTable();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void CreateSortedAddressPairs();

/*NTSTATUS*/void ConvertCompartmentGuidToId();

/*NTSTATUS*/void ConvertCompartmentIdToGuid();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void ConvertInterfaceNameToLuidA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void ConvertInterfaceNameToLuidW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void ConvertInterfaceLuidToNameA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void ConvertInterfaceLuidToNameW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void ConvertInterfaceLuidToIndex();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void ConvertInterfaceIndexToLuid();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void ConvertInterfaceLuidToAlias();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void ConvertInterfaceAliasToLuid();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void ConvertInterfaceLuidToGuid();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void ConvertInterfaceGuidToLuid();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void if_nametoindex();

// TODO: this type is limited to platform 'windows6.0.6000'
/*PSTR*/void if_indextoname();

/*u32*/void GetCurrentThreadCompartmentId();

/*NTSTATUS*/void SetCurrentThreadCompartmentId();

/*void*/void GetCurrentThreadCompartmentScope();

/*NTSTATUS*/void SetCurrentThreadCompartmentScope();

/*u32*/void GetJobCompartmentId();

/*NTSTATUS*/void SetJobCompartmentId();

/*u32*/void GetSessionCompartmentId();

/*NTSTATUS*/void SetSessionCompartmentId();

// TODO: this type is limited to platform 'windows10.0.10240'
/*u32*/void GetDefaultCompartmentId();

/*NTSTATUS*/void GetNetworkInformation();

/*NTSTATUS*/void SetNetworkInformation();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void ConvertLengthToIpv4Mask();

// TODO: this type is limited to platform 'windows6.0.6000'
/*NTSTATUS*/void ConvertIpv4MaskToLength();

/*NTSTATUS*/void GetDnsSettings();

/*void*/void FreeDnsSettings();

/*NTSTATUS*/void SetDnsSettings();

/*NTSTATUS*/void GetInterfaceDnsSettings();

/*void*/void FreeInterfaceDnsSettings();

/*NTSTATUS*/void SetInterfaceDnsSettings();

// TODO: this type is limited to platform 'windows10.0.19041'
/*NTSTATUS*/void GetNetworkConnectivityHint();

// TODO: this type is limited to platform 'windows10.0.19041'
/*NTSTATUS*/void GetNetworkConnectivityHintForInterface();

// TODO: this type is limited to platform 'windows10.0.19041'
/*NTSTATUS*/void NotifyNetworkConnectivityHintChange();

// TODO: this type is limited to platform 'windows5.0'
/*IcmpHandle*/void IcmpCreateFile();

// TODO: this type is limited to platform 'windows5.1.2600'
/*IcmpHandle*/void Icmp6CreateFile();

// TODO: this type is limited to platform 'windows5.0'
/*BOOL*/void IcmpCloseHandle();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void IcmpSendEcho();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void IcmpSendEcho2();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void IcmpSendEcho2Ex();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void Icmp6SendEcho2();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void IcmpParseReplies();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void Icmp6ParseReplies();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void GetNumberOfInterfaces();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void GetIfEntry();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void GetIfTable();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void GetIpAddrTable();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void GetIpNetTable();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void GetIpForwardTable();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void GetTcpTable();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetExtendedTcpTable();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetOwnerModuleFromTcpEntry();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void GetUdpTable();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetExtendedUdpTable();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetOwnerModuleFromUdpEntry();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetTcpTable2();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetTcp6Table();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetTcp6Table2();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetPerTcpConnectionEStats();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void SetPerTcpConnectionEStats();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetPerTcp6ConnectionEStats();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void SetPerTcp6ConnectionEStats();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetOwnerModuleFromTcp6Entry();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetUdp6Table();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void GetOwnerModuleFromUdp6Entry();

/*u32*/void GetOwnerModuleFromPidAndInfo();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void GetIpStatistics();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void GetIcmpStatistics();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void GetTcpStatistics();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void GetUdpStatistics();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void SetIpStatisticsEx();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetIpStatisticsEx();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetIcmpStatisticsEx();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetTcpStatisticsEx();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetUdpStatisticsEx();

// TODO: this type is limited to platform 'windows10.0.16299'
/*u32*/void GetTcpStatisticsEx2();

// TODO: this type is limited to platform 'windows10.0.16299'
/*u32*/void GetUdpStatisticsEx2();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void SetIfEntry();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void CreateIpForwardEntry();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void SetIpForwardEntry();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void DeleteIpForwardEntry();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void SetIpStatistics();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void SetIpTTL();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void CreateIpNetEntry();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void SetIpNetEntry();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void DeleteIpNetEntry();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void FlushIpNetTable();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void CreateProxyArpEntry();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void DeleteProxyArpEntry();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void SetTcpEntry();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void GetInterfaceInfo();

/*u32*/void GetUniDirectionalAdapterInfo();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void NhpAllocateAndGetInterfaceInfoFromStack();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void GetBestInterface();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetBestInterfaceEx();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void GetBestRoute();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void NotifyAddrChange();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void NotifyRouteChange();

// TODO: this type is limited to platform 'windows5.1.2600'
/*BOOL*/void CancelIPChangeNotify();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void GetAdapterIndex();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void AddIPAddress();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void DeleteIPAddress();

// TODO: this type is limited to platform 'windows5.0'
/*WIN32_ERROR*/void GetNetworkParams();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void GetAdaptersInfo();

// TODO: this type is limited to platform 'windows5.1.2600'
/*?*IP_ADAPTER_ORDER_MAP*/void GetAdapterOrderMap();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetAdaptersAddresses();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void GetPerAdapterInfo();

/*u32*/void GetInterfaceCurrentTimestampCapabilities();

/*u32*/void GetInterfaceHardwareTimestampCapabilities();

/*u32*/void CaptureInterfaceHardwareCrossTimestamp();

/*u32*/void NotifyIfTimestampConfigChange();

/*void*/void CancelIfTimestampConfigChange();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void IpReleaseAddress();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void IpRenewAddress();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void SendARP();

// TODO: this type is limited to platform 'windows5.0'
/*BOOL*/void GetRTTAndHopCount();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void GetFriendlyIfIndex();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void EnableRouter();

// TODO: this type is limited to platform 'windows5.0'
/*u32*/void UnenableRouter();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void DisableMediaSense();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void RestoreMediaSense();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void GetIpErrorString();

// TODO: this type is limited to platform 'windows5.1.2600'
/*u32*/void ResolveNeighbor();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void CreatePersistentTcpPortReservation();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void CreatePersistentUdpPortReservation();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void DeletePersistentTcpPortReservation();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void DeletePersistentUdpPortReservation();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void LookupPersistentTcpPortReservation();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void LookupPersistentUdpPortReservation();

/*u32*/void PfCreateInterface();

/*u32*/void PfDeleteInterface();

/*u32*/void PfAddFiltersToInterface();

/*u32*/void PfRemoveFiltersFromInterface();

/*u32*/void PfRemoveFilterHandles();

/*u32*/void PfUnBindInterface();

/*u32*/void PfBindInterfaceToIndex();

/*u32*/void PfBindInterfaceToIPAddress();

/*u32*/void PfRebindFilters();

/*u32*/void PfAddGlobalFilterToInterface();

/*u32*/void PfRemoveGlobalFilterFromInterface();

/*u32*/void PfMakeLog();

/*u32*/void PfSetLogBuffer();

/*u32*/void PfDeleteLog();

/*u32*/void PfGetInterfaceStatistics();

/*u32*/void PfTestPacket();

