// NOTE: this file is autogenerated, DO NOT MODIFY
#include "../bootstrap.h"
//--------------------------------------------------------------------------------
// Section: Constants (2)
//--------------------------------------------------------------------------------
#define WHV_PROCESSOR_FEATURES_BANKS_COUNT (UINT)2
#define WHV_HYPERCALL_CONTEXT_MAX_XMM_REGISTERS (UINT)6

//--------------------------------------------------------------------------------
// Section: Types (84)
//--------------------------------------------------------------------------------
typedef int WHV_PARTITION_HANDLE;

typedef enum {
    WHvCapabilityCodeHypervisorPresent = 0,
    WHvCapabilityCodeFeatures = 1,
    WHvCapabilityCodeExtendedVmExits = 2,
    WHvCapabilityCodeExceptionExitBitmap = 3,
    WHvCapabilityCodeX64MsrExitBitmap = 4,
    WHvCapabilityCodeProcessorVendor = 4096,
    WHvCapabilityCodeProcessorFeatures = 4097,
    WHvCapabilityCodeProcessorClFlushSize = 4098,
    WHvCapabilityCodeProcessorXsaveFeatures = 4099,
    WHvCapabilityCodeProcessorClockFrequency = 4100,
    WHvCapabilityCodeInterruptClockFrequency = 4101,
    WHvCapabilityCodeProcessorFeaturesBanks = 4102,
} WHV_CAPABILITY_CODE;

typedef int WHV_CAPABILITY_FEATURES;

typedef int WHV_EXTENDED_VM_EXITS;

typedef enum {
    WHvProcessorVendorAmd = 0,
    WHvProcessorVendorIntel = 1,
    WHvProcessorVendorHygon = 2,
} WHV_PROCESSOR_VENDOR;

typedef int WHV_PROCESSOR_FEATURES;

typedef int WHV_PROCESSOR_FEATURES1;

typedef int WHV_PROCESSOR_FEATURES_BANKS;

typedef int WHV_PROCESSOR_XSAVE_FEATURES;

typedef int WHV_X64_MSR_EXIT_BITMAP;

typedef int WHV_CAPABILITY;

typedef enum {
    WHvPartitionPropertyCodeExtendedVmExits = 1,
    WHvPartitionPropertyCodeExceptionExitBitmap = 2,
    WHvPartitionPropertyCodeSeparateSecurityDomain = 3,
    WHvPartitionPropertyCodeNestedVirtualization = 4,
    WHvPartitionPropertyCodeX64MsrExitBitmap = 5,
    WHvPartitionPropertyCodeProcessorFeatures = 4097,
    WHvPartitionPropertyCodeProcessorClFlushSize = 4098,
    WHvPartitionPropertyCodeCpuidExitList = 4099,
    WHvPartitionPropertyCodeCpuidResultList = 4100,
    WHvPartitionPropertyCodeLocalApicEmulationMode = 4101,
    WHvPartitionPropertyCodeProcessorXsaveFeatures = 4102,
    WHvPartitionPropertyCodeProcessorClockFrequency = 4103,
    WHvPartitionPropertyCodeInterruptClockFrequency = 4104,
    WHvPartitionPropertyCodeApicRemoteReadSupport = 4105,
    WHvPartitionPropertyCodeProcessorFeaturesBanks = 4106,
    WHvPartitionPropertyCodeReferenceTime = 4107,
    WHvPartitionPropertyCodeProcessorCount = 8191,
} WHV_PARTITION_PROPERTY_CODE;

typedef int WHV_X64_CPUID_RESULT;

typedef enum {
    WHvX64ExceptionTypeDivideErrorFault = 0,
    WHvX64ExceptionTypeDebugTrapOrFault = 1,
    WHvX64ExceptionTypeBreakpointTrap = 3,
    WHvX64ExceptionTypeOverflowTrap = 4,
    WHvX64ExceptionTypeBoundRangeFault = 5,
    WHvX64ExceptionTypeInvalidOpcodeFault = 6,
    WHvX64ExceptionTypeDeviceNotAvailableFault = 7,
    WHvX64ExceptionTypeDoubleFaultAbort = 8,
    WHvX64ExceptionTypeInvalidTaskStateSegmentFault = 10,
    WHvX64ExceptionTypeSegmentNotPresentFault = 11,
    WHvX64ExceptionTypeStackFault = 12,
    WHvX64ExceptionTypeGeneralProtectionFault = 13,
    WHvX64ExceptionTypePageFault = 14,
    WHvX64ExceptionTypeFloatingPointErrorFault = 16,
    WHvX64ExceptionTypeAlignmentCheckFault = 17,
    WHvX64ExceptionTypeMachineCheckAbort = 18,
    WHvX64ExceptionTypeSimdFloatingPointFault = 19,
} WHV_EXCEPTION_TYPE;

typedef enum {
    WHvX64LocalApicEmulationModeNone = 0,
    WHvX64LocalApicEmulationModeXApic = 1,
    WHvX64LocalApicEmulationModeX2Apic = 2,
} WHV_X64_LOCAL_APIC_EMULATION_MODE;

typedef int WHV_PARTITION_PROPERTY;

typedef enum {
    WHvMapGpaRangeFlagNone = 0,
    WHvMapGpaRangeFlagRead = 1,
    WHvMapGpaRangeFlagWrite = 2,
    WHvMapGpaRangeFlagExecute = 4,
    WHvMapGpaRangeFlagTrackDirtyPages = 8,
} WHV_MAP_GPA_RANGE_FLAGS;

typedef enum {
    WHvTranslateGvaFlagNone = 0,
    WHvTranslateGvaFlagValidateRead = 1,
    WHvTranslateGvaFlagValidateWrite = 2,
    WHvTranslateGvaFlagValidateExecute = 4,
    WHvTranslateGvaFlagPrivilegeExempt = 8,
    WHvTranslateGvaFlagSetPageTableBits = 16,
} WHV_TRANSLATE_GVA_FLAGS;

typedef enum {
    WHvTranslateGvaResultSuccess = 0,
    WHvTranslateGvaResultPageNotPresent = 1,
    WHvTranslateGvaResultPrivilegeViolation = 2,
    WHvTranslateGvaResultInvalidPageTableFlags = 3,
    WHvTranslateGvaResultGpaUnmapped = 4,
    WHvTranslateGvaResultGpaNoReadAccess = 5,
    WHvTranslateGvaResultGpaNoWriteAccess = 6,
    WHvTranslateGvaResultGpaIllegalOverlayAccess = 7,
    WHvTranslateGvaResultIntercept = 8,
} WHV_TRANSLATE_GVA_RESULT_CODE;

typedef int WHV_TRANSLATE_GVA_RESULT;

typedef enum {
    WHvX64RegisterRax = 0,
    WHvX64RegisterRcx = 1,
    WHvX64RegisterRdx = 2,
    WHvX64RegisterRbx = 3,
    WHvX64RegisterRsp = 4,
    WHvX64RegisterRbp = 5,
    WHvX64RegisterRsi = 6,
    WHvX64RegisterRdi = 7,
    WHvX64RegisterR8 = 8,
    WHvX64RegisterR9 = 9,
    WHvX64RegisterR10 = 10,
    WHvX64RegisterR11 = 11,
    WHvX64RegisterR12 = 12,
    WHvX64RegisterR13 = 13,
    WHvX64RegisterR14 = 14,
    WHvX64RegisterR15 = 15,
    WHvX64RegisterRip = 16,
    WHvX64RegisterRflags = 17,
    WHvX64RegisterEs = 18,
    WHvX64RegisterCs = 19,
    WHvX64RegisterSs = 20,
    WHvX64RegisterDs = 21,
    WHvX64RegisterFs = 22,
    WHvX64RegisterGs = 23,
    WHvX64RegisterLdtr = 24,
    WHvX64RegisterTr = 25,
    WHvX64RegisterIdtr = 26,
    WHvX64RegisterGdtr = 27,
    WHvX64RegisterCr0 = 28,
    WHvX64RegisterCr2 = 29,
    WHvX64RegisterCr3 = 30,
    WHvX64RegisterCr4 = 31,
    WHvX64RegisterCr8 = 32,
    WHvX64RegisterDr0 = 33,
    WHvX64RegisterDr1 = 34,
    WHvX64RegisterDr2 = 35,
    WHvX64RegisterDr3 = 36,
    WHvX64RegisterDr6 = 37,
    WHvX64RegisterDr7 = 38,
    WHvX64RegisterXCr0 = 39,
    WHvX64RegisterXmm0 = 4096,
    WHvX64RegisterXmm1 = 4097,
    WHvX64RegisterXmm2 = 4098,
    WHvX64RegisterXmm3 = 4099,
    WHvX64RegisterXmm4 = 4100,
    WHvX64RegisterXmm5 = 4101,
    WHvX64RegisterXmm6 = 4102,
    WHvX64RegisterXmm7 = 4103,
    WHvX64RegisterXmm8 = 4104,
    WHvX64RegisterXmm9 = 4105,
    WHvX64RegisterXmm10 = 4106,
    WHvX64RegisterXmm11 = 4107,
    WHvX64RegisterXmm12 = 4108,
    WHvX64RegisterXmm13 = 4109,
    WHvX64RegisterXmm14 = 4110,
    WHvX64RegisterXmm15 = 4111,
    WHvX64RegisterFpMmx0 = 4112,
    WHvX64RegisterFpMmx1 = 4113,
    WHvX64RegisterFpMmx2 = 4114,
    WHvX64RegisterFpMmx3 = 4115,
    WHvX64RegisterFpMmx4 = 4116,
    WHvX64RegisterFpMmx5 = 4117,
    WHvX64RegisterFpMmx6 = 4118,
    WHvX64RegisterFpMmx7 = 4119,
    WHvX64RegisterFpControlStatus = 4120,
    WHvX64RegisterXmmControlStatus = 4121,
    WHvX64RegisterTsc = 8192,
    WHvX64RegisterEfer = 8193,
    WHvX64RegisterKernelGsBase = 8194,
    WHvX64RegisterApicBase = 8195,
    WHvX64RegisterPat = 8196,
    WHvX64RegisterSysenterCs = 8197,
    WHvX64RegisterSysenterEip = 8198,
    WHvX64RegisterSysenterEsp = 8199,
    WHvX64RegisterStar = 8200,
    WHvX64RegisterLstar = 8201,
    WHvX64RegisterCstar = 8202,
    WHvX64RegisterSfmask = 8203,
    WHvX64RegisterInitialApicId = 8204,
    WHvX64RegisterMsrMtrrCap = 8205,
    WHvX64RegisterMsrMtrrDefType = 8206,
    WHvX64RegisterMsrMtrrPhysBase0 = 8208,
    WHvX64RegisterMsrMtrrPhysBase1 = 8209,
    WHvX64RegisterMsrMtrrPhysBase2 = 8210,
    WHvX64RegisterMsrMtrrPhysBase3 = 8211,
    WHvX64RegisterMsrMtrrPhysBase4 = 8212,
    WHvX64RegisterMsrMtrrPhysBase5 = 8213,
    WHvX64RegisterMsrMtrrPhysBase6 = 8214,
    WHvX64RegisterMsrMtrrPhysBase7 = 8215,
    WHvX64RegisterMsrMtrrPhysBase8 = 8216,
    WHvX64RegisterMsrMtrrPhysBase9 = 8217,
    WHvX64RegisterMsrMtrrPhysBaseA = 8218,
    WHvX64RegisterMsrMtrrPhysBaseB = 8219,
    WHvX64RegisterMsrMtrrPhysBaseC = 8220,
    WHvX64RegisterMsrMtrrPhysBaseD = 8221,
    WHvX64RegisterMsrMtrrPhysBaseE = 8222,
    WHvX64RegisterMsrMtrrPhysBaseF = 8223,
    WHvX64RegisterMsrMtrrPhysMask0 = 8256,
    WHvX64RegisterMsrMtrrPhysMask1 = 8257,
    WHvX64RegisterMsrMtrrPhysMask2 = 8258,
    WHvX64RegisterMsrMtrrPhysMask3 = 8259,
    WHvX64RegisterMsrMtrrPhysMask4 = 8260,
    WHvX64RegisterMsrMtrrPhysMask5 = 8261,
    WHvX64RegisterMsrMtrrPhysMask6 = 8262,
    WHvX64RegisterMsrMtrrPhysMask7 = 8263,
    WHvX64RegisterMsrMtrrPhysMask8 = 8264,
    WHvX64RegisterMsrMtrrPhysMask9 = 8265,
    WHvX64RegisterMsrMtrrPhysMaskA = 8266,
    WHvX64RegisterMsrMtrrPhysMaskB = 8267,
    WHvX64RegisterMsrMtrrPhysMaskC = 8268,
    WHvX64RegisterMsrMtrrPhysMaskD = 8269,
    WHvX64RegisterMsrMtrrPhysMaskE = 8270,
    WHvX64RegisterMsrMtrrPhysMaskF = 8271,
    WHvX64RegisterMsrMtrrFix64k00000 = 8304,
    WHvX64RegisterMsrMtrrFix16k80000 = 8305,
    WHvX64RegisterMsrMtrrFix16kA0000 = 8306,
    WHvX64RegisterMsrMtrrFix4kC0000 = 8307,
    WHvX64RegisterMsrMtrrFix4kC8000 = 8308,
    WHvX64RegisterMsrMtrrFix4kD0000 = 8309,
    WHvX64RegisterMsrMtrrFix4kD8000 = 8310,
    WHvX64RegisterMsrMtrrFix4kE0000 = 8311,
    WHvX64RegisterMsrMtrrFix4kE8000 = 8312,
    WHvX64RegisterMsrMtrrFix4kF0000 = 8313,
    WHvX64RegisterMsrMtrrFix4kF8000 = 8314,
    WHvX64RegisterTscAux = 8315,
    WHvX64RegisterSpecCtrl = 8324,
    WHvX64RegisterPredCmd = 8325,
    WHvX64RegisterTscVirtualOffset = 8327,
    WHvX64RegisterApicId = 12290,
    WHvX64RegisterApicVersion = 12291,
    WHvRegisterPendingInterruption = -2147483648,
    WHvRegisterInterruptState = -2147483647,
    WHvRegisterPendingEvent = -2147483646,
    WHvX64RegisterDeliverabilityNotifications = -2147483644,
    WHvRegisterInternalActivityState = -2147483643,
    WHvX64RegisterPendingDebugException = -2147483642,
} WHV_REGISTER_NAME;

typedef int WHV_UINT128;

typedef int WHV_X64_FP_REGISTER;

typedef int WHV_X64_FP_CONTROL_STATUS_REGISTER;

typedef int WHV_X64_XMM_CONTROL_STATUS_REGISTER;

typedef int WHV_X64_SEGMENT_REGISTER;

typedef int WHV_X64_TABLE_REGISTER;

typedef int WHV_X64_INTERRUPT_STATE_REGISTER;

typedef int WHV_X64_PENDING_INTERRUPTION_REGISTER;

typedef int WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER;

typedef enum {
    WHvX64PendingEventException = 0,
    WHvX64PendingEventExtInt = 5,
} WHV_X64_PENDING_EVENT_TYPE;

typedef int WHV_X64_PENDING_EXCEPTION_EVENT;

typedef int WHV_X64_PENDING_EXT_INT_EVENT;

typedef int WHV_INTERNAL_ACTIVITY_REGISTER;

typedef int WHV_X64_PENDING_DEBUG_EXCEPTION;

typedef int WHV_REGISTER_VALUE;

typedef enum {
    WHvRunVpExitReasonNone = 0,
    WHvRunVpExitReasonMemoryAccess = 1,
    WHvRunVpExitReasonX64IoPortAccess = 2,
    WHvRunVpExitReasonUnrecoverableException = 4,
    WHvRunVpExitReasonInvalidVpRegisterValue = 5,
    WHvRunVpExitReasonUnsupportedFeature = 6,
    WHvRunVpExitReasonX64InterruptWindow = 7,
    WHvRunVpExitReasonX64Halt = 8,
    WHvRunVpExitReasonX64ApicEoi = 9,
    WHvRunVpExitReasonX64MsrAccess = 4096,
    WHvRunVpExitReasonX64Cpuid = 4097,
    WHvRunVpExitReasonException = 4098,
    WHvRunVpExitReasonX64Rdtsc = 4099,
    WHvRunVpExitReasonX64ApicSmiTrap = 4100,
    WHvRunVpExitReasonHypercall = 4101,
    WHvRunVpExitReasonX64ApicInitSipiTrap = 4102,
    WHvRunVpExitReasonCanceled = 8193,
} WHV_RUN_VP_EXIT_REASON;

typedef int WHV_X64_VP_EXECUTION_STATE;

typedef int WHV_VP_EXIT_CONTEXT;

typedef enum {
    WHvMemoryAccessRead = 0,
    WHvMemoryAccessWrite = 1,
    WHvMemoryAccessExecute = 2,
} WHV_MEMORY_ACCESS_TYPE;

typedef int WHV_MEMORY_ACCESS_INFO;

typedef int WHV_MEMORY_ACCESS_CONTEXT;

typedef int WHV_X64_IO_PORT_ACCESS_INFO;

typedef int WHV_X64_IO_PORT_ACCESS_CONTEXT;

typedef int WHV_X64_MSR_ACCESS_INFO;

typedef int WHV_X64_MSR_ACCESS_CONTEXT;

typedef int WHV_X64_CPUID_ACCESS_CONTEXT;

typedef int WHV_VP_EXCEPTION_INFO;

typedef int WHV_VP_EXCEPTION_CONTEXT;

typedef enum {
    WHvUnsupportedFeatureIntercept = 1,
    WHvUnsupportedFeatureTaskSwitchTss = 2,
} WHV_X64_UNSUPPORTED_FEATURE_CODE;

typedef int WHV_X64_UNSUPPORTED_FEATURE_CONTEXT;

typedef enum {
    WHvRunVpCancelReasonUser = 0,
} WHV_RUN_VP_CANCEL_REASON;

typedef int WHV_RUN_VP_CANCELED_CONTEXT;

typedef enum {
    WHvX64PendingInterrupt = 0,
    WHvX64PendingNmi = 2,
    WHvX64PendingException = 3,
} WHV_X64_PENDING_INTERRUPTION_TYPE;

typedef int WHV_X64_INTERRUPTION_DELIVERABLE_CONTEXT;

typedef int WHV_X64_APIC_EOI_CONTEXT;

typedef int WHV_X64_RDTSC_INFO;

typedef int WHV_X64_RDTSC_CONTEXT;

typedef int WHV_X64_APIC_SMI_CONTEXT;

typedef int WHV_HYPERCALL_CONTEXT;

typedef int WHV_X64_APIC_INIT_SIPI_CONTEXT;

typedef int WHV_RUN_VP_EXIT_CONTEXT;

typedef enum {
    WHvX64InterruptTypeFixed = 0,
    WHvX64InterruptTypeLowestPriority = 1,
    WHvX64InterruptTypeNmi = 4,
    WHvX64InterruptTypeInit = 5,
    WHvX64InterruptTypeSipi = 6,
    WHvX64InterruptTypeLocalInt1 = 9,
} WHV_INTERRUPT_TYPE;

typedef enum {
    WHvX64InterruptDestinationModePhysical = 0,
    WHvX64InterruptDestinationModeLogical = 1,
} WHV_INTERRUPT_DESTINATION_MODE;

typedef enum {
    WHvX64InterruptTriggerModeEdge = 0,
    WHvX64InterruptTriggerModeLevel = 1,
} WHV_INTERRUPT_TRIGGER_MODE;

typedef int WHV_INTERRUPT_CONTROL;

typedef int WHV_DOORBELL_MATCH_DATA;

typedef enum {
    WHvPartitionCounterSetMemory = 0,
} WHV_PARTITION_COUNTER_SET;

typedef int WHV_PARTITION_MEMORY_COUNTERS;

typedef enum {
    WHvProcessorCounterSetRuntime = 0,
    WHvProcessorCounterSetIntercepts = 1,
    WHvProcessorCounterSetEvents = 2,
    WHvProcessorCounterSetApic = 3,
} WHV_PROCESSOR_COUNTER_SET;

typedef int WHV_PROCESSOR_RUNTIME_COUNTERS;

typedef int WHV_PROCESSOR_INTERCEPT_COUNTER;

typedef int WHV_PROCESSOR_INTERCEPT_COUNTERS;

typedef int WHV_PROCESSOR_EVENT_COUNTERS;

typedef int WHV_PROCESSOR_APIC_COUNTERS;

typedef int WHV_EMULATOR_STATUS;

typedef int WHV_EMULATOR_MEMORY_ACCESS_INFO;

typedef int WHV_EMULATOR_IO_ACCESS_INFO;

typedef int WHV_EMULATOR_IO_PORT_CALLBACK;

typedef int WHV_EMULATOR_MEMORY_CALLBACK;

typedef int WHV_EMULATOR_GET_VIRTUAL_PROCESSOR_REGISTERS_CALLBACK;

typedef int WHV_EMULATOR_SET_VIRTUAL_PROCESSOR_REGISTERS_CALLBACK;

typedef int WHV_EMULATOR_TRANSLATE_GVA_PAGE_CALLBACK;

typedef int WHV_EMULATOR_CALLBACKS;


//--------------------------------------------------------------------------------
// Section: Functions (33)
//--------------------------------------------------------------------------------
/*HRESULT*/void WHvGetCapability();

/*HRESULT*/void WHvCreatePartition();

/*HRESULT*/void WHvSetupPartition();

/*HRESULT*/void WHvDeletePartition();

/*HRESULT*/void WHvGetPartitionProperty();

/*HRESULT*/void WHvSetPartitionProperty();

/*HRESULT*/void WHvSuspendPartitionTime();

/*HRESULT*/void WHvResumePartitionTime();

/*HRESULT*/void WHvMapGpaRange();

/*HRESULT*/void WHvUnmapGpaRange();

/*HRESULT*/void WHvTranslateGva();

/*HRESULT*/void WHvCreateVirtualProcessor();

/*HRESULT*/void WHvDeleteVirtualProcessor();

/*HRESULT*/void WHvRunVirtualProcessor();

/*HRESULT*/void WHvCancelRunVirtualProcessor();

/*HRESULT*/void WHvGetVirtualProcessorRegisters();

/*HRESULT*/void WHvSetVirtualProcessorRegisters();

/*HRESULT*/void WHvGetVirtualProcessorInterruptControllerState();

/*HRESULT*/void WHvSetVirtualProcessorInterruptControllerState();

/*HRESULT*/void WHvRequestInterrupt();

/*HRESULT*/void WHvGetVirtualProcessorXsaveState();

/*HRESULT*/void WHvSetVirtualProcessorXsaveState();

/*HRESULT*/void WHvQueryGpaRangeDirtyBitmap();

/*HRESULT*/void WHvGetPartitionCounters();

/*HRESULT*/void WHvGetVirtualProcessorCounters();

/*HRESULT*/void WHvGetVirtualProcessorInterruptControllerState2();

/*HRESULT*/void WHvSetVirtualProcessorInterruptControllerState2();

/*HRESULT*/void WHvRegisterPartitionDoorbellEvent();

/*HRESULT*/void WHvUnregisterPartitionDoorbellEvent();

/*HRESULT*/void WHvEmulatorCreateEmulator();

/*HRESULT*/void WHvEmulatorDestroyEmulator();

/*HRESULT*/void WHvEmulatorTryIoEmulation();

/*HRESULT*/void WHvEmulatorTryMmioEmulation();

