// NOTE: this file is autogenerated, DO NOT MODIFY
#include "../bootstrap.h"
//--------------------------------------------------------------------------------
// Section: Constants (104)
//--------------------------------------------------------------------------------
#define WDS_CLI_TRANSFER_ASYNCHRONOUS (UINT)1
#define WDS_CLI_NO_SPARSE_FILE (UINT)2
#define PXE_DHCP_SERVER_PORT (UINT)67
#define PXE_DHCP_CLIENT_PORT (UINT)68
#define PXE_SERVER_PORT (UINT)4011
#define PXE_DHCPV6_SERVER_PORT (UINT)547
#define PXE_DHCPV6_CLIENT_PORT (UINT)546
#define PXE_DHCP_FILE_SIZE (UINT)128
#define PXE_DHCP_SERVER_SIZE (UINT)64
#define PXE_DHCP_HWAADR_SIZE (UINT)16
#define PXE_DHCP_MAGIC_COOKIE_SIZE (UINT)4
#define PXE_REG_INDEX_TOP (UINT)0
#define PXE_REG_INDEX_BOTTOM (UINT)4294967295
#define PXE_CALLBACK_RECV_REQUEST (UINT)0
#define PXE_CALLBACK_SHUTDOWN (UINT)1
#define PXE_CALLBACK_SERVICE_CONTROL (UINT)2
#define PXE_CALLBACK_MAX (UINT)3
#define PXE_GSI_TRACE_ENABLED (UINT)1
#define PXE_GSI_SERVER_DUID (UINT)2
#define PXE_MAX_ADDRESS (UINT)16
#define PXE_ADDR_BROADCAST (UINT)1
#define PXE_ADDR_USE_PORT (UINT)2
#define PXE_ADDR_USE_ADDR (UINT)4
#define PXE_ADDR_USE_DHCP_RULES (UINT)8
#define PXE_DHCPV6_RELAY_HOP_COUNT_LIMIT (UINT)32
#define PXE_BA_NBP (UINT)1
#define PXE_BA_CUSTOM (UINT)2
#define PXE_BA_IGNORE (UINT)3
#define PXE_BA_REJECTED (UINT)4
#define PXE_TRACE_VERBOSE (UINT)65536
#define PXE_TRACE_INFO (UINT)131072
#define PXE_TRACE_WARNING (UINT)262144
#define PXE_TRACE_ERROR (UINT)524288
#define PXE_TRACE_FATAL (UINT)1048576
#define PXE_PROV_ATTR_FILTER (UINT)0
#define PXE_PROV_ATTR_FILTER_IPV6 (UINT)1
#define PXE_PROV_ATTR_IPV6_CAPABLE (UINT)2
#define PXE_PROV_FILTER_ALL (UINT)0
#define PXE_PROV_FILTER_DHCP_ONLY (UINT)1
#define PXE_PROV_FILTER_PXE_ONLY (UINT)2
#define MC_SERVER_CURRENT_VERSION (UINT)1
#define TRANSPORTPROVIDER_CURRENT_VERSION (UINT)1
#define WDS_MC_TRACE_VERBOSE (UINT)65536
#define WDS_MC_TRACE_INFO (UINT)131072
#define WDS_MC_TRACE_WARNING (UINT)262144
#define WDS_MC_TRACE_ERROR (UINT)524288
#define WDS_MC_TRACE_FATAL (UINT)1048576
#define WDS_TRANSPORTCLIENT_CURRENT_API_VERSION (UINT)1
#define WDS_TRANSPORTCLIENT_PROTOCOL_MULTICAST (UINT)1
#define WDS_TRANSPORTCLIENT_NO_CACHE (UINT)0
#define WDS_TRANSPORTCLIENT_STATUS_IN_PROGRESS (UINT)1
#define WDS_TRANSPORTCLIENT_STATUS_SUCCESS (UINT)2
#define WDS_TRANSPORTCLIENT_STATUS_FAILURE (UINT)3
#define WDSTRANSPORT_RESOURCE_UTILIZATION_UNKNOWN (UINT)255
#define WDSBP_PK_TYPE_DHCP (UINT)1
#define WDSBP_PK_TYPE_WDSNBP (UINT)2
#define WDSBP_PK_TYPE_BCD (UINT)4
#define WDSBP_PK_TYPE_DHCPV6 (UINT)8
#define WDSBP_OPT_TYPE_NONE (UINT)0
#define WDSBP_OPT_TYPE_BYTE (UINT)1
#define WDSBP_OPT_TYPE_USHORT (UINT)2
#define WDSBP_OPT_TYPE_ULONG (UINT)3
#define WDSBP_OPT_TYPE_WSTR (UINT)4
#define WDSBP_OPT_TYPE_STR (UINT)5
#define WDSBP_OPT_TYPE_IP4 (UINT)6
#define WDSBP_OPT_TYPE_IP6 (UINT)7
#define WDSBP_OPTVAL_ACTION_APPROVAL (UINT)1
#define WDSBP_OPTVAL_ACTION_REFERRAL (UINT)3
#define WDSBP_OPTVAL_ACTION_ABORT (UINT)5
#define WDSBP_OPTVAL_PXE_PROMPT_OPTIN (UINT)1
#define WDSBP_OPTVAL_PXE_PROMPT_NOPROMPT (UINT)2
#define WDSBP_OPTVAL_PXE_PROMPT_OPTOUT (UINT)3
#define WDSBP_OPTVAL_NBP_VER_7 (UINT)1792
#define WDSBP_OPTVAL_NBP_VER_8 (UINT)2048
#define WdsCliFlagEnumFilterVersion (INT)1
#define WdsCliFlagEnumFilterFirmware (INT)2
#define WDS_LOG_TYPE_CLIENT_ERROR (INT)1
#define WDS_LOG_TYPE_CLIENT_STARTED (INT)2
#define WDS_LOG_TYPE_CLIENT_FINISHED (INT)3
#define WDS_LOG_TYPE_CLIENT_IMAGE_SELECTED (INT)4
#define WDS_LOG_TYPE_CLIENT_APPLY_STARTED (INT)5
#define WDS_LOG_TYPE_CLIENT_APPLY_FINISHED (INT)6
#define WDS_LOG_TYPE_CLIENT_GENERIC_MESSAGE (INT)7
#define WDS_LOG_TYPE_CLIENT_UNATTEND_MODE (INT)8
#define WDS_LOG_TYPE_CLIENT_TRANSFER_START (INT)9
#define WDS_LOG_TYPE_CLIENT_TRANSFER_END (INT)10
#define WDS_LOG_TYPE_CLIENT_TRANSFER_DOWNGRADE (INT)11
#define WDS_LOG_TYPE_CLIENT_DOMAINJOINERROR (INT)12
#define WDS_LOG_TYPE_CLIENT_POST_ACTIONS_START (INT)13
#define WDS_LOG_TYPE_CLIENT_POST_ACTIONS_END (INT)14
#define WDS_LOG_TYPE_CLIENT_APPLY_STARTED_2 (INT)15
#define WDS_LOG_TYPE_CLIENT_APPLY_FINISHED_2 (INT)16
#define WDS_LOG_TYPE_CLIENT_DOMAINJOINERROR_2 (INT)17
#define WDS_LOG_TYPE_CLIENT_DRIVER_PACKAGE_NOT_ACCESSIBLE (INT)18
#define WDS_LOG_TYPE_CLIENT_OFFLINE_DRIVER_INJECTION_START (INT)19
#define WDS_LOG_TYPE_CLIENT_OFFLINE_DRIVER_INJECTION_END (INT)20
#define WDS_LOG_TYPE_CLIENT_OFFLINE_DRIVER_INJECTION_FAILURE (INT)21
#define WDS_LOG_TYPE_CLIENT_IMAGE_SELECTED2 (INT)22
#define WDS_LOG_TYPE_CLIENT_IMAGE_SELECTED3 (INT)23
#define WDS_LOG_TYPE_CLIENT_MAX_CODE (INT)24
#define WDS_LOG_LEVEL_DISABLED (INT)0
#define WDS_LOG_LEVEL_ERROR (INT)1
#define WDS_LOG_LEVEL_WARNING (INT)2
#define WDS_LOG_LEVEL_INFO (INT)3

//--------------------------------------------------------------------------------
// Section: Types (89)
//--------------------------------------------------------------------------------
typedef enum {
    CPU_ARCHITECTURE_AMD64 = 9,
    CPU_ARCHITECTURE_IA64 = 6,
    CPU_ARCHITECTURE_INTEL = 0,
} CPU_ARCHITECTURE;

typedef enum {
    WDS_CLI_MSG_START = 0,
    WDS_CLI_MSG_COMPLETE = 1,
    WDS_CLI_MSG_PROGRESS = 2,
    WDS_CLI_MSG_TEXT = 3,
} PFN_WDS_CLI_CALLBACK_MESSAGE_ID;
// TODO: enum 'PFN_WDS_CLI_CALLBACK_MESSAGE_ID' has known issues with its value aliases

typedef enum {
    WDS_TRANSPORTCLIENT_AUTH = 1,
    WDS_TRANSPORTCLIENT_NO_AUTH = 2,
} WDS_TRANSPORTCLIENT_REQUEST_AUTH_LEVEL;

typedef int WDS_CLI_CRED;

typedef int PFN_WdsCliTraceFunction;

typedef enum {
    WDS_CLI_IMAGE_TYPE_UNKNOWN = 0,
    WDS_CLI_IMAGE_TYPE_WIM = 1,
    WDS_CLI_IMAGE_TYPE_VHD = 2,
    WDS_CLI_IMAGE_TYPE_VHDX = 3,
} WDS_CLI_IMAGE_TYPE;

typedef enum {
    WDS_CLI_FIRMWARE_UNKNOWN = 0,
    WDS_CLI_FIRMWARE_BIOS = 1,
    WDS_CLI_FIRMWARE_EFI = 2,
} WDS_CLI_FIRMWARE_TYPE;

typedef enum {
    WDS_CLI_IMAGE_PARAM_UNKNOWN = 0,
    WDS_CLI_IMAGE_PARAM_SPARSE_FILE = 1,
    WDS_CLI_IMAGE_PARAM_SUPPORTED_FIRMWARES = 2,
} WDS_CLI_IMAGE_PARAM_TYPE;

typedef int PFN_WdsCliCallback;

typedef int PXE_DHCP_OPTION;

typedef int PXE_DHCP_MESSAGE;

typedef int PXE_DHCPV6_OPTION;

typedef int PXE_DHCPV6_MESSAGE_HEADER;

typedef int PXE_DHCPV6_MESSAGE;

typedef int PXE_DHCPV6_RELAY_MESSAGE;

typedef int PXE_PROVIDER;

typedef int PXE_ADDRESS;

typedef int PXE_DHCPV6_NESTED_RELAY_MESSAGE;

typedef enum {
    WDS_TRANSPORTPROVIDER_CREATE_INSTANCE = 0,
    WDS_TRANSPORTPROVIDER_COMPARE_CONTENT = 1,
    WDS_TRANSPORTPROVIDER_OPEN_CONTENT = 2,
    WDS_TRANSPORTPROVIDER_USER_ACCESS_CHECK = 3,
    WDS_TRANSPORTPROVIDER_GET_CONTENT_SIZE = 4,
    WDS_TRANSPORTPROVIDER_READ_CONTENT = 5,
    WDS_TRANSPORTPROVIDER_CLOSE_CONTENT = 6,
    WDS_TRANSPORTPROVIDER_CLOSE_INSTANCE = 7,
    WDS_TRANSPORTPROVIDER_SHUTDOWN = 8,
    WDS_TRANSPORTPROVIDER_DUMP_STATE = 9,
    WDS_TRANSPORTPROVIDER_REFRESH_SETTINGS = 10,
    WDS_TRANSPORTPROVIDER_GET_CONTENT_METADATA = 11,
    WDS_TRANSPORTPROVIDER_MAX_CALLBACKS = 12,
} TRANSPORTPROVIDER_CALLBACK_ID;

typedef int WDS_TRANSPORTPROVIDER_INIT_PARAMS;

typedef int WDS_TRANSPORTPROVIDER_SETTINGS;

typedef enum {
    WDS_TRANSPORTCLIENT_SESSION_START = 0,
    WDS_TRANSPORTCLIENT_RECEIVE_CONTENTS = 1,
    WDS_TRANSPORTCLIENT_SESSION_COMPLETE = 2,
    WDS_TRANSPORTCLIENT_RECEIVE_METADATA = 3,
    WDS_TRANSPORTCLIENT_SESSION_STARTEX = 4,
    WDS_TRANSPORTCLIENT_SESSION_NEGOTIATE = 5,
    WDS_TRANSPORTCLIENT_MAX_CALLBACKS = 6,
} TRANSPORTCLIENT_CALLBACK_ID;

typedef int TRANSPORTCLIENT_SESSION_INFO;

typedef int PFN_WdsTransportClientSessionStart;

typedef int PFN_WdsTransportClientSessionStartEx;

typedef int PFN_WdsTransportClientReceiveMetadata;

typedef int PFN_WdsTransportClientReceiveContents;

typedef int PFN_WdsTransportClientSessionComplete;

typedef int PFN_WdsTransportClientSessionNegotiate;

typedef int WDS_TRANSPORTCLIENT_REQUEST;

typedef int WDS_TRANSPORTCLIENT_CALLBACKS;

typedef int WdsTransportCacheable;

typedef int WdsTransportCollection;

typedef int WdsTransportManager;

typedef int WdsTransportServer;

typedef int WdsTransportSetupManager;

typedef int WdsTransportConfigurationManager;

typedef int WdsTransportNamespaceManager;

typedef int WdsTransportServicePolicy;

typedef int WdsTransportDiagnosticsPolicy;

typedef int WdsTransportMulticastSessionPolicy;

typedef int WdsTransportNamespace;

typedef int WdsTransportNamespaceAutoCast;

typedef int WdsTransportNamespaceScheduledCast;

typedef int WdsTransportNamespaceScheduledCastManualStart;

typedef int WdsTransportNamespaceScheduledCastAutoStart;

typedef int WdsTransportContent;

typedef int WdsTransportSession;

typedef int WdsTransportClient;

typedef int WdsTransportTftpClient;

typedef int WdsTransportTftpManager;

typedef int WdsTransportContentProvider;

typedef enum {
    WdsTptFeatureAdminPack = 1,
    WdsTptFeatureTransportServer = 2,
    WdsTptFeatureDeploymentServer = 4,
} WDSTRANSPORT_FEATURE_FLAGS;

typedef enum {
    WdsTptProtocolUnicast = 1,
    WdsTptProtocolMulticast = 2,
} WDSTRANSPORT_PROTOCOL_FLAGS;

typedef enum {
    WdsTptNamespaceTypeUnknown = 0,
    WdsTptNamespaceTypeAutoCast = 1,
    WdsTptNamespaceTypeScheduledCastManualStart = 2,
    WdsTptNamespaceTypeScheduledCastAutoStart = 3,
} WDSTRANSPORT_NAMESPACE_TYPE;

typedef enum {
    WdsTptDisconnectUnknown = 0,
    WdsTptDisconnectFallback = 1,
    WdsTptDisconnectAbort = 2,
} WDSTRANSPORT_DISCONNECT_TYPE;

typedef enum {
    WdsTptServiceNotifyUnknown = 0,
    WdsTptServiceNotifyReadSettings = 1,
} WDSTRANSPORT_SERVICE_NOTIFICATION;

typedef enum {
    WdsTptIpAddressUnknown = 0,
    WdsTptIpAddressIpv4 = 1,
    WdsTptIpAddressIpv6 = 2,
} WDSTRANSPORT_IP_ADDRESS_TYPE;

typedef enum {
    WdsTptIpAddressSourceUnknown = 0,
    WdsTptIpAddressSourceDhcp = 1,
    WdsTptIpAddressSourceRange = 2,
} WDSTRANSPORT_IP_ADDRESS_SOURCE_TYPE;

typedef enum {
    WdsTptNetworkProfileUnknown = 0,
    WdsTptNetworkProfileCustom = 1,
    WdsTptNetworkProfile10Mbps = 2,
    WdsTptNetworkProfile100Mbps = 3,
    WdsTptNetworkProfile1Gbps = 4,
} WDSTRANSPORT_NETWORK_PROFILE_TYPE;

typedef enum {
    WdsTptDiagnosticsComponentPxe = 1,
    WdsTptDiagnosticsComponentTftp = 2,
    WdsTptDiagnosticsComponentImageServer = 4,
    WdsTptDiagnosticsComponentMulticast = 8,
} WDSTRANSPORT_DIAGNOSTICS_COMPONENT_FLAGS;

typedef enum {
    WdsTptSlowClientHandlingUnknown = 0,
    WdsTptSlowClientHandlingNone = 1,
    WdsTptSlowClientHandlingAutoDisconnect = 2,
    WdsTptSlowClientHandlingMultistream = 3,
} WDSTRANSPORT_SLOW_CLIENT_HANDLING_TYPE;

typedef enum {
    WdsTptUdpPortPolicyDynamic = 0,
    WdsTptUdpPortPolicyFixed = 1,
} WDSTRANSPORT_UDP_PORT_POLICY;

typedef enum {
    WdsTptTftpCapMaximumBlockSize = 1,
    WdsTptTftpCapVariableWindow = 2,
} WDSTRANSPORT_TFTP_CAPABILITY;

// TODO: this type is limited to platform 'windowsServer2008'
typedef int IWdsTransportCacheable;

// TODO: this type is limited to platform 'windowsServer2008'
typedef int IWdsTransportCollection;

// TODO: this type is limited to platform 'windowsServer2008'
typedef int IWdsTransportManager;

// TODO: this type is limited to platform 'windowsServer2008'
typedef int IWdsTransportServer;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int IWdsTransportServer2;

// TODO: this type is limited to platform 'windowsServer2008'
typedef int IWdsTransportSetupManager;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int IWdsTransportSetupManager2;

// TODO: this type is limited to platform 'windowsServer2008'
typedef int IWdsTransportConfigurationManager;

// TODO: this type is limited to platform 'windowsServer2008'
typedef int IWdsTransportConfigurationManager2;

// TODO: this type is limited to platform 'windowsServer2008'
typedef int IWdsTransportNamespaceManager;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int IWdsTransportTftpManager;

// TODO: this type is limited to platform 'windowsServer2008'
typedef int IWdsTransportServicePolicy;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int IWdsTransportServicePolicy2;

// TODO: this type is limited to platform 'windowsServer2008'
typedef int IWdsTransportDiagnosticsPolicy;

// TODO: this type is limited to platform 'windowsServer2008'
typedef int IWdsTransportMulticastSessionPolicy;

// TODO: this type is limited to platform 'windowsServer2008'
typedef int IWdsTransportNamespace;

// TODO: this type is limited to platform 'windowsServer2008'
typedef int IWdsTransportNamespaceAutoCast;

// TODO: this type is limited to platform 'windowsServer2008'
typedef int IWdsTransportNamespaceScheduledCast;

// TODO: this type is limited to platform 'windowsServer2008'
typedef int IWdsTransportNamespaceScheduledCastManualStart;

// TODO: this type is limited to platform 'windowsServer2008'
typedef int IWdsTransportNamespaceScheduledCastAutoStart;

// TODO: this type is limited to platform 'windowsServer2008'
typedef int IWdsTransportContent;

// TODO: this type is limited to platform 'windowsServer2008'
typedef int IWdsTransportSession;

// TODO: this type is limited to platform 'windowsServer2008'
typedef int IWdsTransportClient;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int IWdsTransportTftpClient;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int IWdsTransportContentProvider;


//--------------------------------------------------------------------------------
// Section: Functions (94)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void WdsCliClose();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void WdsCliRegisterTrace();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WdsCliFreeStringArray();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void WdsCliFindFirstImage();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void WdsCliFindNextImage();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void WdsCliGetEnumerationFlags();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void WdsCliGetImageHandleFromFindHandle();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void WdsCliGetImageHandleFromTransferHandle();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void WdsCliCreateSession();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void WdsCliAuthorizeSession();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void WdsCliInitializeLog();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void WdsCliLog();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void WdsCliGetImageName();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void WdsCliGetImageDescription();

/*HRESULT*/void WdsCliGetImageType();

/*HRESULT*/void WdsCliGetImageFiles();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void WdsCliGetImageLanguage();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void WdsCliGetImageLanguages();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void WdsCliGetImageVersion();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void WdsCliGetImagePath();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void WdsCliGetImageIndex();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void WdsCliGetImageArchitecture();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void WdsCliGetImageLastModifiedTime();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void WdsCliGetImageSize();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void WdsCliGetImageHalName();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void WdsCliGetImageGroup();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void WdsCliGetImageNamespace();

/*HRESULT*/void WdsCliGetImageParameter();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void WdsCliGetTransferSize();

/*void*/void WdsCliSetTransferBufferSize();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void WdsCliTransferImage();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void WdsCliTransferFile();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void WdsCliCancelTransfer();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HRESULT*/void WdsCliWaitForTransfer();

// TODO: this type is limited to platform 'windows6.1'
/*HRESULT*/void WdsCliObtainDriverPackages();

// TODO: this type is limited to platform 'windows8.0'
/*HRESULT*/void WdsCliObtainDriverPackagesEx();

// TODO: this type is limited to platform 'windows8.0'
/*HRESULT*/void WdsCliGetDriverQueryXml();

// TODO: this type is limited to platform 'windowsServer2008'
/*u32*/void PxeProviderRegister();

// TODO: this type is limited to platform 'windowsServer2008'
/*u32*/void PxeProviderUnRegister();

// TODO: this type is limited to platform 'windowsServer2008'
/*u32*/void PxeProviderQueryIndex();

// TODO: this type is limited to platform 'windowsServer2008'
/*u32*/void PxeProviderEnumFirst();

// TODO: this type is limited to platform 'windowsServer2008'
/*u32*/void PxeProviderEnumNext();

// TODO: this type is limited to platform 'windowsServer2008'
/*u32*/void PxeProviderEnumClose();

// TODO: this type is limited to platform 'windowsServer2008'
/*u32*/void PxeProviderFreeInfo();

// TODO: this type is limited to platform 'windowsServer2008'
/*u32*/void PxeRegisterCallback();

// TODO: this type is limited to platform 'windowsServer2008'
/*u32*/void PxeSendReply();

// TODO: this type is limited to platform 'windowsServer2008'
/*u32*/void PxeAsyncRecvDone();

// TODO: this type is limited to platform 'windowsServer2008'
/*u32*/void PxeTrace();

/*u32*/void PxeTraceV();

// TODO: this type is limited to platform 'windowsServer2008'
/*?*c_void*/void PxePacketAllocate();

// TODO: this type is limited to platform 'windowsServer2008'
/*u32*/void PxePacketFree();

// TODO: this type is limited to platform 'windowsServer2008'
/*u32*/void PxeProviderSetAttribute();

// TODO: this type is limited to platform 'windowsServer2008'
/*u32*/void PxeDhcpInitialize();

// TODO: this type is limited to platform 'windows8.0'
/*u32*/void PxeDhcpv6Initialize();

// TODO: this type is limited to platform 'windowsServer2008'
/*u32*/void PxeDhcpAppendOption();

// TODO: this type is limited to platform 'windows8.0'
/*u32*/void PxeDhcpv6AppendOption();

// TODO: this type is limited to platform 'windowsServer2008'
/*u32*/void PxeDhcpAppendOptionRaw();

// TODO: this type is limited to platform 'windows8.0'
/*u32*/void PxeDhcpv6AppendOptionRaw();

// TODO: this type is limited to platform 'windowsServer2008'
/*u32*/void PxeDhcpIsValid();

// TODO: this type is limited to platform 'windows8.0'
/*u32*/void PxeDhcpv6IsValid();

// TODO: this type is limited to platform 'windowsServer2008'
/*u32*/void PxeDhcpGetOptionValue();

// TODO: this type is limited to platform 'windows8.0'
/*u32*/void PxeDhcpv6GetOptionValue();

// TODO: this type is limited to platform 'windowsServer2008'
/*u32*/void PxeDhcpGetVendorOptionValue();

// TODO: this type is limited to platform 'windows8.0'
/*u32*/void PxeDhcpv6GetVendorOptionValue();

// TODO: this type is limited to platform 'windows8.0'
/*u32*/void PxeDhcpv6ParseRelayForw();

// TODO: this type is limited to platform 'windows8.0'
/*u32*/void PxeDhcpv6CreateRelayRepl();

// TODO: this type is limited to platform 'windowsServer2008'
/*u32*/void PxeGetServerInfo();

// TODO: this type is limited to platform 'windows8.0'
/*u32*/void PxeGetServerInfoEx();

// TODO: this type is limited to platform 'windowsServer2008'
/*HRESULT*/void WdsTransportServerRegisterCallback();

// TODO: this type is limited to platform 'windowsServer2008'
/*HRESULT*/void WdsTransportServerCompleteRead();

// TODO: this type is limited to platform 'windowsServer2008'
/*HRESULT*/void WdsTransportServerTrace();

// TODO: this type is limited to platform 'windowsServer2008'
/*HRESULT*/void WdsTransportServerTraceV();

// TODO: this type is limited to platform 'windowsServer2008'
/*?*c_void*/void WdsTransportServerAllocateBuffer();

// TODO: this type is limited to platform 'windowsServer2008'
/*HRESULT*/void WdsTransportServerFreeBuffer();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void WdsTransportClientInitialize();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void WdsTransportClientInitializeSession();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void WdsTransportClientRegisterCallback();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void WdsTransportClientStartSession();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void WdsTransportClientCompleteReceive();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void WdsTransportClientCancelSession();

/*u32*/void WdsTransportClientCancelSessionEx();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void WdsTransportClientWaitForCompletion();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void WdsTransportClientQueryStatus();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void WdsTransportClientCloseSession();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void WdsTransportClientAddRefBuffer();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void WdsTransportClientReleaseBuffer();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void WdsTransportClientShutdown();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void WdsBpParseInitialize();

// TODO: this type is limited to platform 'windows8.0'
/*u32*/void WdsBpParseInitializev6();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void WdsBpInitialize();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void WdsBpCloseHandle();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void WdsBpQueryOption();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void WdsBpAddOption();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void WdsBpGetOptionBuffer();

