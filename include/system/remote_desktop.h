// NOTE: this file is autogenerated, DO NOT MODIFY
#include "../bootstrap.h"
//--------------------------------------------------------------------------------
// Section: Constants (221)
//--------------------------------------------------------------------------------
#define WTS_DOMAIN_LENGTH (UINT)255
#define WTS_USERNAME_LENGTH (UINT)255
#define WTS_PASSWORD_LENGTH (UINT)255
#define WTS_DIRECTORY_LENGTH (UINT)256
#define WTS_INITIALPROGRAM_LENGTH (UINT)256
#define WTS_PROTOCOL_NAME_LENGTH (UINT)8
#define WTS_DRIVER_NAME_LENGTH (UINT)8
#define WTS_DEVICE_NAME_LENGTH (UINT)19
#define WTS_IMEFILENAME_LENGTH (UINT)32
#define WTS_CLIENTNAME_LENGTH (UINT)20
#define WTS_CLIENTADDRESS_LENGTH (UINT)30
#define WTS_CLIENT_PRODUCT_ID_LENGTH (UINT)32
#define WTS_MAX_PROTOCOL_CACHE (UINT)4
#define WTS_MAX_CACHE_RESERVED (UINT)20
#define WTS_MAX_RESERVED (UINT)100
#define WTS_MAX_COUNTERS (UINT)100
#define WTS_MAX_DISPLAY_IOCTL_DATA (UINT)256
#define WTS_PERF_DISABLE_NOTHING (UINT)0
#define WTS_PERF_DISABLE_WALLPAPER (UINT)1
#define WTS_PERF_DISABLE_FULLWINDOWDRAG (UINT)2
#define WTS_PERF_DISABLE_MENUANIMATIONS (UINT)4
#define WTS_PERF_DISABLE_THEMING (UINT)8
#define WTS_PERF_ENABLE_ENHANCED_GRAPHICS (UINT)16
#define WTS_PERF_DISABLE_CURSOR_SHADOW (UINT)32
#define WTS_PERF_DISABLE_CURSORSETTINGS (UINT)64
#define WTS_PERF_ENABLE_FONT_SMOOTHING (UINT)128
#define WTS_PERF_ENABLE_DESKTOP_COMPOSITION (UINT)256
#define WTS_VALUE_TYPE_ULONG (UINT)1
#define WTS_VALUE_TYPE_STRING (UINT)2
#define WTS_VALUE_TYPE_BINARY (UINT)3
#define WTS_VALUE_TYPE_GUID (UINT)4
#define WTS_KEY_EXCHANGE_ALG_RSA (UINT)1
#define WTS_KEY_EXCHANGE_ALG_DH (UINT)2
#define WTS_LICENSE_PROTOCOL_VERSION (UINT)65536
#define WTS_LICENSE_PREAMBLE_VERSION (UINT)3
#define SINGLE_SESSION (UINT)1
#define FORCE_REJOIN (UINT)2
#define FORCE_REJOIN_IN_CLUSTERMODE (UINT)3
#define RESERVED_FOR_LEGACY (UINT)4
#define KEEP_EXISTING_SESSIONS (UINT)8
#define CHANNEL_EVENT_INITIALIZED (UINT)0
#define CHANNEL_EVENT_CONNECTED (UINT)1
#define CHANNEL_EVENT_V1_CONNECTED (UINT)2
#define CHANNEL_EVENT_DISCONNECTED (UINT)3
#define CHANNEL_EVENT_TERMINATED (UINT)4
#define CHANNEL_EVENT_DATA_RECEIVED (UINT)10
#define CHANNEL_EVENT_WRITE_COMPLETE (UINT)11
#define CHANNEL_EVENT_WRITE_CANCELLED (UINT)12
#define CHANNEL_RC_OK (UINT)0
#define CHANNEL_RC_ALREADY_INITIALIZED (UINT)1
#define CHANNEL_RC_NOT_INITIALIZED (UINT)2
#define CHANNEL_RC_ALREADY_CONNECTED (UINT)3
#define CHANNEL_RC_NOT_CONNECTED (UINT)4
#define CHANNEL_RC_TOO_MANY_CHANNELS (UINT)5
#define CHANNEL_RC_BAD_CHANNEL (UINT)6
#define CHANNEL_RC_BAD_CHANNEL_HANDLE (UINT)7
#define CHANNEL_RC_NO_BUFFER (UINT)8
#define CHANNEL_RC_BAD_INIT_HANDLE (UINT)9
#define CHANNEL_RC_NOT_OPEN (UINT)10
#define CHANNEL_RC_BAD_PROC (UINT)11
#define CHANNEL_RC_NO_MEMORY (UINT)12
#define CHANNEL_RC_UNKNOWN_CHANNEL_NAME (UINT)13
#define CHANNEL_RC_ALREADY_OPEN (UINT)14
#define CHANNEL_RC_NOT_IN_VIRTUALCHANNELENTRY (UINT)15
#define CHANNEL_RC_NULL_DATA (UINT)16
#define CHANNEL_RC_ZERO_LENGTH (UINT)17
#define CHANNEL_RC_INVALID_INSTANCE (UINT)18
#define CHANNEL_RC_UNSUPPORTED_VERSION (UINT)19
#define CHANNEL_RC_INITIALIZATION_ERROR (UINT)20
#define VIRTUAL_CHANNEL_VERSION_WIN2000 (UINT)1
#define CHANNEL_CHUNK_LENGTH (UINT)1600
#define CHANNEL_BUFFER_SIZE (UINT)65535
#define CHANNEL_FLAG_FIRST (UINT)1
#define CHANNEL_FLAG_LAST (UINT)2
#define CHANNEL_FLAG_MIDDLE (UINT)0
#define CHANNEL_FLAG_FAIL (UINT)256
#define CHANNEL_OPTION_INITIALIZED (UINT)2147483648
#define CHANNEL_OPTION_ENCRYPT_RDP (UINT)1073741824
#define CHANNEL_OPTION_ENCRYPT_SC (UINT)536870912
#define CHANNEL_OPTION_ENCRYPT_CS (UINT)268435456
#define CHANNEL_OPTION_PRI_HIGH (UINT)134217728
#define CHANNEL_OPTION_PRI_MED (UINT)67108864
#define CHANNEL_OPTION_PRI_LOW (UINT)33554432
#define CHANNEL_OPTION_COMPRESS_RDP (UINT)8388608
#define CHANNEL_OPTION_COMPRESS (UINT)4194304
#define CHANNEL_OPTION_SHOW_PROTOCOL (UINT)2097152
#define CHANNEL_OPTION_REMOTE_CONTROL_PERSISTENT (UINT)1048576
#define CHANNEL_MAX_COUNT (UINT)30
#define CHANNEL_NAME_LEN (UINT)7
#define MAX_POLICY_ATTRIBUTES (UINT)20
#define WTS_CURRENT_SESSION (UINT)4294967295
#define USERNAME_LENGTH (UINT)20
#define CLIENTNAME_LENGTH (UINT)20
#define CLIENTADDRESS_LENGTH (UINT)30
#define WTS_WSD_LOGOFF (UINT)1
#define WTS_WSD_SHUTDOWN (UINT)2
#define WTS_WSD_REBOOT (UINT)4
#define WTS_WSD_POWEROFF (UINT)8
#define WTS_WSD_FASTREBOOT (UINT)16
#define MAX_ELAPSED_TIME_LENGTH (UINT)15
#define MAX_DATE_TIME_LENGTH (UINT)56
#define WINSTATIONNAME_LENGTH (UINT)32
#define DOMAIN_LENGTH (UINT)17
#define WTS_DRIVE_LENGTH (UINT)3
#define WTS_LISTENER_NAME_LENGTH (UINT)32
#define WTS_COMMENT_LENGTH (UINT)60
#define WTS_LISTENER_CREATE (UINT)1
#define WTS_LISTENER_UPDATE (UINT)16
#define WTS_SECURITY_QUERY_INFORMATION (UINT)1
#define WTS_SECURITY_SET_INFORMATION (UINT)2
#define WTS_SECURITY_RESET (UINT)4
#define WTS_SECURITY_VIRTUAL_CHANNELS (UINT)8
#define WTS_SECURITY_REMOTE_CONTROL (UINT)16
#define WTS_SECURITY_LOGON (UINT)32
#define WTS_SECURITY_LOGOFF (UINT)64
#define WTS_SECURITY_MESSAGE (UINT)128
#define WTS_SECURITY_CONNECT (UINT)256
#define WTS_SECURITY_DISCONNECT (UINT)512
#define WTS_PROTOCOL_TYPE_CONSOLE (UINT)0
#define WTS_PROTOCOL_TYPE_ICA (UINT)1
#define WTS_PROTOCOL_TYPE_RDP (UINT)2
#define WTS_SESSIONSTATE_UNKNOWN (UINT)4294967295
#define WTS_SESSIONSTATE_LOCK (UINT)0
#define WTS_SESSIONSTATE_UNLOCK (UINT)1
#define PRODUCTINFO_COMPANYNAME_LENGTH (UINT)256
#define PRODUCTINFO_PRODUCTID_LENGTH (UINT)4
#define VALIDATIONINFORMATION_LICENSE_LENGTH (UINT)16384
#define VALIDATIONINFORMATION_HARDWAREID_LENGTH (UINT)20
#define WTS_EVENT_NONE (UINT)0
#define WTS_EVENT_CREATE (UINT)1
#define WTS_EVENT_DELETE (UINT)2
#define WTS_EVENT_RENAME (UINT)4
#define WTS_EVENT_CONNECT (UINT)8
#define WTS_EVENT_DISCONNECT (UINT)16
#define WTS_EVENT_LOGON (UINT)32
#define WTS_EVENT_LOGOFF (UINT)64
#define WTS_EVENT_STATECHANGE (UINT)128
#define WTS_EVENT_LICENSE (UINT)256
#define WTS_EVENT_ALL (UINT)2147483647
#define WTS_EVENT_FLUSH (UINT)2147483648
#define REMOTECONTROL_KBDSHIFT_HOTKEY (UINT)1
#define REMOTECONTROL_KBDCTRL_HOTKEY (UINT)2
#define REMOTECONTROL_KBDALT_HOTKEY (UINT)4
#define WTS_CHANNEL_OPTION_DYNAMIC (UINT)1
#define WTS_CHANNEL_OPTION_DYNAMIC_PRI_LOW (UINT)0
#define WTS_CHANNEL_OPTION_DYNAMIC_PRI_MED (UINT)2
#define WTS_CHANNEL_OPTION_DYNAMIC_PRI_HIGH (UINT)4
#define WTS_CHANNEL_OPTION_DYNAMIC_PRI_REAL (UINT)6
#define WTS_CHANNEL_OPTION_DYNAMIC_NO_COMPRESS (UINT)8
#define NOTIFY_FOR_ALL_SESSIONS (UINT)1
#define NOTIFY_FOR_THIS_SESSION (UINT)0
#define WTS_PROCESS_INFO_LEVEL_0 (UINT)0
#define WTS_PROCESS_INFO_LEVEL_1 (UINT)1
#define PLUGIN_CAPABILITY_EXTERNAL_REDIRECTION (UINT)1
#define MaxFQDN_Len (UINT)256
#define MaxNetBiosName_Len (UINT)16
#define MaxNumOfExposed_IPs (UINT)12
#define MaxUserName_Len (UINT)104
#define MaxDomainName_Len (UINT)256
#define MaxFarm_Len (UINT)256
#define MaxAppName_Len (UINT)256
#define WKS_FLAG_CLEAR_CREDS_ON_LAST_RESOURCE (UINT)1
#define WKS_FLAG_PASSWORD_ENCRYPTED (UINT)2
#define WKS_FLAG_CREDS_AUTHENTICATED (UINT)4
#define SB_SYNCH_CONFLICT_MAX_WRITE_ATTEMPTS (UINT)100
#define ACQUIRE_TARGET_LOCK_TIMEOUT (UINT)300000
#define RENDER_HINT_CLEAR (UINT)0
#define RENDER_HINT_VIDEO (UINT)1
#define RENDER_HINT_MAPPEDWINDOW (UINT)2
#define TS_VC_LISTENER_STATIC_CHANNEL (UINT)1
#define WRdsGraphicsChannels_LossyChannelMaxMessageSize (UINT)988
#define RFX_RDP_MSG_PREFIX (UINT)0
#define RFX_GFX_MSG_PREFIX (UINT)48
#define RFX_GFX_MSG_PREFIX_MASK (UINT)48
#define RFX_GFX_MAX_SUPPORTED_MONITORS (UINT)16
#define RFX_CLIENT_ID_LENGTH (UINT)32
#define DISPID_METHOD_REMOTEDESKTOPCLIENT_CONNECT (UINT)701
#define DISPID_METHOD_REMOTEDESKTOPCLIENT_DISCONNECT (UINT)702
#define DISPID_METHOD_REMOTEDESKTOPCLIENT_RECONNECT (UINT)703
#define DISPID_METHOD_REMOTEDESKTOPCLIENT_DELETE_SAVED_CREDENTIALS (UINT)704
#define DISPID_METHOD_REMOTEDESKTOPCLIENT_UPDATE_SESSION_DISPLAYSETTINGS (UINT)705
#define DISPID_METHOD_REMOTEDESKTOPCLIENT_ATTACH_EVENT (UINT)706
#define DISPID_METHOD_REMOTEDESKTOPCLIENT_DETACH_EVENT (UINT)707
#define DISPID_PROP_REMOTEDESKTOPCLIENT_SETTINGS (UINT)710
#define DISPID_PROP_REMOTEDESKTOPCLIENT_ACTIONS (UINT)711
#define DISPID_PROP_REMOTEDESKTOPCLIENT_TOUCH_POINTER (UINT)712
#define DISPID_METHOD_REMOTEDESKTOPCLIENT_SET_RDPPROPERTY (UINT)720
#define DISPID_METHOD_REMOTEDESKTOPCLIENT_GET_RDPPROPERTY (UINT)721
#define DISPID_METHOD_REMOTEDESKTOPCLIENT_APPLY_SETTINGS (UINT)722
#define DISPID_METHOD_REMOTEDESKTOPCLIENT_RETRIEVE_SETTINGS (UINT)723
#define DISPID_METHOD_REMOTEDESKTOPCLIENT_SUSPEND_SCREEN_UPDATES (UINT)730
#define DISPID_METHOD_REMOTEDESKTOPCLIENT_RESUME_SCREEN_UPDATES (UINT)731
#define DISPID_METHOD_REMOTEDESKTOPCLIENT_EXECUTE_REMOTE_ACTION (UINT)732
#define DISPID_METHOD_REMOTEDESKTOPCLIENT_GET_SNAPSHOT (UINT)733
#define DISPID_PROP_REMOTEDESKTOPCLIENT_TOUCHPOINTER_ENABLED (UINT)740
#define DISPID_PROP_REMOTEDESKTOPCLIENT_TOUCHPOINTER_EVENTSENABLED (UINT)741
#define DISPID_PROP_REMOTEDESKTOPCLIENT_TOUCHPOINTER_POINTERSPEED (UINT)742
#define DISPID_AX_CONNECTING (UINT)750
#define DISPID_AX_CONNECTED (UINT)751
#define DISPID_AX_LOGINCOMPLETED (UINT)752
#define DISPID_AX_DISCONNECTED (UINT)753
#define DISPID_AX_STATUSCHANGED (UINT)754
#define DISPID_AX_AUTORECONNECTING (UINT)755
#define DISPID_AX_AUTORECONNECTED (UINT)756
#define DISPID_AX_DIALOGDISPLAYING (UINT)757
#define DISPID_AX_DIALOGDISMISSED (UINT)758
#define DISPID_AX_NETWORKSTATUSCHANGED (UINT)759
#define DISPID_AX_ADMINMESSAGERECEIVED (UINT)760
#define DISPID_AX_KEYCOMBINATIONPRESSED (UINT)761
#define DISPID_AX_REMOTEDESKTOPSIZECHANGED (UINT)762
#define DISPID_AX_TOUCHPOINTERCURSORMOVED (UINT)800
#define RDCLIENT_BITMAP_RENDER_SERVICE GUID { "e4cc08cb-942e-4b19-8504-bd5a89a747f5" }
#define WTS_QUERY_ALLOWED_INITIAL_APP GUID { "c77d1b30-5be1-4c6b-a0e1-bd6d2e5c9fcc" }
#define WTS_QUERY_LOGON_SCREEN_SIZE GUID { "8b8e0fe7-0804-4a0e-b279-8660b1df0049" }
#define WTS_QUERY_AUDIOENUM_DLL GUID { "9bf4fa97-c883-4c2a-80ab-5a39c9af00db" }
#define WTS_QUERY_MF_FORMAT_SUPPORT GUID { "41869ad0-6332-4dc8-95d5-db749e2f1d94" }
#define WRDS_SERVICE_ID_GRAPHICS_GUID GUID { "d2993f4d-02cf-4280-8c48-1624b44f8706" }
#define PROPERTY_DYNAMIC_TIME_ZONE_INFORMATION GUID { "0cdfd28e-d0b9-4c1f-a5eb-6d1f6c6535b9" }
#define PROPERTY_TYPE_GET_FAST_RECONNECT GUID { "6212d757-0043-4862-99c3-9f3059ac2a3b" }
#define CONNECTION_PROPERTY_IDLE_TIME_WARNING GUID { "693f7ff5-0c4e-4d17-b8e0-1f70325e5d58" }
#define CONNECTION_PROPERTY_CURSOR_BLINK_DISABLED GUID { "4b150580-fea4-4d3c-9de4-7433a66618f7" }

//--------------------------------------------------------------------------------
// Section: Types (255)
//--------------------------------------------------------------------------------
typedef int HwtsVirtualChannelHandle;

typedef enum {
    BUFFER_INVALID = 0,
    BUFFER_VALID = 1,
    BUFFER_SILENT = 2,
} APO_BUFFER_FLAGS;

typedef int APO_CONNECTION_PROPERTY;

typedef enum {
    POSITION_INVALID = 0,
    POSITION_DISCONTINUOUS = 1,
    POSITION_CONTINUOUS = 2,
    POSITION_QPC_ERROR = 4,
} AE_POSITION_FLAGS;

typedef int AE_CURRENT_POSITION;

// TODO: this type is limited to platform 'windows6.1'
typedef int IAudioEndpoint;

// TODO: this type is limited to platform 'windows6.1'
typedef int IAudioEndpointRT;

// TODO: this type is limited to platform 'windows6.1'
typedef int IAudioInputEndpointRT;

// TODO: this type is limited to platform 'windows6.1'
typedef int IAudioOutputEndpointRT;

// TODO: this type is limited to platform 'windows6.1'
typedef int IAudioDeviceEndpoint;

// TODO: this type is limited to platform 'windows6.1'
typedef int IAudioEndpointControl;

typedef int WTSSESSION_NOTIFICATION;

typedef int TSUserExInterfaces;

typedef int ADsTSUserEx;

// TODO: this type is limited to platform 'windows6.0.6000'
typedef int IADsTSUserEx;

typedef enum {
    AA_AUTH_MIN = 0,
    AA_AUTH_BASIC = 1,
    AA_AUTH_NTLM = 2,
    AA_AUTH_SC = 3,
    AA_AUTH_LOGGEDONCREDENTIALS = 4,
    AA_AUTH_NEGOTIATE = 5,
    AA_AUTH_ANY = 6,
    AA_AUTH_COOKIE = 7,
    AA_AUTH_DIGEST = 8,
    AA_AUTH_ORGID = 9,
    AA_AUTH_CONID = 10,
    AA_AUTH_SSPI_NTLM = 11,
    AA_AUTH_MAX = 12,
} AAAuthSchemes;

typedef enum {
    AA_MAIN_SESSION_CREATION = 0,
    AA_SUB_SESSION_CREATION = 1,
    AA_SUB_SESSION_CLOSED = 2,
    AA_MAIN_SESSION_CLOSED = 3,
} AAAccountingDataType;

typedef int AAAccountingData;

typedef enum {
    SESSION_TIMEOUT_ACTION_DISCONNECT = 0,
    SESSION_TIMEOUT_ACTION_SILENT_REAUTH = 1,
} SESSION_TIMEOUT_ACTION_TYPE;

typedef enum {
    EnableAllRedirections = 0,
    DisableAllRedirections = 1,
    DriveRedirectionDisabled = 2,
    PrinterRedirectionDisabled = 3,
    PortRedirectionDisabled = 4,
    ClipboardRedirectionDisabled = 5,
    PnpRedirectionDisabled = 6,
    AllowOnlySDRServers = 7,
} PolicyAttributeType;

typedef enum {
    AA_UNTRUSTED = 0,
    AA_TRUSTEDUSER_UNTRUSTEDCLIENT = 1,
    AA_TRUSTEDUSER_TRUSTEDCLIENT = 2,
} AATrustClassID;

// TODO: this type is limited to platform 'windows6.1'
typedef int ITSGAuthorizeConnectionSink;

// TODO: this type is limited to platform 'windows6.1'
typedef int ITSGAuthorizeResourceSink;

// TODO: this type is limited to platform 'windows6.1'
typedef int ITSGPolicyEngine;

// TODO: this type is limited to platform 'windows6.1'
typedef int ITSGAccountingEngine;

// TODO: this type is limited to platform 'windows6.1'
typedef int ITSGAuthenticateUserSink;

// TODO: this type is limited to platform 'windows6.1'
typedef int ITSGAuthenticationEngine;

typedef enum {
    WTSActive = 0,
    WTSConnected = 1,
    WTSConnectQuery = 2,
    WTSShadow = 3,
    WTSDisconnected = 4,
    WTSIdle = 5,
    WTSListen = 6,
    WTSReset = 7,
    WTSDown = 8,
    WTSInit = 9,
} WTS_CONNECTSTATE_CLASS;

typedef int WTS_SERVER_INFOW;

typedef int WTS_SERVER_INFOA;

typedef int WTS_SESSION_INFOW;

typedef int WTS_SESSION_INFOA;

typedef int WTS_SESSION_INFO_1W;

typedef int WTS_SESSION_INFO_1A;

typedef int WTS_PROCESS_INFOW;

typedef int WTS_PROCESS_INFOA;

typedef enum {
    WTSInitialProgram = 0,
    WTSApplicationName = 1,
    WTSWorkingDirectory = 2,
    WTSOEMId = 3,
    WTSSessionId = 4,
    WTSUserName = 5,
    WTSWinStationName = 6,
    WTSDomainName = 7,
    WTSConnectState = 8,
    WTSClientBuildNumber = 9,
    WTSClientName = 10,
    WTSClientDirectory = 11,
    WTSClientProductId = 12,
    WTSClientHardwareId = 13,
    WTSClientAddress = 14,
    WTSClientDisplay = 15,
    WTSClientProtocolType = 16,
    WTSIdleTime = 17,
    WTSLogonTime = 18,
    WTSIncomingBytes = 19,
    WTSOutgoingBytes = 20,
    WTSIncomingFrames = 21,
    WTSOutgoingFrames = 22,
    WTSClientInfo = 23,
    WTSSessionInfo = 24,
    WTSSessionInfoEx = 25,
    WTSConfigInfo = 26,
    WTSValidationInfo = 27,
    WTSSessionAddressV4 = 28,
    WTSIsRemoteSession = 29,
} WTS_INFO_CLASS;

typedef int WTSCONFIGINFOW;

typedef int WTSCONFIGINFOA;

typedef int WTSINFOW;

typedef int WTSINFOA;

typedef int WTSINFOEX_LEVEL1_W;

typedef int WTSINFOEX_LEVEL1_A;

typedef int WTSINFOEX_LEVEL_W;

typedef int WTSINFOEX_LEVEL_A;

typedef int WTSINFOEXW;

typedef int WTSINFOEXA;

typedef int WTSCLIENTW;

typedef int WTSCLIENTA;

typedef int _WTS_PRODUCT_INFOA;

typedef int _WTS_PRODUCT_INFOW;

typedef int WTS_VALIDATION_INFORMATIONA;

typedef int WTS_VALIDATION_INFORMATIONW;

typedef int WTS_CLIENT_ADDRESS;

typedef int WTS_CLIENT_DISPLAY;

typedef enum {
    WTSUserConfigInitialProgram = 0,
    WTSUserConfigWorkingDirectory = 1,
    WTSUserConfigfInheritInitialProgram = 2,
    WTSUserConfigfAllowLogonTerminalServer = 3,
    WTSUserConfigTimeoutSettingsConnections = 4,
    WTSUserConfigTimeoutSettingsDisconnections = 5,
    WTSUserConfigTimeoutSettingsIdle = 6,
    WTSUserConfigfDeviceClientDrives = 7,
    WTSUserConfigfDeviceClientPrinters = 8,
    WTSUserConfigfDeviceClientDefaultPrinter = 9,
    WTSUserConfigBrokenTimeoutSettings = 10,
    WTSUserConfigReconnectSettings = 11,
    WTSUserConfigModemCallbackSettings = 12,
    WTSUserConfigModemCallbackPhoneNumber = 13,
    WTSUserConfigShadowingSettings = 14,
    WTSUserConfigTerminalServerProfilePath = 15,
    WTSUserConfigTerminalServerHomeDir = 16,
    WTSUserConfigTerminalServerHomeDirDrive = 17,
    WTSUserConfigfTerminalServerRemoteHomeDir = 18,
    WTSUserConfigUser = 19,
} WTS_CONFIG_CLASS;

typedef enum {
    WTSUserConfigSourceSAM = 0,
} WTS_CONFIG_SOURCE;

typedef int WTSUSERCONFIGA;

typedef int WTSUSERCONFIGW;

typedef enum {
    WTSVirtualClientData = 0,
    WTSVirtualFileHandle = 1,
} WTS_VIRTUAL_CLASS;

typedef int WTS_SESSION_ADDRESS;

typedef int WTS_PROCESS_INFO_EXW;

typedef int WTS_PROCESS_INFO_EXA;

typedef enum {
    WTSTypeProcessInfoLevel0 = 0,
    WTSTypeProcessInfoLevel1 = 1,
    WTSTypeSessionInfoLevel1 = 2,
} WTS_TYPE_CLASS;

typedef int WTSLISTENERCONFIGW;

typedef int WTSLISTENERCONFIGA;

typedef enum {
    WTSSBX_MACHINE_DRAIN_UNSPEC = 0,
    WTSSBX_MACHINE_DRAIN_OFF = 1,
    WTSSBX_MACHINE_DRAIN_ON = 2,
} WTSSBX_MACHINE_DRAIN;

typedef enum {
    WTSSBX_MACHINE_SESSION_MODE_UNSPEC = 0,
    WTSSBX_MACHINE_SESSION_MODE_SINGLE = 1,
    WTSSBX_MACHINE_SESSION_MODE_MULTIPLE = 2,
} WTSSBX_MACHINE_SESSION_MODE;

typedef enum {
    WTSSBX_ADDRESS_FAMILY_AF_UNSPEC = 0,
    WTSSBX_ADDRESS_FAMILY_AF_INET = 1,
    WTSSBX_ADDRESS_FAMILY_AF_INET6 = 2,
    WTSSBX_ADDRESS_FAMILY_AF_IPX = 3,
    WTSSBX_ADDRESS_FAMILY_AF_NETBIOS = 4,
} WTSSBX_ADDRESS_FAMILY;

typedef int WTSSBX_IP_ADDRESS;

typedef enum {
    WTSSBX_MACHINE_STATE_UNSPEC = 0,
    WTSSBX_MACHINE_STATE_READY = 1,
    WTSSBX_MACHINE_STATE_SYNCHRONIZING = 2,
} WTSSBX_MACHINE_STATE;

typedef int WTSSBX_MACHINE_CONNECT_INFO;

typedef int WTSSBX_MACHINE_INFO;

typedef enum {
    WTSSBX_SESSION_STATE_UNSPEC = 0,
    WTSSBX_SESSION_STATE_ACTIVE = 1,
    WTSSBX_SESSION_STATE_DISCONNECTED = 2,
} WTSSBX_SESSION_STATE;

typedef int WTSSBX_SESSION_INFO;

typedef enum {
    WTSSBX_NOTIFICATION_REMOVED = 1,
    WTSSBX_NOTIFICATION_CHANGED = 2,
    WTSSBX_NOTIFICATION_ADDED = 4,
    WTSSBX_NOTIFICATION_RESYNC = 8,
} WTSSBX_NOTIFICATION_TYPE;

// TODO: this type is limited to platform 'windowsServer2008'
typedef int IWTSSBPlugin;

typedef int CHANNEL_DEF;

typedef int CHANNEL_PDU_HEADER;

typedef int PCHANNEL_INIT_EVENT_FN;

typedef int PCHANNEL_OPEN_EVENT_FN;

typedef int PVIRTUALCHANNELINIT;

typedef int PVIRTUALCHANNELOPEN;

typedef int PVIRTUALCHANNELCLOSE;

typedef int PVIRTUALCHANNELWRITE;

typedef int CHANNEL_ENTRY_POINTS;

typedef int PVIRTUALCHANNELENTRY;

typedef int Workspace;

// TODO: this type is limited to platform 'windows6.1'
typedef int IWorkspaceClientExt;

// TODO: this type is limited to platform 'windows6.1'
typedef int IWorkspace;

// TODO: this type is limited to platform 'windows8.0'
typedef int IWorkspace2;

// TODO: this type is limited to platform 'windows10.0.10240'
typedef int IWorkspace3;

// TODO: this type is limited to platform 'windows6.1'
typedef int IWorkspaceRegistration;

// TODO: this type is limited to platform 'windows8.1'
typedef int IWorkspaceRegistration2;

// TODO: this type is limited to platform 'windows6.1'
typedef int IWorkspaceScriptable;

// TODO: this type is limited to platform 'windows8.0'
typedef int IWorkspaceScriptable2;

// TODO: this type is limited to platform 'windows8.1'
typedef int IWorkspaceScriptable3;

// TODO: this type is limited to platform 'windows8.0'
typedef int IWorkspaceReportMessage;

typedef int _ITSWkspEvents;

typedef enum {
    TSSD_ADDR_UNDEFINED = 0,
    TSSD_ADDR_IPv4 = 4,
    TSSD_ADDR_IPv6 = 6,
} TSSD_AddrV46Type;

typedef enum {
    TSSB_NOTIFY_INVALID = 0,
    TSSB_NOTIFY_TARGET_CHANGE = 1,
    TSSB_NOTIFY_SESSION_CHANGE = 2,
    TSSB_NOTIFY_CONNECTION_REQUEST_CHANGE = 4,
} TSSB_NOTIFICATION_TYPE;

typedef enum {
    TARGET_UNKNOWN = 1,
    TARGET_INITIALIZING = 2,
    TARGET_RUNNING = 3,
    TARGET_DOWN = 4,
    TARGET_HIBERNATED = 5,
    TARGET_CHECKED_OUT = 6,
    TARGET_STOPPED = 7,
    TARGET_INVALID = 8,
    TARGET_STARTING = 9,
    TARGET_STOPPING = 10,
    TARGET_MAXSTATE = 11,
} TARGET_STATE;

typedef enum {
    TARGET_CHANGE_UNSPEC = 1,
    TARGET_EXTERNALIP_CHANGED = 2,
    TARGET_INTERNALIP_CHANGED = 4,
    TARGET_JOINED = 8,
    TARGET_REMOVED = 16,
    TARGET_STATE_CHANGED = 32,
    TARGET_IDLE = 64,
    TARGET_PENDING = 128,
    TARGET_INUSE = 256,
    TARGET_PATCH_STATE_CHANGED = 512,
    TARGET_FARM_MEMBERSHIP_CHANGED = 1024,
} TARGET_CHANGE_TYPE;

typedef enum {
    UNKNOWN = 0,
    FARM = 1,
    NONFARM = 2,
} TARGET_TYPE;

typedef enum {
    TARGET_PATCH_UNKNOWN = 0,
    TARGET_PATCH_NOT_STARTED = 1,
    TARGET_PATCH_IN_PROGRESS = 2,
    TARGET_PATCH_COMPLETED = 3,
    TARGET_PATCH_FAILED = 4,
} TARGET_PATCH_STATE;

typedef enum {
    CLIENT_MESSAGE_CONNECTION_INVALID = 0,
    CLIENT_MESSAGE_CONNECTION_STATUS = 1,
    CLIENT_MESSAGE_CONNECTION_ERROR = 2,
} CLIENT_MESSAGE_TYPE;

typedef enum {
    CONNECTION_REQUEST_INVALID = 0,
    CONNECTION_REQUEST_PENDING = 1,
    CONNECTION_REQUEST_FAILED = 2,
    CONNECTION_REQUEST_TIMEDOUT = 3,
    CONNECTION_REQUEST_SUCCEEDED = 4,
    CONNECTION_REQUEST_CANCELLED = 5,
    CONNECTION_REQUEST_LB_COMPLETED = 6,
    CONNECTION_REQUEST_QUERY_PL_COMPLETED = 7,
    CONNECTION_REQUEST_ORCH_COMPLETED = 8,
} CONNECTION_CHANGE_NOTIFICATION;

typedef enum {
    RD_FARM_RDSH = 0,
    RD_FARM_TEMP_VM = 1,
    RD_FARM_MANUAL_PERSONAL_VM = 2,
    RD_FARM_AUTO_PERSONAL_VM = 3,
    RD_FARM_MANUAL_PERSONAL_RDSH = 4,
    RD_FARM_AUTO_PERSONAL_RDSH = 5,
    RD_FARM_TYPE_UNKNOWN = -1,
} RD_FARM_TYPE;

typedef enum {
    UNKNOWN_PLUGIN = 0,
    POLICY_PLUGIN = 1,
    RESOURCE_PLUGIN = 2,
    LOAD_BALANCING_PLUGIN = 4,
    PLACEMENT_PLUGIN = 8,
    ORCHESTRATION_PLUGIN = 16,
    PROVISIONING_PLUGIN = 32,
    TASK_PLUGIN = 64,
} PLUGIN_TYPE;

typedef enum {
    STATE_INVALID = -1,
    STATE_ACTIVE = 0,
    STATE_CONNECTED = 1,
    STATE_CONNECTQUERY = 2,
    STATE_SHADOW = 3,
    STATE_DISCONNECTED = 4,
    STATE_IDLE = 5,
    STATE_LISTEN = 6,
    STATE_RESET = 7,
    STATE_DOWN = 8,
    STATE_INIT = 9,
    STATE_MAX = 10,
} TSSESSION_STATE;

typedef enum {
    OWNER_UNKNOWN = 0,
    OWNER_MS_TS_PLUGIN = 1,
    OWNER_MS_VM_PLUGIN = 2,
} TARGET_OWNER;

typedef int CLIENT_DISPLAY;

typedef int TSSD_ConnectionPoint;

typedef enum {
    VM_NOTIFY_STATUS_PENDING = 0,
    VM_NOTIFY_STATUS_IN_PROGRESS = 1,
    VM_NOTIFY_STATUS_COMPLETE = 2,
    VM_NOTIFY_STATUS_FAILED = 3,
    VM_NOTIFY_STATUS_CANCELED = 4,
} VM_NOTIFY_STATUS;

typedef int VM_NOTIFY_ENTRY;

typedef int VM_PATCH_INFO;

typedef int VM_NOTIFY_INFO;

typedef enum {
    VM_HOST_STATUS_INIT_PENDING = 0,
    VM_HOST_STATUS_INIT_IN_PROGRESS = 1,
    VM_HOST_STATUS_INIT_COMPLETE = 2,
    VM_HOST_STATUS_INIT_FAILED = 3,
} VM_HOST_NOTIFY_STATUS;

typedef enum {
    RDV_TASK_STATUS_UNKNOWN = 0,
    RDV_TASK_STATUS_SEARCHING = 1,
    RDV_TASK_STATUS_DOWNLOADING = 2,
    RDV_TASK_STATUS_APPLYING = 3,
    RDV_TASK_STATUS_REBOOTING = 4,
    RDV_TASK_STATUS_REBOOTED = 5,
    RDV_TASK_STATUS_SUCCESS = 6,
    RDV_TASK_STATUS_FAILED = 7,
    RDV_TASK_STATUS_TIMEOUT = 8,
} RDV_TASK_STATUS;

typedef enum {
    TS_SB_SORT_BY_NONE = 0,
    TS_SB_SORT_BY_NAME = 1,
    TS_SB_SORT_BY_PROP = 2,
} TS_SB_SORT_BY;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbPlugin;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbResourcePlugin;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbServiceNotification;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbLoadBalancing;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbPlacement;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbOrchestration;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbEnvironment;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbLoadBalanceResult;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbTarget;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbSession;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbResourceNotification;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbResourceNotificationEx;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbTaskInfo;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbTaskPlugin;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbPropertySet;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbPluginPropertySet;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbClientConnectionPropertySet;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbTargetPropertySet;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbEnvironmentPropertySet;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbBaseNotifySink;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbPluginNotifySink;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbLoadBalancingNotifySink;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbPlacementNotifySink;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbOrchestrationNotifySink;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbTaskPluginNotifySink;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbClientConnection;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbProvider;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbResourcePluginStore;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbFilterPluginStore;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbGlobalStore;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbProvisioningPluginNotifySink;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int ITsSbProvisioning;

// TODO: this type is limited to platform 'windowsServer2016'
typedef int ITsSbGenericNotifySink;

typedef int pluginResource;

// TODO: this type is limited to platform 'windowsServer2008'
typedef int ItsPubPlugin;

typedef int pluginResource2FileAssociation;

typedef int pluginResource2;

typedef enum {
    TSPUB_PLUGIN_PD_QUERY_OR_CREATE = 0,
    TSPUB_PLUGIN_PD_QUERY_EXISTING = 1,
} TSPUB_PLUGIN_PD_RESOLUTION_TYPE;

typedef enum {
    TSPUB_PLUGIN_PD_ASSIGNMENT_NEW = 0,
    TSPUB_PLUGIN_PD_ASSIGNMENT_EXISTING = 1,
} TSPUB_PLUGIN_PD_ASSIGNMENT_TYPE;

// TODO: this type is limited to platform 'windows8.0'
typedef int ItsPubPlugin2;

// TODO: this type is limited to platform 'windows6.1'
typedef int IWorkspaceResTypeRegistry;

// TODO: this type is limited to platform 'windows6.0.6000'
typedef int IWTSPlugin;

// TODO: this type is limited to platform 'windows6.0.6000'
typedef int IWTSListener;

// TODO: this type is limited to platform 'windows6.0.6000'
typedef int IWTSListenerCallback;

// TODO: this type is limited to platform 'windows6.0.6000'
typedef int IWTSVirtualChannelCallback;

// TODO: this type is limited to platform 'windows6.0.6000'
typedef int IWTSVirtualChannelManager;

// TODO: this type is limited to platform 'windows6.0.6000'
typedef int IWTSVirtualChannel;

// TODO: this type is limited to platform 'windows8.0'
typedef int IWTSPluginServiceProvider;

typedef int BITMAP_RENDERER_STATISTICS;

// TODO: this type is limited to platform 'windows8.0'
typedef int IWTSBitmapRenderer;

// TODO: this type is limited to platform 'windows8.0'
typedef int IWTSBitmapRendererCallback;

// TODO: this type is limited to platform 'windows8.0'
typedef int IWTSBitmapRenderService;

// TODO: this type is limited to platform 'windows8.0'
typedef int IWRdsGraphicsChannelEvents;

// TODO: this type is limited to platform 'windows8.0'
typedef int IWRdsGraphicsChannel;

typedef enum {
    WRdsGraphicsChannelType_GuaranteedDelivery = 0,
    WRdsGraphicsChannelType_BestEffortDelivery = 1,
} WRdsGraphicsChannelType;

// TODO: this type is limited to platform 'windows8.0'
typedef int IWRdsGraphicsChannelManager;

typedef int RFX_GFX_RECT;

typedef int RFX_GFX_MSG_HEADER;

typedef int RFX_GFX_MONITOR_INFO;

typedef int RFX_GFX_MSG_CLIENT_DESKTOP_INFO_REQUEST;

typedef int RFX_GFX_MSG_CLIENT_DESKTOP_INFO_RESPONSE;

typedef int RFX_GFX_MSG_DESKTOP_CONFIG_CHANGE_NOTIFY;

typedef int RFX_GFX_MSG_DESKTOP_CONFIG_CHANGE_CONFIRM;

typedef int RFX_GFX_MSG_DESKTOP_INPUT_RESET;

typedef int RFX_GFX_MSG_DISCONNECT_NOTIFY;

typedef int RFX_GFX_MSG_DESKTOP_RESEND_REQUEST;

typedef int RFX_GFX_MSG_RDP_DATA;

typedef int WTS_SOCKADDR;

typedef int WTS_SMALL_RECT;

typedef enum {
    WTS_SERVICE_NONE = 0,
    WTS_SERVICE_START = 1,
    WTS_SERVICE_STOP = 2,
} WTS_RCM_SERVICE_STATE;

typedef enum {
    WTS_DRAIN_STATE_NONE = 0,
    WTS_DRAIN_IN_DRAIN = 1,
    WTS_DRAIN_NOT_IN_DRAIN = 2,
} WTS_RCM_DRAIN_STATE;

typedef int WTS_SERVICE_STATE;

typedef int WTS_SESSION_ID;

typedef int WTS_USER_CREDENTIAL;

typedef int WTS_SYSTEMTIME;

typedef int WTS_TIME_ZONE_INFORMATION;

typedef int WRDS_DYNAMIC_TIME_ZONE_INFORMATION;

typedef int WTS_CLIENT_DATA;

typedef int WTS_USER_DATA;

typedef int WTS_POLICY_DATA;

typedef int WTS_PROTOCOL_CACHE;

typedef int WTS_CACHE_STATS_UN;

typedef int WTS_CACHE_STATS;

typedef int WTS_PROTOCOL_COUNTERS;

typedef int WTS_PROTOCOL_STATUS;

typedef int WTS_DISPLAY_IOCTL;

typedef enum {
    WTS_LOGON_ERR_INVALID = 0,
    WTS_LOGON_ERR_NOT_HANDLED = 1,
    WTS_LOGON_ERR_HANDLED_SHOW = 2,
    WTS_LOGON_ERR_HANDLED_DONT_SHOW = 3,
    WTS_LOGON_ERR_HANDLED_DONT_SHOW_START_OVER = 4,
} WTS_LOGON_ERROR_REDIRECTOR_RESPONSE;

typedef int WTS_PROPERTY_VALUE;

typedef enum {
    WTS_CERT_TYPE_INVALID = 0,
    WTS_CERT_TYPE_PROPRIETORY = 1,
    WTS_CERT_TYPE_X509 = 2,
} WTS_CERT_TYPE;

typedef int WTS_LICENSE_CAPABILITIES;

typedef enum {
    WRDS_CONNECTION_SETTING_LEVEL_INVALID = 0,
    WRDS_CONNECTION_SETTING_LEVEL_1 = 1,
} WRDS_CONNECTION_SETTING_LEVEL;

typedef enum {
    WRDS_LISTENER_SETTING_LEVEL_INVALID = 0,
    WRDS_LISTENER_SETTING_LEVEL_1 = 1,
} WRDS_LISTENER_SETTING_LEVEL;

typedef enum {
    WRDS_SETTING_TYPE_INVALID = 0,
    WRDS_SETTING_TYPE_MACHINE = 1,
    WRDS_SETTING_TYPE_USER = 2,
    WRDS_SETTING_TYPE_SAM = 3,
} WRDS_SETTING_TYPE;

typedef enum {
    WRDS_SETTING_STATUS_NOTAPPLICABLE = -1,
    WRDS_SETTING_STATUS_DISABLED = 0,
    WRDS_SETTING_STATUS_ENABLED = 1,
    WRDS_SETTING_STATUS_NOTCONFIGURED = 2,
} WRDS_SETTING_STATUS;

typedef enum {
    WRDS_SETTING_LEVEL_INVALID = 0,
    WRDS_SETTING_LEVEL_1 = 1,
} WRDS_SETTING_LEVEL;

typedef int WRDS_LISTENER_SETTINGS_1;

typedef int WRDS_LISTENER_SETTING;

typedef int WRDS_LISTENER_SETTINGS;

typedef int WRDS_CONNECTION_SETTINGS_1;

typedef int WRDS_SETTINGS_1;

typedef int WRDS_CONNECTION_SETTING;

typedef int WRDS_CONNECTION_SETTINGS;

typedef int WRDS_SETTING;

typedef int WRDS_SETTINGS;

// TODO: this type is limited to platform 'windowsServer2008'
typedef int IWTSProtocolManager;

// TODO: this type is limited to platform 'windowsServer2008'
typedef int IWTSProtocolListener;

// TODO: this type is limited to platform 'windowsServer2008'
typedef int IWTSProtocolListenerCallback;

// TODO: this type is limited to platform 'windowsServer2008'
typedef int IWTSProtocolConnection;

// TODO: this type is limited to platform 'windowsServer2008'
typedef int IWTSProtocolConnectionCallback;

// TODO: this type is limited to platform 'windowsServer2008'
typedef int IWTSProtocolShadowConnection;

// TODO: this type is limited to platform 'windowsServer2008'
typedef int IWTSProtocolShadowCallback;

// TODO: this type is limited to platform 'windowsServer2008'
typedef int IWTSProtocolLicenseConnection;

// TODO: this type is limited to platform 'windowsServer2008'
typedef int IWTSProtocolLogonErrorRedirector;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int IWRdsRemoteFXGraphicsConnection;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int IWRdsProtocolSettings;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int IWRdsProtocolManager;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int IWRdsProtocolListener;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int IWRdsProtocolListenerCallback;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int IWRdsProtocolConnection;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int IWRdsProtocolConnectionCallback;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int IWRdsProtocolShadowConnection;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int IWRdsProtocolShadowCallback;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int IWRdsProtocolLicenseConnection;

// TODO: this type is limited to platform 'windowsServer2012'
typedef int IWRdsProtocolLogonErrorRedirector;

typedef int IWRdsWddmIddProps;

typedef int IWRdsProtocolConnectionSettings;

typedef enum {
    PasswordEncodingUTF8 = 0,
    PasswordEncodingUTF16LE = 1,
    PasswordEncodingUTF16BE = 2,
} PasswordEncodingType;

// TODO: this type is limited to platform 'windows8.0'
typedef int IRemoteDesktopClientSettings;

typedef enum {
    RemoteActionCharms = 0,
    RemoteActionAppbar = 1,
    RemoteActionSnap = 2,
    RemoteActionStartScreen = 3,
    RemoteActionAppSwitch = 4,
} RemoteActionType;

typedef enum {
    SnapshotEncodingDataUri = 0,
} SnapshotEncodingType;

typedef enum {
    SnapshotFormatPng = 0,
    SnapshotFormatJpeg = 1,
    SnapshotFormatBmp = 2,
} SnapshotFormatType;

// TODO: this type is limited to platform 'windows8.0'
typedef int IRemoteDesktopClientActions;

// TODO: this type is limited to platform 'windows8.0'
typedef int IRemoteDesktopClientTouchPointer;

typedef enum {
    KeyCombinationHome = 0,
    KeyCombinationLeft = 1,
    KeyCombinationUp = 2,
    KeyCombinationRight = 3,
    KeyCombinationDown = 4,
    KeyCombinationScroll = 5,
} KeyCombinationType;

// TODO: this type is limited to platform 'windows8.0'
typedef int IRemoteDesktopClient;


//--------------------------------------------------------------------------------
// Section: Functions (65)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSStopRemoteControlSession();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSStartRemoteControlSessionW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSStartRemoteControlSessionA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSConnectSessionA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSConnectSessionW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSEnumerateServersW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSEnumerateServersA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HANDLE*/void WTSOpenServerW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HANDLE*/void WTSOpenServerA();

// TODO: this type is limited to platform 'windows6.1'
/*HANDLE*/void WTSOpenServerExW();

// TODO: this type is limited to platform 'windows6.1'
/*HANDLE*/void WTSOpenServerExA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*void*/void WTSCloseServer();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSEnumerateSessionsW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSEnumerateSessionsA();

// TODO: this type is limited to platform 'windows6.1'
/*BOOL*/void WTSEnumerateSessionsExW();

// TODO: this type is limited to platform 'windows6.1'
/*BOOL*/void WTSEnumerateSessionsExA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSEnumerateProcessesW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSEnumerateProcessesA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSTerminateProcess();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSQuerySessionInformationW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSQuerySessionInformationA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSQueryUserConfigW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSQueryUserConfigA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSSetUserConfigW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSSetUserConfigA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSSendMessageW();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSSendMessageA();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSDisconnectSession();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSLogoffSession();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSShutdownSystem();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSWaitSystemEvent();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HwtsVirtualChannelHandle*/void WTSVirtualChannelOpen();

// TODO: this type is limited to platform 'windows6.0.6000'
/*HwtsVirtualChannelHandle*/void WTSVirtualChannelOpenEx();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSVirtualChannelClose();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSVirtualChannelRead();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSVirtualChannelWrite();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSVirtualChannelPurgeInput();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSVirtualChannelPurgeOutput();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSVirtualChannelQuery();

// TODO: this type is limited to platform 'windows6.0.6000'
/*void*/void WTSFreeMemory();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSRegisterSessionNotification();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSUnRegisterSessionNotification();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSRegisterSessionNotificationEx();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSUnRegisterSessionNotificationEx();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void WTSQueryUserToken();

// TODO: this type is limited to platform 'windows6.1'
/*BOOL*/void WTSFreeMemoryExW();

// TODO: this type is limited to platform 'windows6.1'
/*BOOL*/void WTSFreeMemoryExA();

// TODO: this type is limited to platform 'windows6.1'
/*BOOL*/void WTSEnumerateProcessesExW();

// TODO: this type is limited to platform 'windows6.1'
/*BOOL*/void WTSEnumerateProcessesExA();

// TODO: this type is limited to platform 'windows6.1'
/*BOOL*/void WTSEnumerateListenersW();

// TODO: this type is limited to platform 'windows6.1'
/*BOOL*/void WTSEnumerateListenersA();

// TODO: this type is limited to platform 'windows6.1'
/*BOOL*/void WTSQueryListenerConfigW();

// TODO: this type is limited to platform 'windows6.1'
/*BOOL*/void WTSQueryListenerConfigA();

// TODO: this type is limited to platform 'windows6.1'
/*BOOL*/void WTSCreateListenerW();

// TODO: this type is limited to platform 'windows6.1'
/*BOOL*/void WTSCreateListenerA();

// TODO: this type is limited to platform 'windows6.1'
/*BOOL*/void WTSSetListenerSecurityW();

// TODO: this type is limited to platform 'windows6.1'
/*BOOL*/void WTSSetListenerSecurityA();

// TODO: this type is limited to platform 'windows6.1'
/*BOOL*/void WTSGetListenerSecurityW();

// TODO: this type is limited to platform 'windows6.1'
/*BOOL*/void WTSGetListenerSecurityA();

// TODO: this type is limited to platform 'windows8.0'
/*BOOL*/void WTSEnableChildSessions();

// TODO: this type is limited to platform 'windows8.0'
/*BOOL*/void WTSIsChildSessionsEnabled();

// TODO: this type is limited to platform 'windows8.0'
/*BOOL*/void WTSGetChildSessionId();

// TODO: this type is limited to platform 'windows8.0'
/*HRESULT*/void WTSSetRenderHint();

// TODO: this type is limited to platform 'windows6.0.6000'
/*BOOL*/void ProcessIdToSessionId();

// TODO: this type is limited to platform 'windows6.0.6000'
/*u32*/void WTSGetActiveConsoleSessionId();

